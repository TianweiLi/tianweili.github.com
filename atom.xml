<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[李天炜]]></title>
  <link href="http://tianweili.github.io/atom.xml" rel="self"/>
  <link href="http://tianweili.github.io/"/>
  <updated>2015-03-18T21:31:41+08:00</updated>
  <id>http://tianweili.github.io/</id>
  <author>
    <name><![CDATA[李天炜 litianwei2013[AT]gmail.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux下使用nexus搭建maven私服]]></title>
    <link href="http://tianweili.github.io/blog/2015/03/17/linux-nexus-maven-private-server/"/>
    <updated>2015-03-17T17:26:57+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/03/17/linux-nexus-maven-private-server</id>
    <content type="html"><![CDATA[<p>有个maven私服可以很方便地管理我们的jar包和发布构建到远程仓库，本文就介绍了如何在linux下一步步使用nexus搭建maven私服。</p>

<!--more-->


<p>原文链接：</p>

<p><a href="http://tianweili.github.io/blog/2015/03/17/linux-nexus-maven-private-server/">http://tianweili.github.io/blog/2015/03/17/linux-nexus-maven-private-server/</a></p>

<h2>下载安装</h2>

<p>最新nexus下载地址：<a href="http://www.sonatype.org/nexus/go">http://www.sonatype.org/nexus/go</a></p>

<p>解压后会在同级目录中，出现两个文件夹：<code>nexus-oss-webapp-1.8.0</code>和<code>sonatype-work</code>，前者包含了nexus的运行环境和应用程序，后者包含了你自己的配置和数据。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir nexus
</span><span class='line'><span class="nv">$ </span>tar xzvf /home/jili/nexus-2.7.0-05-bundle.tar.gz
</span><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>nexus-2.7.0-05  sonatype-work
</span></code></pre></td></tr></table></div></figure>


<h2>启动nexus</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>bin/
</span><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>jsw  nexus  nexus.bat
</span><span class='line'><span class="nv">$ </span>./nexus
</span><span class='line'>Usage: ./nexus <span class="o">{</span> console <span class="p">|</span> start <span class="p">|</span> stop <span class="p">|</span> restart <span class="p">|</span> status <span class="p">|</span> dump <span class="o">}</span>
</span><span class='line'><span class="nv">$ </span>./nexus start
</span><span class='line'>Starting Nexus OSS...
</span><span class='line'>Started Nexus OSS.
</span></code></pre></td></tr></table></div></figure>


<p>查看控制台：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./nexus console
</span></code></pre></td></tr></table></div></figure>


<p>显示未启动成功，报错如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./nexus console
</span><span class='line'>Running Nexus OSS...
</span><span class='line'>wrapper  <span class="p">|</span> --&gt; Wrapper Started as Console
</span><span class='line'>wrapper  <span class="p">|</span> Launching a JVM...
</span><span class='line'>wrapper  <span class="p">|</span> JVM exited <span class="k">while</span> loading the application.
</span><span class='line'>jvm <span class="m">1</span>    <span class="p">|</span> Exception in thread <span class="s2">&quot;main&quot;</span> java.lang.UnsupportedClassVersionError: org/sonatype/nexus/bootstrap/jsw/JswLauncher : Unsupported major.minor version 51.0
</span><span class='line'>jvm <span class="m">1</span>    <span class="p">|</span>      at java.lang.ClassLoader.defineClass1<span class="o">(</span>Native Method<span class="o">)</span>
</span><span class='line'>jvm <span class="m">1</span>    <span class="p">|</span>      at java.lang.ClassLoader.defineClassCond<span class="o">(</span>ClassLoader.java:632<span class="o">)</span>
</span><span class='line'>jvm <span class="m">1</span>    <span class="p">|</span>      at java.lang.ClassLoader.defineClass<span class="o">(</span>ClassLoader.java:616<span class="o">)</span>
</span><span class='line'>jvm <span class="m">1</span>    <span class="p">|</span>      at java.security.SecureClassLoader.defineClass<span class="o">(</span>SecureClassLoader.java:141<span class="o">)</span>
</span><span class='line'>jvm <span class="m">1</span>    <span class="p">|</span>      at java.net.URLClassLoader.defineClass<span class="o">(</span>URLClassLoader.java:283<span class="o">)</span>
</span><span class='line'>jvm <span class="m">1</span>    <span class="p">|</span>      at java.net.URLClassLoader.access<span class="nv">$000</span><span class="o">(</span>URLClassLoader.java:58<span class="o">)</span>
</span><span class='line'>jvm <span class="m">1</span>    <span class="p">|</span>      at java.net.URLClassLoader<span class="nv">$1</span>.run<span class="o">(</span>URLClassLoader.java:197<span class="o">)</span>
</span><span class='line'>jvm <span class="m">1</span>    <span class="p">|</span>      at java.security.AccessController.doPrivileged<span class="o">(</span>Native Method<span class="o">)</span>
</span><span class='line'>jvm <span class="m">1</span>    <span class="p">|</span>      at java.net.URLClassLoader.findClass<span class="o">(</span>URLClassLoader.java:190<span class="o">)</span>
</span><span class='line'>jvm <span class="m">1</span>    <span class="p">|</span>      at java.lang.ClassLoader.loadClass<span class="o">(</span>ClassLoader.java:307<span class="o">)</span>
</span><span class='line'>jvm <span class="m">1</span>    <span class="p">|</span>      at sun.misc.Launcher<span class="nv">$AppClassLoader</span>.loadClass<span class="o">(</span>Launcher.java:301<span class="o">)</span>
</span><span class='line'>jvm <span class="m">1</span>    <span class="p">|</span>      at java.lang.ClassLoader.loadClass<span class="o">(</span>ClassLoader.java:248<span class="o">)</span>
</span><span class='line'>jvm <span class="m">1</span>    <span class="p">|</span> Could not find the main class: org.sonatype.nexus.bootstrap.jsw.JswLauncher.  Program will exit.
</span><span class='line'>wrapper  <span class="p">|</span> Reloading Wrapper configuration...
</span><span class='line'>wrapper  <span class="p">|</span> Launching a JVM...
</span><span class='line'>wrapper  <span class="p">|</span> JVM exited <span class="k">while</span> loading the application.
</span><span class='line'>.
</span><span class='line'>.
</span><span class='line'>.
</span><span class='line'>jvm <span class="m">5</span>    <span class="p">|</span> Exception in thread <span class="s2">&quot;main&quot;</span> java.lang.UnsupportedClassVersionError: org/sonatype/nexus/bootstrap/jsw/JswLauncher : Unsupported major.minor version 51.0
</span><span class='line'>jvm <span class="m">5</span>    <span class="p">|</span>      at java.lang.ClassLoader.defineClass1<span class="o">(</span>Native Method<span class="o">)</span>
</span><span class='line'>jvm <span class="m">5</span>    <span class="p">|</span>      at java.lang.ClassLoader.defineClassCond<span class="o">(</span>ClassLoader.java:632<span class="o">)</span>
</span><span class='line'>jvm <span class="m">5</span>    <span class="p">|</span>      at java.lang.ClassLoader.defineClass<span class="o">(</span>ClassLoader.java:616<span class="o">)</span>
</span><span class='line'>jvm <span class="m">5</span>    <span class="p">|</span>      at java.security.SecureClassLoader.defineClass<span class="o">(</span>SecureClassLoader.java:141<span class="o">)</span>
</span><span class='line'>jvm <span class="m">5</span>    <span class="p">|</span>      at java.net.URLClassLoader.defineClass<span class="o">(</span>URLClassLoader.java:283<span class="o">)</span>
</span><span class='line'>jvm <span class="m">5</span>    <span class="p">|</span>      at java.net.URLClassLoader.access<span class="nv">$000</span><span class="o">(</span>URLClassLoader.java:58<span class="o">)</span>
</span><span class='line'>jvm <span class="m">5</span>    <span class="p">|</span>      at java.net.URLClassLoader<span class="nv">$1</span>.run<span class="o">(</span>URLClassLoader.java:197<span class="o">)</span>
</span><span class='line'>jvm <span class="m">5</span>    <span class="p">|</span>      at java.security.AccessController.doPrivileged<span class="o">(</span>Native Method<span class="o">)</span>
</span><span class='line'>jvm <span class="m">5</span>    <span class="p">|</span>      at java.net.URLClassLoader.findClass<span class="o">(</span>URLClassLoader.java:190<span class="o">)</span>
</span><span class='line'>jvm <span class="m">5</span>    <span class="p">|</span>      at java.lang.ClassLoader.loadClass<span class="o">(</span>ClassLoader.java:307<span class="o">)</span>
</span><span class='line'>jvm <span class="m">5</span>    <span class="p">|</span>      at sun.misc.Launcher<span class="nv">$AppClassLoader</span>.loadClass<span class="o">(</span>Launcher.java:301<span class="o">)</span>
</span><span class='line'>jvm <span class="m">5</span>    <span class="p">|</span>      at java.lang.ClassLoader.loadClass<span class="o">(</span>ClassLoader.java:248<span class="o">)</span>
</span><span class='line'>jvm <span class="m">5</span>    <span class="p">|</span> Could not find the main class: org.sonatype.nexus.bootstrap.jsw.JswLauncher.  Program will exit.
</span><span class='line'>wrapper  <span class="p">|</span> There were <span class="m">5</span> failed launches in a row, each lasting less than <span class="m">300</span> seconds.  Giving up.
</span><span class='line'>wrapper  <span class="p">|</span>   There may be a configuration problem: please check the logs.
</span><span class='line'>wrapper  <span class="p">|</span> &lt;-- Wrapper Stopped
</span></code></pre></td></tr></table></div></figure>


<p>原因：查找原因是JDK版本过低造成的，升级到最新的JDK7或者使用<code>nexus-2.4-bundle.tar.gz</code>版本JDK6会支持.</p>

<p>Nexus所有版本下载地址：<a href="http://www.sonatype.org/nexus/archived">http://www.sonatype.org/nexus/archived</a></p>

<p>下载Nexus2.4重来</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>nexus-2.4.0-09  sonatype-work
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>nexus-2.4.0-09/bin/
</span><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>jsw  nexus  nexus.bat
</span><span class='line'><span class="nv">$ </span>./nexus
</span><span class='line'>Usage: ./nexus <span class="o">{</span> console <span class="p">|</span> start <span class="p">|</span> stop <span class="p">|</span> restart <span class="p">|</span> status <span class="p">|</span> dump <span class="o">}</span>
</span><span class='line'><span class="nv">$ </span>./nexus start
</span><span class='line'>Starting Nexus OSS...
</span><span class='line'>Started Nexus OSS.
</span><span class='line'><span class="nv">$ </span>./nexus console
</span><span class='line'>Running Nexus OSS...
</span><span class='line'>Nexus OSS is already running.
</span></code></pre></td></tr></table></div></figure>


<p>控制台显示启动成功。</p>

<p>查看nexus日志：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>nexus-2.4.0-09/logs
</span><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>wrapper.log
</span><span class='line'><span class="nv">$ </span>tail -f wrapper.log
</span></code></pre></td></tr></table></div></figure>


<h2>配置nexus</h2>

<p>访问网址：<a href="http://yourhostname:8081/nexus">http://yourhostname:8081/nexus</a></p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/java/nexus-maven-1.png"></p>

<p>右上角以admin登陆，默认用户名/密码：admin/admin123。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/java/nexus-maven-2.png"></p>

<p>3rd party、Snapshots、Releases这三个，分别用来保存第三方jar、项目组内部的快照、项目组内部的发布版.</p>

<h2>手动添加第三方jar</h2>

<p>将第三方的jar上传到nexus上面：</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/java/nexus-maven-3.png"></p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/java/nexus-maven-4.png"></p>

<p>点击Upload Artifact(s)按钮提交后即上传。</p>

<p>查看上传的jar包如下：</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/java/nexus-maven-5.png"></p>

<p>在项目中使用私服的jar包配置pom.xml如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>com.vclk.mkt.crawler<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>MarketingCrawler<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;packaging&gt;</span>jar<span class="nt">&lt;/packaging&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>0.3<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>MarketingCrawler<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;url&gt;</span>http://maven.apache.org<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- 仓库地址 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;repositories&gt;</span>
</span><span class='line'>      <span class="nt">&lt;repository&gt;</span>
</span><span class='line'>          <span class="nt">&lt;id&gt;</span>nexus<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>          <span class="nt">&lt;name&gt;</span>Team Nexus Repository<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>          <span class="nt">&lt;url&gt;</span>http://yourhostname:8081/nexus/content/groups/public<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/repository&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/repositories&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c">&lt;!-- 插件地址 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;pluginRepositories&gt;</span>
</span><span class='line'>      <span class="nt">&lt;pluginRepository&gt;</span>
</span><span class='line'>          <span class="nt">&lt;id&gt;</span>nexus<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>          <span class="nt">&lt;name&gt;</span>Team Nexus Repository<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>          <span class="nt">&lt;url&gt;</span>http://yourhostname:8081/nexus/content/groups/public<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/pluginRepository&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/pluginRepositories&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- jar --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>de.innosystec<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>java-unrar<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>0.5<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Maven在项目根目录下执行mvn eclipse:eclipse命令时，所依赖的jar包都会从私服中下载到本地并关联上项目，私服中没有就会从网络上下载到私服，本地再从私服下载。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/java/nexus-maven-6.png"></p>

<h2>自动发布构件到远程仓库</h2>

<p>在工程的pom.xml中添加：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;distributionManagement&gt;</span>
</span><span class='line'>  <span class="nt">&lt;repository&gt;</span>
</span><span class='line'>      <span class="nt">&lt;id&gt;</span>nexus-releases<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>      <span class="nt">&lt;url&gt;</span>http://yourhostname:8081/nexus/content/repositories/releases/<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/repository&gt;</span>
</span><span class='line'>  <span class="nt">&lt;snapshotRepository&gt;</span>
</span><span class='line'>      <span class="nt">&lt;id&gt;</span>nexus-snapshots<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>      <span class="nt">&lt;url&gt;</span>http://yourhostname:8081/nexus/content/repositories/snapshots/<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/snapshotRepository&gt;</span>
</span><span class='line'><span class="nt">&lt;/distributionManagement&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>进入maven的安装目录apache-maven-3.1.1\conf目录下，向settings.xml配置文件中的<servers>语句块中添加如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;servers&gt;</span>
</span><span class='line'>  <span class="nt">&lt;server&gt;</span>
</span><span class='line'>      <span class="nt">&lt;id&gt;</span>nexus-releases<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>      <span class="nt">&lt;username&gt;</span>admin<span class="nt">&lt;/username&gt;</span>
</span><span class='line'>      <span class="nt">&lt;password&gt;</span>admin123<span class="nt">&lt;/password&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/server&gt;</span>
</span><span class='line'>  <span class="nt">&lt;server&gt;</span>
</span><span class='line'>      <span class="nt">&lt;id&gt;</span>nexus-snapshots<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>      <span class="nt">&lt;username&gt;</span>admin<span class="nt">&lt;/username&gt;</span>
</span><span class='line'>      <span class="nt">&lt;password&gt;</span>admin123<span class="nt">&lt;/password&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/server&gt;</span>
</span><span class='line'><span class="nt">&lt;/servers&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>进入windows命令行，在工程所在目录下执行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mvn deploy
</span></code></pre></td></tr></table></div></figure>


<p>所部署的包就自动上传到了nexus安装目录下的<code>/maven/nexus/sonatype-work/nexus/storage/releases/com/vclk/mkt/crawler/MarketingCrawler/0.3</code>目录</p>

<h2>nexus仓库中各目录介绍</h2>

<p>项目中的各种jar包和项目快照等都放在<code>/nexus/sonatype-work/nexus/storage/</code>目录下，在这个目录下包括以下各种目录和存放相应文件。</p>

<p><code>/nexus/sonatype-work/nexus/storage/central</code> - 用于放置maven从中央仓库中下载下来的项目pom.xml中配置到的相关jar包；</p>

<p><code>/nexus/sonatype-work/nexus/storage/thirdparty</code> - 用于放置自己手动上传的第三方jar包；</p>

<p><code>/nexus/sonatype-work/nexus/storage/releases</code> - 用于放置项目deploy后的发布版。</p>

<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/03/17/linux-nexus-maven-private-server/">http://tianweili.github.io/blog/2015/03/17/linux-nexus-maven-private-server/</a></p>

<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[代理模式]]></title>
    <link href="http://tianweili.github.io/blog/2015/03/13/proxy-pattern/"/>
    <updated>2015-03-13T21:55:18+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/03/13/proxy-pattern</id>
    <content type="html"><![CDATA[<p>本文讲述了代理模式，包括了普通代理、强制代理和动态代理。</p>

<!--more-->


<p>原文链接：</p>

<p><a href="http://tianweili.github.io/blog/2015/03/13/proxy-pattern/">http://tianweili.github.io/blog/2015/03/13/proxy-pattern/</a></p>

<h2>介绍</h2>

<p>代理模式属于结构性模式，使用频率很高。</p>

<p>定义：Provide a surrogate or placeholder for another object to control access to it.为其他对象提供一种代理以控制这个对象的访问。</p>

<p>装饰模式、状态模式、策略模式、访问者模式本质上都是在更特殊的场合采用了代理模式。</p>

<h2>UML类图</h2>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/proxy-pattern-uml.png"></p>

<p>从以上UML类图中可以看出代理模式主要有三种角色：</p>

<p><strong>抽象主题角色</strong></p>

<p>可以是接口或抽象类，是某类通用业务的定义。</p>

<p><strong>具体主题角色</strong></p>

<p>作为被代理对象，是具体业务的真实执行者。</p>

<p><strong>代理主题角色</strong></p>

<p>是具体主题对象的代理，负责对具体对象的应用，把所有抽象主题定义的方法委托给具体主题对象来实现，它用来在具体主题对象业务处理的前后做一些处理工作。</p>

<h2>代码示例</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Abstract subject class.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Subject</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">someMethod</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Real subject class.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RealSubject</span> <span class="kd">implements</span> <span class="n">Subject</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">RealSubject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">someMethod</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&quot;&#39;s someMehtod.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Proxy class.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProxySubject</span> <span class="kd">implements</span> <span class="n">Subject</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Subject</span> <span class="n">subject</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ProxySubject</span><span class="o">(</span><span class="n">Subject</span> <span class="n">subject</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">subject</span> <span class="o">=</span> <span class="n">subject</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">someMethod</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">before</span><span class="o">();</span>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="na">someMethod</span><span class="o">();</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">after</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * preprocessing</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// do something...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * follow-up processing</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">after</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// do something...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从以上代码可以看出ProxySubject对象还有before和after方法，可以在RealSubject对象的someMethod业务方法前后做一些预处理和善后处理工作。</p>

<p>一个代理类可以代理多个被代理对象，只要是实现同一个接口。当然也可以一个被代理对象就有一个代理类，不过一般是一个接口有一个代理类就够了，在应用时具体是代理哪一个被代理对象，这是由场景类也就是高层模块定义的，根据构造方法的传入哪一个被代理对象参数来决定代理哪一个对象。</p>

<p>构造方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">ProxySubject</span><span class="o">(</span><span class="n">Subject</span> <span class="n">subject</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">subject</span> <span class="o">=</span> <span class="n">subject</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>想代理哪个对象就要传入生成这个对象的实例。</p>

<h2>优点</h2>

<p>各个角色职责清晰，比如被代理对象只需要实现属于自己具体的业务逻辑就行了，不用去关心非本职责的业务处理。其他的一些处理业务可以交给代理类来处理。这样做的好处是编程简洁清晰，业务分明。</p>

<p>扩展性好，具体实现对象的业务发生了变化，只需要修改自身业务处理逻辑，或者增加删减一个实现业务接口的对象，不会影响代理业务。</p>

<p>代理模式可以提供非常好的访问控制，由代理类来控制被代理对象，可以做一些预处理消息，过滤消息，消息转发和善后处理工作等等。</p>

<h2>普通代理和强制代理</h2>

<p>普通代理和强制代理是代理模式的两种不同结构，是根据调用者能够访问到代理对象还是具体对象来区分的。就好比网络上的代理服务器设置分为普通代理和透明代理。普通代理需要用户手动设置代理服务器的IP地址，用户必须知道代理的存在。透明代理就是用户不需要设置代理服务器地址，就可以直接访问，不用知道代理的存在。</p>

<h3>普通代理</h3>

<p>普通代理是用户只能访问代理角色，而不能访问真实角色。</p>

<p>只需要对上面代码稍作改动即可实现普通代理的效果，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Abstract subject class.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Subject</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">someMethod</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Real subject class.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RealSubject</span> <span class="kd">implements</span> <span class="n">Subject</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Don&#39;t allow client call this.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">RealSubject</span><span class="o">(</span><span class="n">Subject</span> <span class="n">subject</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">subject</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="o">(</span><span class="s">&quot;Don&#39;t allow realSubject created!&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">someMethod</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&quot;&#39;s someMehtod.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Proxy class.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProxySubject</span> <span class="kd">implements</span> <span class="n">Subject</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Subject</span> <span class="n">subject</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Client call proxy subject.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ProxySubject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">subject</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RealSubject</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">someMethod</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">before</span><span class="o">();</span>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="na">someMethod</span><span class="o">();</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">after</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * preprocessing</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// do something...</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;before ...&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * follow-up processing</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">after</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// do something...</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;after ...&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Subject</span> <span class="n">subject</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ProxySubject</span><span class="o">(</span><span class="s">&quot;ZhangSan&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="na">someMethod</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行程序结果如下：</p>

<pre><code>before ...
ZhangSan's someMehtod.
after ...
</code></pre>

<p>在上面RealSubject的构造方法中是通过传入参数subject来限制用户不能实例化自己，当然也可以通过别的一些限制条件，比如类名必须有Proxy等等。</p>

<h3>强制代理</h3>

<p>普通代理是通过代理角色找到真是角色，而强制代理是强制只能通过真实角色查找代理角色来访问，想直接通过实例化代理角色或真实角色都不能访问。</p>

<p>UML类图如下：</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/proxy-pattern-uml-2.png"></p>

<p>从以上UML类图可以看出Subject接口中添加了个获取代理的接口方法。</p>

<p>代码清单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Abstract subject class.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Subject</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">someMethod</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Subject</span> <span class="nf">getProxy</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Real subject class.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RealSubject</span> <span class="kd">implements</span> <span class="n">Subject</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Subject</span> <span class="n">proxy</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">RealSubject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">someMethod</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">isProxy</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&quot;&#39;s someMehtod.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Only visit proxy class is allowed!&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Subject</span> <span class="nf">getProxy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// appoint proxy class.</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">proxy</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ProxySubject</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">proxy</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isProxy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">proxy</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Proxy class.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProxySubject</span> <span class="kd">implements</span> <span class="n">Subject</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Subject</span> <span class="n">subject</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ProxySubject</span><span class="o">(</span><span class="n">Subject</span> <span class="n">subject</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">subject</span> <span class="o">=</span> <span class="n">subject</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">someMethod</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="na">someMethod</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Subject</span> <span class="nf">getProxy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当客户端想通过真实角色来访问时，客户端代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Subject</span> <span class="n">realSubject</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RealSubject</span><span class="o">(</span><span class="s">&quot;ZhangSan&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">realSubject</span><span class="o">.</span><span class="na">someMethod</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行结果：</p>

<pre><code>Only visit proxy class is allowed!
</code></pre>

<p>访问被拒绝，因为它是通过真实角色来直接访问的，而不是通过真实角色来获取代理角色来访问。</p>

<p>当客户端想通过代理角色来访问时，客户端代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Subject</span> <span class="n">realSubject</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RealSubject</span><span class="o">(</span><span class="s">&quot;ZhangSan&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Subject</span> <span class="n">proxy</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ProxySubject</span><span class="o">(</span><span class="n">realSubject</span><span class="o">);</span>
</span><span class='line'>        <span class="n">proxy</span><span class="o">.</span><span class="na">someMethod</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行结果：</p>

<pre><code>Only visit proxy class is allowed!
</code></pre>

<p>访问同样被拒绝，因为它是通过代理角色来直接访问的，而不是通过真实角色来获取代理角色来访问。</p>

<p>只有强制客户端通过真实角色来获取代理对象，才能访问。客户端代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Subject</span> <span class="n">realSubject</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RealSubject</span><span class="o">(</span><span class="s">&quot;ZhangSan&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Subject</span> <span class="n">proxy</span> <span class="o">=</span> <span class="n">realSubject</span><span class="o">.</span><span class="na">getProxy</span><span class="o">();</span>
</span><span class='line'>        <span class="n">proxy</span><span class="o">.</span><span class="na">someMethod</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行结果：</p>

<pre><code>ZhangSan's someMehtod.
</code></pre>

<p>通过真实角色来获取代理对象访问成功。</p>

<h2>动态代理</h2>

<p>这一节之前所讲的代理其实都是静态代理，它有一个特点就是要在实现阶段就要指定代理类以及被代理者，很不灵活。而动态代理就是在实现阶段不用管代理具体对象，而在运行阶段指定代理哪个对象即可生产代理对象。</p>

<p>基本的UML类图如下所示：</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/proxy-pattern-uml-3.png"></p>

<p>从类图中可以看出，具体的业务逻辑和代理逻辑是两条线，两者之间没有必然的耦合关系。</p>

<p>InvocationHandler是JDK提供的接口，用来对被代理类的方法进行代理。</p>

<p>注意：<strong>被代理者必须实现一个接口</strong>，否则动态代理无法生成代理对象。</p>

<p>动态代理是根据被代理者的接口生成所有的方法。通过InvocationHandler接口，所有被代理的方法都由InvocationHandler来接管实际的处理逻辑。</p>

<p>代码清单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Abstract subject class.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Subject</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">someMethod</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Real subject class.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RealSubject</span> <span class="kd">implements</span> <span class="n">Subject</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">RealSubject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">someMethod</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&quot;&#39;s someMehtod.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.InvocationHandler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.Method</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyInvocationHandler</span> <span class="kd">implements</span> <span class="n">InvocationHandler</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Object</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MyInvocationHandler</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">obj</span> <span class="o">=</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;before...&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Object</span> <span class="n">result</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">obj</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;after...&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>invoke方法是接口InvocationHandler中定义必须实现的，它用来完成对真实方法的调用。</p>

<p>客户端调用代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.InvocationHandler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.Proxy</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Subject</span> <span class="n">subject</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RealSubject</span><span class="o">(</span><span class="s">&quot;ZhangSan&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ClassLoader</span> <span class="n">loader</span> <span class="o">=</span> <span class="n">subject</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getClassLoader</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Class</span><span class="o">[]</span> <span class="n">interfaces</span> <span class="o">=</span> <span class="n">subject</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getInterfaces</span><span class="o">();</span>
</span><span class='line'>        <span class="n">InvocationHandler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MyInvocationHandler</span><span class="o">(</span><span class="n">subject</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Subject</span> <span class="n">proxy</span> <span class="o">=</span> <span class="o">(</span><span class="n">Subject</span><span class="o">)</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">loader</span><span class="o">,</span> <span class="n">interfaces</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span><span class='line'>        <span class="n">proxy</span><span class="o">.</span><span class="na">someMethod</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行结果：</p>

<pre><code>before...
ZhangSan's someMehtod.
after...
</code></pre>

<p>从结果中可以看出我们已经达到了代理RealSubject对象的目的。</p>

<p>看了上面的客户端调用代码，我们可以优化一下，将Proxy封装起来，使得调用更简便一些。增加动态代理封装类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.InvocationHandler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.Proxy</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DynamicProxy</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Object</span> <span class="nf">newProxyInstance</span><span class="o">(</span><span class="n">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ClassLoader</span> <span class="n">loader</span> <span class="o">=</span> <span class="n">object</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getClassLoader</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Class</span><span class="o">[]</span> <span class="n">interfaces</span> <span class="o">=</span> <span class="n">object</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getInterfaces</span><span class="o">();</span>
</span><span class='line'>        <span class="n">InvocationHandler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MyInvocationHandler</span><span class="o">(</span><span class="n">object</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">loader</span><span class="o">,</span> <span class="n">interfaces</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>客户端调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Subject</span> <span class="n">subject</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RealSubject</span><span class="o">(</span><span class="s">&quot;ZhangSan&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Subject</span> <span class="n">proxy</span> <span class="o">=</span> <span class="o">(</span><span class="n">Subject</span><span class="o">)</span> <span class="n">DynamicProxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">subject</span><span class="o">);</span>
</span><span class='line'>        <span class="n">proxy</span><span class="o">.</span><span class="na">someMethod</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>动态代理优点</h2>

<p>动态代理拥有以上静态代理所有优点，除此之外还有动态代理的代理对象是在需要的时候动态生成的。</p>

<p>在业务逻辑开发时可以不用管代理业务逻辑，这两条线不会耦合。比如在做具体的业务逻辑设计和实现时不用考虑日志、事务、权限等逻辑处理，这些可以通过动态代理来搞定。</p>

<p>Struts2的Form映射和Spring的AOP（Aspect Oriented Programming）就是动态代理的典型应用。</p>

<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/03/13/proxy-pattern/">http://tianweili.github.io/blog/2015/03/13/proxy-pattern/</a></p>

<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[抽象工厂模式]]></title>
    <link href="http://tianweili.github.io/blog/2015/03/11/abstract-factory-pattern/"/>
    <updated>2015-03-11T16:32:58+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/03/11/abstract-factory-pattern</id>
    <content type="html"><![CDATA[<p>抽象工厂模式是工厂方法模式的升级版本，主要是引入了一个产品族的概念，将针对单一产品升级到了针对多个产品品种和产品分类。</p>

<!--more-->


<p>原文链接：</p>

<p><a href="http://tianweili.github.io/blog/2015/03/11/abstract-factory-pattern/">http://tianweili.github.io/blog/2015/03/11/abstract-factory-pattern/</a></p>

<h2>介绍</h2>

<p>抽象工厂模式定义：Provide an interface for creating families of related or dependent objects without specifying their concrete classes.为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们具体的类。</p>

<p>抽象工厂模式是工厂方法模式的升级版本，主要是引入了一个产品族的概念，将针对单一产品升级到了针对多个产品品种和产品分类。</p>

<h2>UML类图</h2>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/abstract-factory-uml.png"></p>

<p>左边的UML图并不复杂，主要包括2个抽象产品和一个抽象工厂。两个具体实现工厂各对应创建两个不同类别产品。</p>

<h2>产品族和产品等级</h2>

<p>抽象工厂模式关键点在于有了多个产品族。</p>

<p>如上图所示，ProductA1和ProductA2就是属于一个产品族。ProductA1和ProductB1分别属于两个不同的产品族。上面的UML图中有两个产品族。</p>

<p>有几个抽象产品类就有几个产品族。</p>

<p><strong>有几个产品族，在工厂中就有几个创建方法。</strong></p>

<p>继承于同一个抽象产品类的属于不同的产品等级。</p>

<p>ProductA1和ProductA2就是两个产品等级。ProductA1和ProductB1属于同一个产品等级。</p>

<p><strong>有几个产品等级，就有几个实现工厂类。</strong></p>

<p>在每个工厂类中，实现了不同产品族的创建方法。</p>

<h2>代码示例</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">AbstractProductA</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductA1</span> <span class="kd">implements</span> <span class="n">AbstractProductA</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;This is ProductA1.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductA2</span> <span class="kd">implements</span> <span class="n">AbstractProductA</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;This is ProductA2.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">AbstractProductB</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductB1</span> <span class="kd">implements</span> <span class="n">AbstractProductB</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;This is ProductB1.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductB2</span> <span class="kd">implements</span> <span class="n">AbstractProductB</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;This is ProductB2.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">AbstractFactory</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">AbstractProductA</span> <span class="nf">createProductA</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">AbstractProductB</span> <span class="nf">createProductB</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Factory1</span> <span class="kd">implements</span> <span class="n">AbstractFactory</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">AbstractProductA</span> <span class="nf">createProductA</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">ProductA1</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">AbstractProductB</span> <span class="nf">createProductB</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">ProductB1</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Factory2</span> <span class="kd">implements</span> <span class="n">AbstractFactory</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">AbstractProductA</span> <span class="nf">createProductA</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">ProductA2</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">AbstractProductB</span> <span class="nf">createProductB</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">ProductB2</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>客户端调用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">AbstractFactory</span> <span class="n">factory1</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Factory1</span><span class="o">();</span>
</span><span class='line'>        <span class="n">AbstractFactory</span> <span class="n">factory2</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Factory2</span><span class="o">();</span>
</span><span class='line'>        <span class="n">AbstractProductA</span> <span class="n">productA1</span> <span class="o">=</span> <span class="n">factory1</span><span class="o">.</span><span class="na">createProductA</span><span class="o">();</span>
</span><span class='line'>        <span class="n">AbstractProductB</span> <span class="n">productB1</span> <span class="o">=</span> <span class="n">factory1</span><span class="o">.</span><span class="na">createProductB</span><span class="o">();</span>
</span><span class='line'>        <span class="n">AbstractProductA</span> <span class="n">productA2</span> <span class="o">=</span> <span class="n">factory2</span><span class="o">.</span><span class="na">createProductA</span><span class="o">();</span>
</span><span class='line'>        <span class="n">AbstractProductB</span> <span class="n">productB2</span> <span class="o">=</span> <span class="n">factory2</span><span class="o">.</span><span class="na">createProductB</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的客户端调用代码中，没有与具体的产品实现类有关的代码。所以在需要某个具体产品的时候，只需要知道与之对应的工厂来生产就可以了。</p>

<h2>与工厂方法模式的区别</h2>

<p>抽象工厂模式与工厂方法模式的关键不同在于引入了一个产品族的概念，工厂方法模式相当于只有一个产品族，而抽象工厂模式有多个产品族。</p>

<p>在有多个产品族的时候只能使用抽象工厂模式了。</p>

<p>针对多个产品族，每个实现工厂都有相应的创建对应产品的方法。而工厂方法模式中实现工厂中只会有一个创建产品的方法。</p>

<h2>优点</h2>

<p>高层模块只需要知道生产相应产品的工厂类是谁，就能由工厂创建相应的产品对象。而他不用关心具体产品生产过程，符合迪米特法则。只依赖抽象产品，符合依赖倒置原则。使用产品子类替换产品父类，符合里氏替换原则。</p>

<p>不同产品族之间的约束放在工厂类中来实现，不对外公开，封装性好。</p>

<p>想较于工厂方法模式，可以应付产品更为复杂的场合。</p>

<p>在产品等级结构层面上符合开闭原则，增加一个产品等级结构扩展性好。</p>

<h2>缺点</h2>

<p>在产品族层面上不符合开闭原则，增加一个产品族，即相当于增加一个抽象产品时，需要修改大量的其他实现工厂，在产品族层面上扩展性不好。</p>

<h2>适用场景</h2>

<p>当涉及到多个产品族的时候，就需要使用抽象工厂模式了。</p>

<h2>应用实例</h2>

<h3>开发软件应用多个操作系统</h3>

<p>据说抽象工厂模式最初应用于多个操作系统软件开发上，比如要开发一个系统桌面软件，要应用到Windows和Linux操作系统上。那么对于这样的情况我们是不是要分别为两种操作系统开发不同的软件呢？当然不是。对于开发一个桌面软件来说分为界面UI和功能代码等，那么就可以应用抽象工厂模式了，界面UI和功能代码都分别为Windows和Linux开发不同的一套，然后利用工厂在需要Windows的时候调用创建相应的Windows的界面UI和功能代码。</p>

<h3>不同网站爬虫解析</h3>

<p>做过一个爬虫工程，需求是这样的，公司有多个站点，想要去根据搜索关键字获取它们在搜索页面一些要素，比如广告、文章、产品等信息。那么针对这种需求就采用了抽象工厂模式。首先将广告、文章等分别都作为一个产品族，每个网站都是一个产品等级。这样抽象出来的解析广告类、解析文章类等抽象接口，由每个具体产品去实现某个站点的解析广告，另一个产品族的具体产品去实现解析文章类，将具体解析过程封装在了产品内部。再使用相应的工厂来创建一个个产品族内的产品。</p>

<p>关键逻辑删减版类图如下</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/sitecrawler-uml.png"></p>

<p>这样就实现了良好的封装性，高层模块想调用知道某个网站的一些统计分析数据时，只需要知道相应的工厂来生产就行了，不需要知道具体的实现过程和复杂的处理逻辑。在产品等级也就是网站层面上扩展性好，后来有新增站点的时候，直接增加产品等级，实现相应的抽象产品类，再增加一个具体实现工厂就好了。</p>

<p>不过它的缺点是在产品族也就是想新增解析需求的时候扩展性不好，比如后来想增加对搜索关键词后的首页文章内容进行统计，以便查看匹配度时。就需要增加一个产品族即抽象产品模块，需要修改每个工厂的代码。</p>

<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/03/11/abstract-factory-pattern/">http://tianweili.github.io/blog/2015/03/11/abstract-factory-pattern/</a></p>

<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工厂方法模式]]></title>
    <link href="http://tianweili.github.io/blog/2015/03/09/factory-method-pattern/"/>
    <updated>2015-03-09T21:07:29+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/03/09/factory-method-pattern</id>
    <content type="html"><![CDATA[<p>工厂方法模式是简单工厂模式的衍生，核心工厂类不再负责具体产品的创建，而是一个抽象工厂的角色，仅仅定义子类工厂必须实现的接口。这样进一步抽象的好处是可以使系统在不修改具体工厂类的方式下引进新的产品。</p>

<!--more-->


<p>原文链接：</p>

<p><a href="http://tianweili.github.io/blog/2015/03/09/factory-method-pattern/">http://tianweili.github.io/blog/2015/03/09/factory-method-pattern/</a></p>

<h2>介绍</h2>

<p>工厂方法模式定义：Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses。<strong>定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。</strong></p>

<p>工厂方法模式的对简单工厂模式进行了抽象。有一个抽象的Factory类（可以是抽象类和接口），这个类将不再负责具体的产品生产，而是只制定一些规范，具体的生产工作由其子类去完成。在这个模式中，工厂类和产品类往往可以依次对应。即一个抽象工厂对应一个抽象产品，一个具体工厂对应一个具体产品，这个具体的工厂就负责生产对应的产品。</p>

<p><strong>工厂方法模式的核心和关键点是对工厂也进行了抽象。</strong></p>

<h2>UML类图</h2>

<p>工厂方法模式的UML类图如下所示：</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/factory-method-uml.png"></p>

<p>在上面的UML图中主要包含了四中角色：</p>

<p>抽象工厂（Abstract Factory）角色</p>

<p>抽象工厂角色是工厂方法模式的核心，主要定义了具体工厂子类必须要实现的接口，并且所有创建对象的工厂类都必须实现该方法，与应用程序无关。</p>

<p>具体工厂（Concrete Factory）角色</p>

<p>这是实现抽象工厂的具体工厂类，包含与应用程序密切相关的逻辑，要受到应用程序的调用以创建产品对象。</p>

<p>抽象产品（Abstract Product）角色</p>

<p>具体产品对象的共同父类，由它来定义所有产品的共同接口。</p>

<p>具体产品（Concrete Product）角色</p>

<p>具体产品是简单工厂模式的创建目标，所有创建的对象都是某个具体产品类的实例。</p>

<h2>代码示例</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Product</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductA</span> <span class="kd">implements</span> <span class="n">Product</span><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ProductA Method ...&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductB</span> <span class="kd">implements</span> <span class="n">Product</span><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ProductB Method ...&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Factory</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Product</span> <span class="nf">create</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FactoryA</span> <span class="kd">implements</span> <span class="n">Factory</span><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Product</span> <span class="nf">create</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">ProductA</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FactoryB</span> <span class="kd">implements</span> <span class="n">Factory</span><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Product</span> <span class="nf">create</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">ProductB</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Factory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FactoryA</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Product</span> <span class="n">product</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class='line'>        <span class="n">product</span><span class="o">.</span><span class="na">method</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FactoryB</span><span class="o">();</span>
</span><span class='line'>        <span class="n">product</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class='line'>        <span class="n">product</span><span class="o">.</span><span class="na">method</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果：</p>

<pre><code>ProductA Method ...
ProductB Method ...
</code></pre>

<h2>与简单工厂模式的区别</h2>

<p>工厂方法模式是简单功能工厂模式的衍生，它将工厂也抽象出来，定义了一个抽象工厂，将产品对象的实例化过程推到了下面的各个子类工厂，而且子类工厂与产品也是一一对应的。这是两者最大的区别。</p>

<p>工厂方法模式多了一个抽象工厂。</p>

<p>工厂方法模式支持多态。</p>

<h2>优点</h2>

<p>解决了许多简单工厂模式中出现的问题。</p>

<p>完全符合”开闭原则”，具有可扩展性。</p>

<p>更为复杂的层次结构，可以应付产品结果更为复杂的场合。</p>

<p>工厂方法模式是典型的解耦框架。高层模块只需要知道产品的抽象类，其它实现类都不需要关心，符合迪米特法则。只依赖产品的抽象，符合依赖倒置原则。使用产品子类替换产品父类，符合里氏替换原则。</p>

<h2>缺点</h2>

<p>抽象出了一个抽象工厂，添加了具体工厂子类，会提高系统的复杂度。所以对于一些复杂的创建过程使用工厂方法模式才比较合适。</p>

<h2>适用场景</h2>

<p>工厂方法模式是使用非常频繁的设计模式之一，在系统设计中几乎随处可见。简单工厂模式、工厂方法模式、抽象工厂模式这三个设计模式都有一些类似的特性，所以在适用场景上也都是类似的。</p>

<p>首先，作为一个创建型模式，在任何需要生成复杂对象的地方都可以使用工厂方法模式。但是要注意对于一些生成对象简单，特别是只需要通过new来生成对象的地方，就不需要使用工厂方法模式了。因为如果使用工厂方法模式，就需要引入一个工厂类，会增加系统的复杂度。</p>

<p>另外，在需要一个可扩展性强的系统设计中，可以考虑使用工厂方法模式。比如产品对象预期可能会经常造成增加或删减等，使用工厂方法模式来设计可以使系统更加灵活。</p>

<h2>应用实例</h2>

<h3>Collection中的iterator方法</h3>

<p><code>java.util.Collection</code>接口中的<code>iterator()</code>方法就是一个工厂方法。对于iterator方法来说Collection就是一个根抽象工厂，下面还有List等接口作为抽象工厂，再往下有ArrayList等具体工厂。
<code>java.util.Iterator</code>接口是根抽象产品，下面有ListIterator等抽象产品，还有ArrayListIterator等作为具体产品。</p>

<p>获得产品代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Collection</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ArrayList</span><span class="o">();</span>
</span><span class='line'><span class="n">Iterator</span> <span class="n">i</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本的UML类图如下所示：</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/collection-iterator-uml.png"></p>

<h3>JDBC数据库开发</h3>

<p>在使用JDBC进行数据库开发时，如果数据库由MySQL改为Oracle或其他，则只需要改一下数据库驱动名称就可以，其他都不用修改（前提是使用的都是标准SQL语句）。或者在Hibernate框架中，更换数据库方言也是类似道理。</p>

<h3>连接邮件服务器框架</h3>

<p>如果需要设计一个连接邮件服务器的框架，那么就要考虑到连接邮件服务器有几种方式：POP3、SMTP、HTTP。就可以定义一个连接邮件服务器接口，在此接口中定义一些对邮件操作的接口方法，把这三种连接方式封装成产品类，实现接口中定义的抽象方法。再定义抽象工厂和具体工厂，当选择不同的工厂时，对应到产生相应的连接邮件产品对象。采用这种工厂方法模式的设计，就可以做到良好的扩展性。比如某些邮件服务器提供了WebService接口，只需要增加一个产品类和工厂类就可以了，而不需要修改原来代码。</p>

<h3>网页爬虫解析</h3>

<p>在一个项目中，需要实现的需求是这样的：公司有很多站点，需要带着指定的一些关键字去网站上爬取广告、文章、产品等信息解析下来，而不同的站点风格各异，爬取和解析的方式也各不相同。</p>

<p>所以这里就用到了工厂方法模式，抽象出一个抽象产品，定义公共接口，爬取解析某个站点就封装成一个产品对象。再抽象出抽象工厂，使一些具体工厂实现抽象工厂定义的调用产品接口，每个具体工厂对应一个产品。</p>

<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/03/09/factory-method-pattern/">http://tianweili.github.io/blog/2015/03/09/factory-method-pattern/</a></p>

<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单工厂模式]]></title>
    <link href="http://tianweili.github.io/blog/2015/03/08/simple-factory-pattern/"/>
    <updated>2015-03-08T19:49:20+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/03/08/simple-factory-pattern</id>
    <content type="html"><![CDATA[<p>简单工厂模式就是工厂对象根据传入的参数，动态的决定创建哪一种产品类的实例，而这些产品类继承自一个父类或一个接口。</p>

<!--more-->


<p>原文链接：</p>

<p><a href="http://tianweili.github.io/blog/2015/03/08/simple-factory-pattern/">http://tianweili.github.io/blog/2015/03/08/simple-factory-pattern/</a></p>

<h2>介绍</h2>

<p>简单工厂模式属于创建型模式，又叫做静态工厂方法(static factory method)。但是它并没有归为23种GOF设计模式其中。</p>

<p>简单工厂模式是<strong>由工厂对象来决定创建哪一种产品类的实例</strong>。</p>

<p>简单说就是工厂对象根据传入的参数，动态的决定创建哪一种产品类的实例，而这些产品类继承自一个父类或一个接口。</p>

<h2>UML类图</h2>

<p>简单工厂模式的一个基本的UML类图如下所示：</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/simple-factory-uml.png"></p>

<p>在这个UML类图中包含以下角色：</p>

<p>工厂（Factory）</p>

<p>这是简单工厂模式的核心，由它来负责实现创建所有实例的逻辑。工厂对象用来被外界调用，根据传入的参数来决定创建哪一个产品对象。</p>

<p>抽象产品（Abstract Product）</p>

<p>抽象类或接口。是所有具体产品对象的父类，由它来定义所有具体产品的公共接口。</p>

<p>具体产品（Concrete Product）</p>

<p>具体产品是简单工厂模式的创建目标，所有创建的对象都是某个具体产品类的实例。</p>

<h2>代码示例</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Product</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">function</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductA</span> <span class="kd">implements</span> <span class="n">Product</span><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">function</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ProductA function ...&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductB</span> <span class="kd">implements</span> <span class="n">Product</span><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">function</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ProductB function ...&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Factory</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Product</span> <span class="nf">create</span><span class="o">(</span><span class="n">String</span> <span class="n">productName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">productName</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="s">&quot;&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">productName</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="s">&quot;productA&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">productName</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">ProductA</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="s">&quot;productB&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">productName</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">ProductB</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Factory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Factory</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Product</span> <span class="n">product1</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">&quot;productA&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Product</span> <span class="n">product2</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">&quot;productB&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">product1</span><span class="o">.</span><span class="na">function</span><span class="o">();</span>
</span><span class='line'>        <span class="n">product2</span><span class="o">.</span><span class="na">function</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ProductA</span> <span class="n">function</span> <span class="o">...</span>
</span><span class='line'><span class="n">ProductB</span> <span class="n">function</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>优点</h2>

<p>客户类和工厂类分开。消费者任何时候需要某种产品，只需向工厂请求即可。消费者无须修改就可以接纳新产品。</p>

<p>外界不用关注对象创建逻辑，产品对象具体的创建过程由工厂来实现。外界直接给定信息来决定创建哪个产品对象。</p>

<p>明确了各自的职责，有利于整个软件体系结构的优化。</p>

<h2>缺点</h2>

<p>违反高内聚责任分配原则，将所有的创建逻辑都集中在了工厂类身上。</p>

<p>如果需要添加新的产品类，则需要修改工厂类。</p>

<p>当产品类不断增多，工厂类对产品类型的判断条件过多交织在了一起，会造成逻辑过于复杂，对系统的扩展和维护不利。</p>

<h2>使用场景</h2>

<p>工厂类创建的产品对象比较少。</p>

<p>外界只需要传入工厂类参数来获得产品对象，对于产品对象的创建过程不关心。</p>

<p>简单工厂模式很容易违反高内聚责任分配原则，所以只是在一些很简单的情况下使用。</p>

<h2>应用实例</h2>

<h3>附件的解压</h3>

<p>在工作中，有一个项目模块中要求的功能是：登录邮箱，获取邮件，然后抓取邮件中的附件，下载下来，如果是压缩包，则进行解压，然后进行相应处理。在解压时就用到了简单工厂模式。附件压缩包格式不一，有zip,rar等格式，则把每一种格式的解压和处理都放到一个产品对象中，然后使用一个工厂类来决定创建哪一个产品进行相应的处理。</p>

<p>由于这个压缩包解压方式并不多，判断逻辑并不太复杂，所以也没必要用工厂方法模式，增加代码复杂度。</p>

<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/03/08/simple-factory-pattern/">http://tianweili.github.io/blog/2015/03/08/simple-factory-pattern/</a></p>

<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Log4j的配置与使用详解]]></title>
    <link href="http://tianweili.github.io/blog/2015/03/03/log4j/"/>
    <updated>2015-03-03T19:38:49+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/03/03/log4j</id>
    <content type="html"><![CDATA[<p>Log4j是Apache的一个开放源代码项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件、甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</p>

<!--more-->


<p>原文链接：</p>

<p><a href="http://tianweili.github.io/blog/2015/03/03/log4j/">http://tianweili.github.io/blog/2015/03/03/log4j/</a></p>

<h2>简介</h2>

<p>Log4j由三个重要的组件构成：<strong>日志信息的优先级，日志信息的输出目的地，日志信息的输出格式</strong>。日志信息的优先级从高到低有<code>ERROR</code>、<code>WARN</code>、<code>INFO</code>、<code>DEBUG</code>，分别用来指定这条日志信息的重要程度；日志信息的输出目的地指定了日志将打印到控制台还是文件中；而输出格式则控制了日志信息的显示内容。</p>

<h2>配置文件</h2>

<p>其实也可以完全不使用配置文件，而是在代码中配置Log4j环境。但是，使用配置文件将使您的应用程序更加灵活。</p>

<p>Log4j支持两种配置文件格式，一种是<code>XML格式</code>的文件，一种是<code>properties格式</code>的文件。以下介绍使用properties格式做为配置文件的方法：</p>

<p>基本的格式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="c">#配置根Logger</span>
</span><span class='line'><span class="na">log4j.rootLogger</span>  <span class="o">=</span>   <span class="s">[ level ]   ,  appenderName1 ,  appenderName2 ,  …</span>
</span><span class='line'>
</span><span class='line'><span class="c">#配置日志信息输出目的地Appender</span>
</span><span class='line'><span class="na">log4j.appender.appenderName</span>  <span class="o">=</span>  <span class="s">fully.qualified.name.of.appender.class </span>
</span><span class='line'><span class="na">　　log4j.appender.appenderName.option1</span>  <span class="o">=</span>  <span class="s">value1 </span>
</span><span class='line'><span class="err">　　…</span>
</span><span class='line'><span class="na">　　log4j.appender.appenderName.optionN</span>  <span class="o">=</span>  <span class="s">valueN </span>
</span><span class='line'>
</span><span class='line'><span class="c">#配置日志信息的格式（布局）</span>
</span><span class='line'><span class="na">log4j.appender.appenderName.layout</span>  <span class="o">=</span>  <span class="s">fully.qualified.name.of.layout.class </span>
</span><span class='line'><span class="na">　　log4j.appender.appenderName.layout.option1</span>  <span class="o">=</span>  <span class="s">value1 </span>
</span><span class='line'><span class="err">　　…</span>
</span><span class='line'><span class="na">　　log4j.appender.appenderName.layout.optionN</span>  <span class="o">=</span>  <span class="s">valueN </span>
</span></code></pre></td></tr></table></div></figure>


<h3>1.配置根Logger</h3>

<p>语法为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">log4j.rootLogger</span> <span class="o">=</span> <span class="s">[ level ] , appenderName, appenderName, … </span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，level 是日志记录的优先级，分为<code>OFF</code>、<code>FATAL</code>、<code>ERROR</code>、<code>WARN</code>、<code>INFO</code>、<code>DEBUG</code>、<code>ALL</code>或者你定义的级别。Log4j建议只使用四个级别，优先级从高到低分别是<code>ERROR</code>、<code>WARN</code>、<code>INFO</code>、<code>DEBUG</code>。通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来。</p>

<p>appenderName就是指定日志信息输出到哪个地方。您可以同时指定多个输出目的地。</p>

<h3>2.配置日志信息输出目的地Appender</h3>

<p>Log4j提供的appender有以下几种：</p>

<ul>
<li><code>org.apache.log4j.ConsoleAppender</code>（控制台），</li>
<li><code>org.apache.log4j.FileAppender</code>（文件），</li>
<li><code>org.apache.log4j.DailyRollingFileAppender</code>（每天产生一个日志文件），</li>
<li><code>org.apache.log4j.RollingFileAppender</code>（文件大小到达指定尺寸的时候产生一个新的文件），</li>
<li><code>org.apache.log4j.WriterAppender</code>（将日志信息以流格式发送到任意指定的地方）</li>
</ul>


<p>其中，每种appender可以定义的option1如下：</p>

<h4>(1).ConsoleAppender 选项</h4>

<ul>
<li><code>Threshold=WARN</code>:指定日志消息的输出最低层次。</li>
<li><code>ImmediateFlush=true</code>:默认值是true,意谓着所有的消息都会被立即输出。</li>
<li><code>Target=System.err</code>:默认情况下是：System.out,指定输出控制台</li>
</ul>


<h4>(2).FileAppender 选项</h4>

<ul>
<li><code>Threshold=WARN</code>:指定日志消息的输出最低层次。</li>
<li><code>ImmediateFlush=true</code>:默认值是true,意谓着所有的消息都会被立即输出。</li>
<li><code>File=mylog.txt</code>:指定消息输出到mylog.txt文件。</li>
<li><code>Append=false</code>:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。</li>
</ul>


<h4>(3).DailyRollingFileAppender 选项</h4>

<ul>
<li><code>Threshold=WARN</code>:指定日志消息的输出最低层次。</li>
<li><code>ImmediateFlush=true</code>:默认值是true,意谓着所有的消息都会被立即输出。</li>
<li><code>File=mylog.txt</code>:指定消息输出到mylog.txt文件。</li>
<li><code>Append=false</code>:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。</li>
<li><code>DatePattern='.'yyyy-ww</code>:每周滚动一次文件，即每周产生一个新的文件。当然也可以指定按月、周、天、时和分。即对应的格式如下：

<ul>
<li><code>'.'yyyy-MM</code>: 每月</li>
<li><code>'.'yyyy-ww</code>: 每周</li>
<li><code>'.'yyyy-MM-dd</code>: 每天</li>
<li><code>'.'yyyy-MM-dd-a</code>: 每天两次</li>
<li><code>'.'yyyy-MM-dd-HH</code>: 每小时</li>
<li><code>'.'yyyy-MM-dd-HH-mm</code>: 每分钟</li>
</ul>
</li>
</ul>


<h4>(4).RollingFileAppender 选项</h4>

<ul>
<li><code>Threshold=WARN</code>:指定日志消息的输出最低层次。</li>
<li><code>ImmediateFlush=true</code>:默认值是true,意谓着所有的消息都会被立即输出。</li>
<li><code>File=mylog.txt</code>:指定消息输出到mylog.txt文件。</li>
<li><code>Append=false</code>:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。</li>
<li><code>MaxFileSize=100KB</code>: 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。</li>
<li><code>MaxBackupIndex=2</code>:指定可以产生的滚动文件的最大数。</li>
</ul>


<h3>3.配置日志信息的输出格式</h3>

<p>Log4j提供的layout有以下几种：</p>

<ul>
<li><code>org.apache.log4j.HTMLLayout</code>（以HTML表格形式布局），</li>
<li><code>org.apache.log4j.PatternLayout</code>（可以灵活地指定布局模式），</li>
<li><code>org.apache.log4j.SimpleLayout</code>（包含日志信息的级别和信息字符串），</li>
<li><code>org.apache.log4j.TTCCLayout</code>（包含日志产生的时间、线程、类别等等信息）</li>
</ul>


<h3>4.输出格式设置</h3>

<p>在配置文件中可以通过<code>log4j.appender.A1.layout.ConversionPattern</code>设置日志输出格式。</p>

<p>参数：</p>

<ul>
<li><code>%p</code>: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,</li>
<li><code>%d</code>: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921</li>
<li><code>%r</code>: 输出自应用启动到输出该log信息耗费的毫秒数</li>
<li><code>%c</code>: 输出日志信息所属的类目，通常就是所在类的全名</li>
<li><code>%t</code>: 输出产生该日志事件的线程名</li>
<li><code>%l</code>: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)</li>
<li><code>%x</code>: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。</li>
<li><code>%%</code>: 输出一个”%”字符</li>
<li><code>%F</code>: 输出日志消息产生时所在的文件名称</li>
<li><code>%L</code>: 输出代码中的行号</li>
<li><code>%m</code>: 输出代码中指定的消息,产生的日志具体信息</li>
<li><code>%n</code>: 输出一个回车换行符，Windows平台为”\r\n”，Unix平台为”\n”输出日志信息换行</li>
</ul>


<p>可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：</p>

<ul>
<li><code>%20c</code>：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。</li>
<li><code>%-20c</code>:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，”-”号指定左对齐。</li>
<li><code>%.30c</code>:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。</li>
<li><code>%20.30c</code>:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉。</li>
</ul>


<h2>在程序中的使用</h2>

<p>在程序中使用Log4j之前，首先要将<code>commons-logging.jar</code>和<code>logging-log4j-1.2.9.jar</code>导入到classpath中，并将log4j.properties放于src根目录中。接下来就可以使用了。</p>

<h3>1.得到记录器</h3>

<p>使用Log4j，第一步就是获取日志记录器，这个记录器将负责控制日志信息。其语法为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="nf">getLogger</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过指定的名字获得记录器，如果必要的话，则为这个名字创建一个新的记录器。Name一般取本类的名字，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">Logger</span><span class="o">.</span><span class="na">getLogger</span> <span class="o">(</span> <span class="n">ClassName</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span> <span class="o">()</span> <span class="o">)</span> <span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注：推荐使用commons-logging结合log4j进行日志记录。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Log</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LogFactory</span><span class="o">.</span><span class="na">getLog</span><span class="o">(</span><span class="n">Yourclass</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.插入记录信息（格式化日志信息）</h3>

<p>当上两个必要步骤执行完毕，您就可以轻松地使用不同优先级别的日志记录语句插入到您想记录日志的任何地方，其语法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Logger</span><span class="o">.</span><span class="na">debug</span> <span class="o">(</span> <span class="n">Object</span> <span class="n">message</span> <span class="o">)</span> <span class="o">;</span>
</span><span class='line'><span class="n">Logger</span><span class="o">.</span><span class="na">info</span> <span class="o">(</span> <span class="n">Object</span> <span class="n">message</span> <span class="o">)</span> <span class="o">;</span>
</span><span class='line'><span class="n">Logger</span><span class="o">.</span><span class="na">warn</span> <span class="o">(</span> <span class="n">Object</span> <span class="n">message</span> <span class="o">)</span> <span class="o">;</span>
</span><span class='line'><span class="n">Logger</span><span class="o">.</span><span class="na">error</span> <span class="o">(</span> <span class="n">Object</span> <span class="n">message</span> <span class="o">)</span> <span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Log4j配置范例</h2>

<p>LOG4J的配置之简单使它遍及于越来越多的应用中了：Log4J配置文件实现了输出到控制台、文件、回滚文件、发送日志邮件、输出到数据库日志表、自定义标签等全套功能。择其一二使用就够用了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">log4j.rootLogger</span><span class="o">=</span><span class="s">DEBUG,CONSOLE,file,ROLLING_FILE,SOCKET,MAIL,DATABASE,im</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 应用于控制台</span>
</span><span class='line'><span class="na">log4j.appender.CONSOLE</span><span class="o">=</span><span class="s">org.apache.log4j.ConsoleAppender</span>
</span><span class='line'><span class="na">log4j.appender.Threshold</span><span class="o">=</span><span class="s">DEBUG</span>
</span><span class='line'><span class="na">log4j.appender.CONSOLE.Target</span><span class="o">=</span><span class="s">System.out</span>
</span><span class='line'><span class="na">log4j.appender.CONSOLE.layout</span><span class="o">=</span><span class="s">org.apache.log4j.PatternLayout</span>
</span><span class='line'><span class="na">log4j.appender.CONSOLE.layout.ConversionPattern</span><span class="o">=</span><span class="s">[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n</span>
</span><span class='line'><span class="c">#log4j.appender.CONSOLE.layout.ConversionPattern=[start]%d{DATE}[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[thread] n%c[CATEGORY]%n%m[MESSAGE]%n%n</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">#应用于文件</span>
</span><span class='line'><span class="na">log4j.appender.file</span><span class="o">=</span><span class="s">org.apache.log4j.DailyRollingFileAppender</span>
</span><span class='line'><span class="na">log4j.appender.file.DatePattern</span><span class="o">=</span><span class="s">&#39;.&#39;yyyy-MM-dd</span>
</span><span class='line'><span class="na">log4j.appender.file.File</span><span class="o">=</span><span class="s">/logs/ecps.log</span>
</span><span class='line'><span class="na">log4j.appender.file.layout</span><span class="o">=</span><span class="s">org.apache.log4j.PatternLayout </span>
</span><span class='line'><span class="na">log4j.appender.file.layout.ConversionPattern</span><span class="o">=</span><span class="s">%-d{yyyy-MM-dd HH:mm:ss} %p [%c]: %m%n</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 应用于文件回滚</span>
</span><span class='line'><span class="na">log4j.appender.ROLLING_FILE</span><span class="o">=</span><span class="s">org.apache.log4j.RollingFileAppender</span>
</span><span class='line'><span class="na">log4j.appender.ROLLING_FILE.Threshold</span><span class="o">=</span><span class="s">ERROR</span>
</span><span class='line'><span class="na">log4j.appender.ROLLING_FILE.File</span><span class="o">=</span><span class="s">rolling.log //文件位置,也可以用变量${java.home}、rolling.log</span>
</span><span class='line'><span class="na">log4j.appender.ROLLING_FILE.Append</span><span class="o">=</span><span class="s">true //true:添加 false:覆盖</span>
</span><span class='line'><span class="na">log4j.appender.ROLLING_FILE.MaxFileSize</span><span class="o">=</span><span class="s">10KB //文件最大尺寸</span>
</span><span class='line'><span class="na">log4j.appender.ROLLING_FILE.MaxBackupIndex</span><span class="o">=</span><span class="s">1 //备份数</span>
</span><span class='line'><span class="na">log4j.appender.ROLLING_FILE.layout</span><span class="o">=</span><span class="s">org.apache.log4j.PatternLayout</span>
</span><span class='line'><span class="na">log4j.appender.ROLLING_FILE.layout.ConversionPattern</span><span class="o">=</span><span class="s">[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n</span>
</span><span class='line'>
</span><span class='line'><span class="c">#应用于socket</span>
</span><span class='line'><span class="na">log4j.appender.SOCKET</span><span class="o">=</span><span class="s">org.apache.log4j.RollingFileAppender</span>
</span><span class='line'><span class="na">log4j.appender.SOCKET.RemoteHost</span><span class="o">=</span><span class="s">localhost</span>
</span><span class='line'><span class="na">log4j.appender.SOCKET.Port</span><span class="o">=</span><span class="s">5001</span>
</span><span class='line'><span class="na">log4j.appender.SOCKET.LocationInfo</span><span class="o">=</span><span class="s">true</span>
</span><span class='line'><span class="c"># Set up for Log Facter 5</span>
</span><span class='line'><span class="na">log4j.appender.SOCKET.layout</span><span class="o">=</span><span class="s">org.apache.log4j.PatternLayout</span>
</span><span class='line'><span class="na">log4j.appender.SOCET.layout.ConversionPattern</span><span class="o">=</span><span class="s">[start]%d{DATE}[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[thread]%n%c[CATEGORY]%n%m[MESSAGE]%n%n</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Log Factor 5 Appender</span>
</span><span class='line'><span class="na">log4j.appender.LF5_APPENDER</span><span class="o">=</span><span class="s">org.apache.log4j.lf5.LF5Appender</span>
</span><span class='line'><span class="na">log4j.appender.LF5_APPENDER.MaxNumberOfRecords</span><span class="o">=</span><span class="s">2000</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># 发送日志给邮件</span>
</span><span class='line'>
</span><span class='line'><span class="na">log4j.appender.MAIL</span><span class="o">=</span><span class="s">org.apache.log4j.net.SMTPAppender</span>
</span><span class='line'><span class="na">log4j.appender.MAIL.Threshold</span><span class="o">=</span><span class="s">ERROR</span>
</span><span class='line'><span class="na">log4j.appender.MAIL.BufferSize</span><span class="o">=</span><span class="s">10</span>
</span><span class='line'><span class="na">log4j.appender.MAIL.From</span><span class="o">=</span><span class="s">123@qq.com</span>
</span><span class='line'><span class="na">log4j.appender.MAIL.SMTPHost</span><span class="o">=</span><span class="s">smtp.qq.com</span>
</span><span class='line'><span class="na">log4j.appender.MAIL.SMTPUsername</span><span class="o">=</span><span class="s">123</span>
</span><span class='line'><span class="na">log4j.appender.MAIL.SMTPPassword</span><span class="o">=</span><span class="s">***</span>
</span><span class='line'><span class="na">log4j.appender.MAIL.SMTPDebug</span><span class="o">=</span><span class="s">false</span>
</span><span class='line'><span class="na">log4j.appender.MAIL.Subject</span><span class="o">=</span><span class="s">Log4JErrorMessage</span>
</span><span class='line'><span class="na">log4j.appender.MAIL.To</span><span class="o">=</span><span class="s">123@qq.com</span>
</span><span class='line'><span class="na">log4j.appender.MAIL.layout</span><span class="o">=</span><span class="s">org.apache.log4j.PatternLayout</span>
</span><span class='line'><span class="na">log4j.appender.MAIL.layout.ConversionPattern</span><span class="o">=</span><span class="s">%-d{yyyy-MM-dd HH:mm:ss} [%t] %-5p %c %x -- %m%n</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># 用于数据库</span>
</span><span class='line'><span class="na">log4j.appender.DATABASE</span><span class="o">=</span><span class="s">org.apache.log4j.jdbc.JDBCAppender</span>
</span><span class='line'><span class="na">log4j.appender.DATABASE.URL</span><span class="o">=</span><span class="s">jdbc:mysql://localhost:3306/test</span>
</span><span class='line'><span class="na">log4j.appender.DATABASE.driver</span><span class="o">=</span><span class="s">com.mysql.jdbc.Driver</span>
</span><span class='line'><span class="na">log4j.appender.DATABASE.user</span><span class="o">=</span><span class="s">root</span>
</span><span class='line'><span class="na">log4j.appender.DATABASE.password</span><span class="o">=</span>
</span><span class='line'><span class="na">log4j.appender.DATABASE.sql</span><span class="o">=</span><span class="s">INSERT INTO LOG4J (Message) VALUES (’[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n’)</span>
</span><span class='line'><span class="na">log4j.appender.DATABASE.layout</span><span class="o">=</span><span class="s">org.apache.log4j.PatternLayout</span>
</span><span class='line'><span class="na">log4j.appender.DATABASE.layout.ConversionPattern</span><span class="o">=</span><span class="s">[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n</span>
</span><span class='line'>
</span><span class='line'><span class="c">#自定义Appender</span>
</span><span class='line'><span class="na">log4j.appender.im</span> <span class="o">=</span> <span class="s">net.cybercorlin.util.logger.appender.IMAppender</span>
</span><span class='line'><span class="na">log4j.appender.im.host</span> <span class="o">=</span> <span class="s">mail.cybercorlin.net</span>
</span><span class='line'><span class="na">log4j.appender.im.username</span> <span class="o">=</span> <span class="s">username</span>
</span><span class='line'><span class="na">log4j.appender.im.password</span> <span class="o">=</span> <span class="s">password</span>
</span><span class='line'><span class="na">log4j.appender.im.recipient</span> <span class="o">=</span> <span class="s">corlin@cybercorlin.net</span>
</span><span class='line'><span class="na">log4j.appender.im.layout</span><span class="o">=</span><span class="s">org.apache.log4j.PatternLayout</span>
</span><span class='line'><span class="na">log4j.appender.im.layout.ConversionPattern</span> <span class="o">=</span><span class="s">[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用Log4J监控系统日志邮件警报</h2>

<p>在系统上线后，有时候遇到系统故障，这时候就可以登录服务器查看系统日志来排查问题。但是需要登录服务器，下载查找相关异常日志比较麻烦。而且没有监控的话，也无法实时了解到系统是否正常运行。那么有没有一种好办法将系统异常信息实时反馈给相关人员呢？</p>

<p>下面讲的就是借助Log4J来记录程序运行日志，当一旦发现系统异常或者自己定义的其他一些情况发生时，及时通过邮件形式发送给相关负责人，并附上相关的系统日志信息，这样负责人就可以实时便捷的监控到系统的状态和相关异常信息。</p>

<h3>优点</h3>

<p>采用这种方式的优点有：</p>

<ul>
<li>实时性。不用定期或不定期的登陆系统查看是否正常运行。</li>
<li>及时性。一旦系统异常，就会通知。</li>
<li>便捷性。邮件里附上异常日志，不用登陆系统下载日志查看。</li>
</ul>


<h3>环境</h3>

<p>导入依赖jar包：</p>

<p>1.log4j-1.2.17.jar</p>

<p><a href="http://logging.apache.org/log4j/1.2/">官网下载地址</a></p>

<p>目前log4j最新版是1.2.17。低版本的log4j无法实现邮件发送功能，因为版本低于log4j-1.2.14.jar的不支持SMTP认证。</p>

<p>发送邮件的一个重要的类是SMTPAppender，在1.2.8的版本中，SMTPAppender没有SMTPUsername和SMTPPassword属性。这两个属性分别是登录SMTP服务器发送认证的用户名和密码。</p>

<p>2.mail-1.4.jar</p>

<p>发送邮件当然需要用到JavaMail包啦。</p>

<p>3.activation-1.1.jar</p>

<h3>配置</h3>

<p>配置log4j.properties文件，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'> <span class="na">1 log4j.rootLogger</span><span class="o">=</span><span class="s">DEBUG, MAIL</span>
</span><span class='line'> <span class="err">2</span>
</span><span class='line'> <span class="na">3 log4j.appender.MAIL</span><span class="o">=</span><span class="s">org.apache.log4j.net.SMTPAppender</span>
</span><span class='line'> <span class="na">4 log4j.appender.MAIL.Threshold</span><span class="o">=</span><span class="s">ERROR</span>
</span><span class='line'> <span class="na">5 log4j.appender.MAIL.BufferSize</span><span class="o">=</span><span class="s">10</span>
</span><span class='line'> <span class="na">6 log4j.appender.MAIL.From</span><span class="o">=</span><span class="s">123@qq.com</span>
</span><span class='line'> <span class="na">7 log4j.appender.MAIL.SMTPHost</span><span class="o">=</span><span class="s">smtp.qq.com</span>
</span><span class='line'> <span class="na">8 log4j.appender.MAIL.SMTPUsername</span><span class="o">=</span><span class="s">123</span>
</span><span class='line'> <span class="na">9 log4j.appender.MAIL.SMTPPassword</span><span class="o">=</span><span class="s">***</span>
</span><span class='line'><span class="na">10 log4j.appender.MAIL.SMTPDebug</span><span class="o">=</span><span class="s">false</span>
</span><span class='line'><span class="na">11 log4j.appender.MAIL.Subject</span><span class="o">=</span><span class="s">Log4JErrorMessage</span>
</span><span class='line'><span class="na">12 log4j.appender.MAIL.To</span><span class="o">=</span><span class="s">123@qq.com</span>
</span><span class='line'><span class="na">13 log4j.appender.MAIL.layout</span><span class="o">=</span><span class="s">org.apache.log4j.PatternLayout</span>
</span><span class='line'><span class="na">14 log4j.appender.MAIL.layout.ConversionPattern</span><span class="o">=</span><span class="s">%-d{yyyy-MM-dd HH:mm:ss} [%t] %-5p %c %x -- %m%n</span>
</span></code></pre></td></tr></table></div></figure>


<p>每行配置详解：</p>

<ul>
<li>3.log4j的邮件发送appender，如果有必要你可以写自己的appender。</li>
<li>4.发送邮件的门槛，仅当等于或高于ERROR级别时，邮件才被发送。</li>
<li>5.缓存文件大小，日志达到10k时发送Email。</li>
<li>6.发送邮件的邮箱帐号。</li>
<li>7.SMTP邮件发送服务器地址。</li>
<li>8.SMTP发送认证的帐号名。</li>
<li>9.SMTP发送认证帐号的密码。</li>
<li>10.是否打印调试信息，如果选true，则会输出和SMTP之间的握手等详细信息</li>
<li>11.邮件主题。</li>
<li>12.发送到什么邮箱，如果要发送给多个邮箱，则用逗号分隔。</li>
</ul>


<p>如果需要抄送给某人，则添加如下配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">log4j.appender.MAIL.Bcc</span><span class="o">=</span><span class="s">xxx@xxx.xxx</span>
</span></code></pre></td></tr></table></div></figure>


<p>想让邮件内容日志以HTML格式来输出，则配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">log4j.appender.MAIL.layout</span><span class="o">=</span><span class="s">org.apache.log4j.HTMLLayout</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出到邮件中显示如下图：</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/log4j/log4j_mail_output.png"></p>

<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/03/03/log4j/">http://tianweili.github.io/blog/2015/03/03/log4j/</a></p>

<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单例模式的八种写法比较]]></title>
    <link href="http://tianweili.github.io/blog/2015/03/02/singleton-pattern/"/>
    <updated>2015-03-02T19:08:39+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/03/02/singleton-pattern</id>
    <content type="html"><![CDATA[<p>单例模式是最常用到的设计模式之一，熟悉设计模式的朋友对单例模式都不会陌生。一般介绍单例模式的书籍都会提到<code>饿汉式</code>和<code>懒汉式</code>这两种实现方式。但是除了这两种方式，本文还会介绍其他几种实现单例的方式，让我们来一起看看吧。</p>

<!--more-->


<p>原文链接：</p>

<p><a href="http://tianweili.github.io/blog/2015/03/02/singleton-pattern/">http://tianweili.github.io/blog/2015/03/02/singleton-pattern/</a></p>

<h2>简介</h2>

<p>单例模式是一种常用的软件设计模式，其定义是单例对象的类只能允许一个实例存在。</p>

<p>许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息。这种方式简化了在复杂环境下的配置管理。</p>

<h2>基本的实现思路</h2>

<p>单例模式要求类能够有返回对象一个引用(永远是同一个)和一个获得该实例的方法（必须是静态方法，通常使用getInstance这个名称）。</p>

<p>单例的实现主要是通过以下两个步骤：</p>

<ol>
<li>将该类的构造方法定义为私有方法，这样其他处的代码就无法通过调用该类的构造方法来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例；</li>
<li>在该类内提供一个静态方法，当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用。</li>
</ol>


<h2>注意事项</h2>

<p>单例模式在多线程的应用场合下必须小心使用。如果当唯一实例尚未创建时，有两个线程同时调用创建方法，那么它们同时没有检测到唯一实例的存在，从而同时各自创建了一个实例，这样就有两个实例被构造出来，从而违反了单例模式中实例唯一的原则。 解决这个问题的办法是为指示类是否已经实例化的变量提供一个互斥锁(虽然这样会降低效率)。</p>

<h2>单例模式的八种写法</h2>

<h3>1、饿汉式（静态常量）[可用]</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">(){}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>优点：这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。</p>

<p>缺点：在类装载的时候就完成实例化，没有达到Lazy Loading的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费。</p>

<h3>2、饿汉式（静态代码块）[可用]</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式和上面的方式其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。优缺点和上面是一样的。</p>

<h3>3、懒汉式(线程不安全)[不可用]</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">singleton</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">singleton</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">singleton</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">singleton</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种写法起到了Lazy Loading的效果，但是只能在单线程下使用。如果在多线程下，一个线程进入了if (singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式。</p>

<h3>4、懒汉式(线程安全，同步方法)[不推荐用]</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">singleton</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">singleton</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">singleton</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">singleton</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>解决上面第三种实现方式的线程不安全问题，做个线程同步就可以了，于是就对getInstance()方法进行了线程同步。</p>

<p>缺点：效率太低了，每个线程在想获得类的实例时候，执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return就行了。方法进行同步效率太低要改进。</p>

<h3>5、懒汉式(线程安全，同步代码块)[不可用]</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">singleton</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">singleton</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Singleton</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">singleton</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">singleton</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于第四种实现方式同步效率太低，所以摒弃同步方法，改为同步产生实例化的的代码块。但是这种同步并不能起到线程同步的作用。跟第3种实现方式遇到的情形一致，假如一个线程进入了if (singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。</p>

<h3>6、双重检查[推荐用]</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="n">Singleton</span> <span class="n">singleton</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">singleton</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Singleton</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">singleton</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">singleton</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">singleton</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Double-Check概念对于多线程开发者来说不会陌生，如代码中所示，我们进行了两次if (singleton == null)检查，这样就可以保证线程安全了。这样，实例化代码只用执行一次，后面再次访问时，判断if (singleton == null)，直接return实例化对象。</p>

<p>优点：线程安全；延迟加载；效率较高。</p>

<h3>7、静态内部类[推荐用]</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SingletonInstance</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Singleton</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">SingletonInstance</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式跟饿汉式方式采用的机制类似，但又有不同。两者都是采用了类装载的机制来保证初始化实例时只有一个线程。不同的地方在饿汉式方式是只要Singleton类被装载就会实例化，没有Lazy-Loading的作用，而静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。</p>

<p>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p>

<p>优点：避免了线程不安全，延迟加载，效率高。</p>

<h3>8、枚举[推荐用]</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Singleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">whateverMethod</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。可能是因为枚举在JDK1.5中才添加，所以在实际项目开发中，很少见人这么写过。</p>

<h2>优点</h2>

<p>系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。</p>

<h2>缺点</h2>

<p>当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new，可能会给其他开发人员造成困扰，特别是看不到源码的时候。</p>

<h2>适用场合</h2>

<ul>
<li>需要频繁的进行创建和销毁的对象；</li>
<li>创建对象时耗时过多或耗费资源过多，但又经常用到的对象；</li>
<li>工具类对象；</li>
<li>频繁访问数据库或文件的对象。</li>
</ul>


<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/03/02/singleton-pattern/">http://tianweili.github.io/blog/2015/03/02/singleton-pattern/</a></p>

<p>转载请注明作者及出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux中的sort命令]]></title>
    <link href="http://tianweili.github.io/blog/2015/02/25/linux-sort/"/>
    <updated>2015-02-25T23:44:09+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/02/25/linux-sort</id>
    <content type="html"><![CDATA[<p>sort命令是根据不同的数据类型以行为单位对数据进行排序。</p>

<!--more-->


<p>原文链接：</p>

<p><a href="http://tianweili.github.io/blog/2015/02/25/linux-sort/">http://tianweili.github.io/blog/2015/02/25/linux-sort/</a></p>

<h2>简介</h2>

<p>sort命令是根据不同的数据类型以行为单位对数据进行排序。</p>

<p>sort的默认比较规则是从首字符向后，按照ASCII码值进行比较，将结果按照升序输出。</p>

<h2>用法</h2>

<p>sort命令的基本格式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sort <span class="o">[</span>-bcfMnrtk<span class="o">]</span> <span class="o">[</span><span class="nb">source</span>-file<span class="o">]</span> <span class="o">[</span>-o output-file<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>sort命令可使用的参数有：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-b   忽略每行前面的所有空格字符，从第一个可见字符开始比较。
</span><span class='line'>-c   检查文件是否已经排好序，如果乱序则输出第一个乱序行的相关信息，最后返回1
</span><span class='line'>-C   检查文件是否已经排好序，如果乱序，则不输出内容，仅返回1
</span><span class='line'>-f   排序时忽略大小写字母。
</span><span class='line'>-M   将前面3个字母依照月份的缩写进行排序，比如JAN小于FEB。
</span><span class='line'>-n   依照数值的大小排序。
</span><span class='line'>-o   将排序后的结果存入指定的文件
</span><span class='line'>-r   降序输出
</span><span class='line'>-t   &lt;分隔字符&gt;   指定排序时所用的栏位分隔字符
</span><span class='line'>-u   在输出行中去除重复行
</span><span class='line'>-k   选择以哪个区间进行排序。
</span></code></pre></td></tr></table></div></figure>


<p>下面将会对这些参数进行介绍，其中简单的参数就不再赘述了。</p>

<h2>参数</h2>

<h3>-o选项</h3>

<p>sort是把排序后结果输出到标准输出，所以需要使用重定向将结果写入指定的文件，比如<code>sort file &gt; newfile</code>。</p>

<p>但是重定向的方式在遇到这种需求就无能为力了——把结果输出到原文件中。</p>

<p>如果还是使用重定向的方式，则会把原文件给清空。</p>

<p>而使用<code>-o</code>参数则可以完美解决这个问题：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sort -r test.dat -o test.dat
</span></code></pre></td></tr></table></div></figure>


<h3>-t与-k选项</h3>

<p>对于某些有固定格式的文件，比如：</p>

<pre><code>a   12
b   32
c   3
</code></pre>

<p>如果想以第二列数值大小降序输出，则需要使用-t和-k参数了。其中-k指定分隔符，-k指定待排序的列。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sort -nr -t<span class="se">\t</span> -k2 test.bat -o test.bat
</span></code></pre></td></tr></table></div></figure>


<p>作者：<a href="http://tianweili.github.com/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/25/linux-sort/">http://tianweili.github.io/blog/2015/02/25/linux-sort/</a></p>

<p>转载请注明作者及出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux中的awk命令]]></title>
    <link href="http://tianweili.github.io/blog/2015/02/24/linux-awk/"/>
    <updated>2015-02-24T10:33:41+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/02/24/linux-awk</id>
    <content type="html"><![CDATA[<p>本文主要介绍了Linux中的awk命令的一些知识以及如何使用awk编程。不同于grep的查找、sed的编辑等命令，awk命令在文本处理和生成报告等地方是经常用到的一个强大命令。</p>

<!--more-->


<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/24/linux-awk/">http://tianweili.github.io/blog/2015/02/24/linux-awk/</a></p>

<h2>简介</h2>

<p>awk命令主要用于文本分析。它的处理方式是读入文本，将每行记录以一定的分隔符（默认为空格）分割成不同的域，然后对不同的域进行各种处理与输出。</p>

<h2>命令格式</h2>

<p>awk命令的一个基本格式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk <span class="s1">&#39;{pattern + action}&#39;</span> <span class="o">{</span>filenames<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>无论awk命令简单还是复杂，基本的格式如上所示。其中引号为必须，引号内代表一个awk程序。大括号非必须，括起来用于根据特定的模式对一系列指令进行分组。pattern是在数据中查找内容，支持正则匹配。action对查找出来的记录执行相应的处理，比如打印和输出等。</p>

<h2>awk三种调用方式</h2>

<h3>命令行方式</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk <span class="o">[</span>-F <span class="s1">&#39;field-separator&#39;</span><span class="o">]</span> <span class="s1">&#39;commands&#39;</span> input-file<span class="o">(</span>s<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中的<code>-F</code>指令是可选的，后面跟着指定的域分隔符，比如tab键等（默认是空格）。后面的<code>commands</code>是真正的awk命令。<code>input-file(s)</code>代表输入的一个或多个文件</p>

<p>命令行调用方式是最经常使用的一种方式，也是本文所讲的重点。</p>

<h3>shell脚本方式</h3>

<p>把平时所写的shell脚本的首行<code>#!/bin/sh</code>换成<code>#!/bin/awk</code>。把所有的awk命令插入脚本中，通过调用脚本来执行awk命令。</p>

<h3>插入文件调用</h3>

<p>把所有的awk命令插入单独的文件中，然后通过以下命令调用awk：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk -f awk-script-file input-file<span class="o">(</span>s<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>-f</code>指定了要调用的包含awk命令的文件。</p>

<h2>awk应用示例</h2>

<h3>打印指定字段</h3>

<p>打印当前目录下所有的文件名和文件大小列表，以tab键分割：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ls -lh <span class="p">|</span> awk <span class="s1">&#39;{print $5&quot;\t&quot;$9}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>$0变量是指当前一行记录，$1是指第一个域数据，$2指第二个域数据……以此类推。</p>

<h3>print与printf</h3>

<p>awk提供了print与printf两种打印输出的函数。</p>

<p>print的参数可以是变量、数值和字符串。参数用逗号分割，字符串必须用双引号引用。</p>

<p>printf与C语言中的printf函数类似，可以用来格式化字符串。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk -F <span class="s1">&#39;:&#39;</span> <span class="s1">&#39;{printf(&quot;filename:%10s,linenumber:%s,columns:%s,linecontent:%s\n&quot;,FILENAME,NR,NF,$0)}&#39;</span> /etc/passwd
</span></code></pre></td></tr></table></div></figure>


<h3>根据指定分隔符切割域</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ll <span class="p">|</span> awk -F <span class="s1">&#39;\t&#39;</span> <span class="s1">&#39;print $9&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>BEGIN&hellip;END</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ls -lh <span class="p">|</span> awk <span class="s1">&#39;BEGIN {print &quot;size\tfilename&quot;}  {print $5&quot;\t&quot;$9} END {print &quot;---end---&quot;}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>BEGIN...END</code>语句的执行流程是，awk命令读入数据，然后从BEGIN语句开始，依次读取每一行记录，并打印相应的域，当所有记录都处理后再执行END语句后的程序。也就是说<code>BEGIN...END</code>语句块中的内容在读取数据过程中会反复执行，直到数据读取完成。</p>

<h3>pattern正则匹配</h3>

<p>下面的例子表示打印当前目录下，所有以.bat后缀结尾的文件名列表：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ls -l <span class="p">|</span> awk -F: <span class="s1">&#39;/\.dat$/{print $9}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>awk内置变量</h2>

<p>awk有许多内置变量用来设置环境变量信息，这些变量都可以被改变。常用的内置变量和作用如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ARGC               命令行参数个数
</span><span class='line'>ARGV               命令行参数排列
</span><span class='line'>ENVIRON            支持队列中系统环境变量的使用
</span><span class='line'>FILENAME           awk浏览的文件名
</span><span class='line'>FNR                浏览文件的记录数
</span><span class='line'>FS                 设置输入域分隔符，等价于命令行-F选项
</span><span class='line'>NF                 浏览记录的域的个数
</span><span class='line'>NR                 已读的记录数
</span><span class='line'>OFS                输出域分隔符
</span><span class='line'>ORS                输出记录分隔符
</span><span class='line'>RS                 指定用来切片的分隔符
</span></code></pre></td></tr></table></div></figure>


<p>awk中的内置变量都是很有用处的，可以直接使用。比如上面讲过的指定分隔符操作就可以用FS变量来代替：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ll <span class="p">|</span> awk <span class="s1">&#39;{FS=&quot;\t&quot;;} {print $9}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面会有很多实用awk内置变量的例子。</p>

<h2>awk编程</h2>

<h3>定义变量和运算</h3>

<p>awk可以自定义变量，并参与运算。</p>

<p>比如统计当前目录下列出的文件总大小，以M为单位显示出来：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ls -l <span class="p">|</span> awk <span class="s1">&#39;BEGIN {size=0;} {size+=$5;} END {print &quot;size is &quot;, size}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意此统计没有把文件夹下的所有文件算在内。</p>

<p>自定义的变量有时候可以不用作初始化操作，不过正规起见，还是建议作初始化操作为好。</p>

<h3>条件语句</h3>

<p>awk中的条件语句跟C语言类似，声明方式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span><span class="o">(</span>expression<span class="o">){</span>
</span><span class='line'>  statement1<span class="p">;</span>
</span><span class='line'>  statement2<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="o">(</span>expression<span class="o">){</span>
</span><span class='line'>  statement1<span class="p">;</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  statement2<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="o">(</span>expression1<span class="o">){</span>
</span><span class='line'>  statement1<span class="p">;</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span>expression2<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  statement2<span class="p">;</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  statement3<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看下面例子，将第三列为12，第六列为0的行打印输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk <span class="s1">&#39;BEGIN {FS=&quot;\t&quot;}{if($3==12 &amp;&amp; $6==0) print $0} END&#39;</span> incoming_daily_20150223.dat
</span></code></pre></td></tr></table></div></figure>


<h3>循环语句</h3>

<p>awk中的循环语句同样与C语言中的类似，支持while、do/while、for、break、continue关键字。</p>

<p>看下面的例子，输出每行的行号和第一列的数据：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk <span class="s1">&#39;BEGIN {FS=&quot;\t&quot;;} {data[NR] = $1} END {for(i=1; i&lt;=NR; i++) print i&quot;\t&quot;data[i]}&#39;</span> incoming_daily_20150223.dat
</span></code></pre></td></tr></table></div></figure>


<h3>数组</h3>

<p>看下面例子，统计第六列每一个值出现的次数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk <span class="s1">&#39;BEGIN {FS=&quot;\t&quot;}{count[$6]++} END {for(x in count) print x,count[x]}&#39;</span> incoming_daily_20150223.dat
</span></code></pre></td></tr></table></div></figure>


<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/24/linux-awk/">http://tianweili.github.io/blog/2015/02/24/linux-awk/</a></p>

<p>转载请注明作者及出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式六大原则 - 接口隔离原则]]></title>
    <link href="http://tianweili.github.io/blog/2015/02/10/interface-segregation-principle/"/>
    <updated>2015-02-10T23:01:20+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/02/10/interface-segregation-principle</id>
    <content type="html"><![CDATA[<p>类A通过接口I依赖类B，类C通过接口I依赖类D，如果接口I对于类B和类D来说不是最小接口，则类B和类D必须去实现他们不需要的方法。</p>

<!--more-->


<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/10/interface-segregation-principle/">http://tianweili.github.io/blog/2015/02/10/interface-segregation-principle/</a></p>

<h2>什么是接口隔离原则</h2>

<p>接口隔离原则比较简单，有两种定义：</p>

<ul>
<li>Clients should not be forced to depend upon interfaces that they don&rsquo;t use.（客户端不应该强行依赖它不需要的接口）</li>
<li>The dependency of one class to another one should depend on the smallest possible interface.（类间的依赖关系应该建立在最小的接口上）</li>
</ul>


<p>其实上述两种定义说的是同一种意思。客户端不应该依赖它不需要的接口，意思就是说客户端只要依赖它需要的接口，它需要什么接口，就提供什么接口，不提供多余的接口。“类间的依赖关系应该建立在最小的接口上”也表达这一层意思。通俗的讲就是：接口中的方法应该尽量少，不要使接口过于臃肿，不要有很多不相关的逻辑方法。</p>

<p>通过简单的代码还原开篇的问题，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">I</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method1</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method2</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method3</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">B</span> <span class="kd">implements</span> <span class="n">I</span><span class="o">{</span>
</span><span class='line'> 
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;类B实现了接口I的方法1&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'> 
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method2</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;类B实现了接口I的方法2&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'> 
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method3</span><span class="o">()</span> <span class="o">{</span><span class="c1">//类B并不需要接口I的方法3功能，但是由于实现接口I，所以不得不实现方法3</span>
</span><span class='line'>        <span class="c1">//在这里写一个空方法</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">D</span> <span class="kd">implements</span> <span class="n">I</span><span class="o">{</span>
</span><span class='line'> 
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method2</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;类D实现了接口I的方法2&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'> 
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method3</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;类D实现了接口I的方法3&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'> 
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method1</span><span class="o">()</span> <span class="o">{</span><span class="c1">//类D并不需要接口I的方法1功能，但是由于实现接口I，所以不得不实现方法1</span>
</span><span class='line'>        <span class="c1">//在这里写一个空方法</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//类A通过接口I依赖类B</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">depend1</span><span class="o">(</span><span class="n">I</span> <span class="n">i</span><span class="o">){</span>
</span><span class='line'>        <span class="n">i</span><span class="o">.</span><span class="na">method1</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//类C通过接口I依赖类D</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">C</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">depend1</span><span class="o">(</span><span class="n">I</span> <span class="n">i</span><span class="o">){</span>
</span><span class='line'>        <span class="n">i</span><span class="o">.</span><span class="na">method3</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">A</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">A</span><span class="o">();</span>
</span><span class='line'>        <span class="n">I</span> <span class="n">i1</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">B</span><span class="o">();</span>
</span><span class='line'>        <span class="n">a</span><span class="o">.</span><span class="na">depend1</span><span class="o">(</span><span class="n">i1</span><span class="o">);</span>
</span><span class='line'>         
</span><span class='line'>        <span class="n">C</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">C</span><span class="o">();</span>
</span><span class='line'>        <span class="n">I</span> <span class="n">i2</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">D</span><span class="o">();</span>
</span><span class='line'>        <span class="n">c</span><span class="o">.</span><span class="na">depend1</span><span class="o">(</span><span class="n">i2</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果：</p>

<pre><code>类B实现了接口I的方法1
类D实现了接口I的方法3
</code></pre>

<p>从以上代码可以看出，如果接口过于臃肿，不同业务逻辑的抽象方法都放在一个接口内，则会造成它的实现类必须实现自己并不需要的方法，这种设计方式显然是不妥当的。所以我们要修改上述设计方法，把接口I拆分成3个接口，使得实现类只需要实现自己需要的接口即可。只贴出修改后的接口和实现类的代码，修改代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">I1</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method1</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">I2</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method2</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">I3</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method3</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'> 
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">B</span> <span class="kd">implements</span> <span class="n">I1</span><span class="o">,</span><span class="n">I2</span><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;类B实现了接口I的方法1&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'> 
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method2</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;类B实现了接口I的方法2&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'> 
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">D</span> <span class="kd">implements</span> <span class="n">I2</span><span class="o">,</span><span class="n">I3</span><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method2</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;类D实现了接口I的方法2&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'> 
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method3</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;类D实现了接口I的方法3&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>与单一职责原则的区别</h2>

<p>到了这里，有些人可能觉得接口隔离原则与单一职责原则很相似，其实不然。</p>

<p>第一，单一职责原则注重的是职责；而接口隔离原则注重对接口依赖的隔离。</p>

<p>第二，单一职责原则主要是约束类，其次才是接口和方法，它针对的是程序中的实现和细节；而接口隔离原则主要约束接口，主要针对抽象，针对程序整体框架的构建。</p>

<h2>注意事项</h2>

<p>原则是前人经验的总结，在软件设计中具有一定的指导作用，但是不能完全照搬这些原则。对于接口隔离原则来说，接口尽量小，但是也要有限度。对接口进行细化可以提高程序设计灵活性是不争的事实，但是如果过小，则会造成接口数量过多，使设计复杂化，所以一定要适度。</p>

<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/10/interface-segregation-principle/">http://tianweili.github.io/blog/2015/02/10/interface-segregation-principle/</a></p>

<p>转载请注明作者及出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式六大原则 - 依赖倒置原则]]></title>
    <link href="http://tianweili.github.io/blog/2015/02/07/dependence-inversion-principle/"/>
    <updated>2015-02-07T22:45:14+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/02/07/dependence-inversion-principle</id>
    <content type="html"><![CDATA[<p>类A直接依赖于类B，假如要将类A修改为依赖类C，则必须通过修改类A的代码来达成。这种场景下，类A一般是高层模块，负责复杂的业务逻辑。类B和C是底层模块，负责基本的原子操作。假如修改类A，将会给程序带来不必要的风险。而遵循依赖倒置原则的程序设计可以解决这一问题。</p>

<!--more-->


<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/07/dependence-inversion-principle/">http://tianweili.github.io/blog/2015/02/07/dependence-inversion-principle/</a></p>

<h2>什么是依赖倒置原则</h2>

<p>英文缩写DIP（Dependence Inversion Principle）。</p>

<p>原始定义：High level modules should not depend upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.</p>

<p>翻译过来就三层含义：</p>

<ul>
<li>高层模块不应该依赖低层模块，两者都应该依赖其抽象；</li>
<li>抽象不应该依赖细节；</li>
<li>细节应该依赖抽象。</li>
</ul>


<p>抽象：即抽象类或接口，两者是不能够实例化的。</p>

<p>细节：即具体的实现类，实现接口或者继承抽象类所产生的类，两者可以通过关键字new直接被实例化。</p>

<p>现在我们来通过实例还原开篇问题的场景，以便更好的来理解。下面代码描述了一个简单的场景，Jim作为人有吃的方法，苹果有取得自己名字的方法，然后实现Jim去吃苹果。</p>

<p>代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//具体Jim人类</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Jim</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">(</span><span class="n">Apple</span> <span class="n">apple</span><span class="o">){</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Jim eat &quot;</span> <span class="o">+</span> <span class="n">apple</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//具体苹果类</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Apple</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;apple&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Jim</span> <span class="n">jim</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Jim</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Apple</span> <span class="n">apple</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Apple</span><span class="o">();</span>
</span><span class='line'>        <span class="n">jim</span><span class="o">.</span><span class="na">eat</span><span class="o">(</span><span class="n">apple</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果：Jim eat apple</p>

<p>上面代码看起来比较简单，但其实是一个非常脆弱的设计。现在Jim可以吃苹果了，但是不能只吃苹果而不吃别的水果啊，这样下去肯定会造成营养失衡。现在想让Jim吃香蕉了（好像香蕉里含钾元素比较多，吃点比较有益），突然发现Jim是吃不了香蕉的，那怎么办呢？看来只有修改代码了啊，由于上面代码中Jim类依赖于Apple类，所以导致不得不去改动Jim类里面的代码。那如果下次Jim又要吃别的水果了呢？继续修改代码？这种处理方式显然是不可取的，频繁修改会带来很大的系统风险，改着改着可能就发现Jim不会吃水果了。</p>

<p>上面的代码之所以会出现上述难堪的问题，就是因为Jim类依赖于Apple类，两者是紧耦合的关系，其导致的结果就是系统的可维护性大大降低。要增加香蕉类却要去修改Jim类代码，这是不可忍受的，你改你的代码为什么要动我的啊，显然Jim不乐意了。我们常说要设计一个健壮稳定的系统，而这里只是增加了一个香蕉类，就要去修改Jim类，健壮和稳定还从何谈起。</p>

<p>而根据依赖倒置原则，我们可以对上述代码做些修改，提取抽象的部分。首先我们提取出两个接口：People和Fruit，都提供各自必需的抽象方法，这样以后无论是增加Jim人类，还是增加Apple、Banana等各种水果，都只需要增加自己的实现类就可以了。由于遵循依赖倒置原则，只依赖于抽象，而不依赖于细节，所以增加类无需修改其他类。</p>

<p>代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//人接口</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">People</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">(</span><span class="n">Fruit</span> <span class="n">fruit</span><span class="o">);</span><span class="c1">//人都有吃的方法，不然都饿死了</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//水果接口</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Fruit</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">();</span><span class="c1">//水果都是有名字的</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//具体Jim人类</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Jim</span> <span class="kd">implements</span> <span class="n">People</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">(</span><span class="n">Fruit</span> <span class="n">fruit</span><span class="o">){</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Jim eat &quot;</span> <span class="o">+</span> <span class="n">fruit</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//具体苹果类</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Apple</span> <span class="kd">implements</span> <span class="n">Fruit</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;apple&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//具体香蕉类</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Banana</span> <span class="kd">implements</span> <span class="n">Fruit</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;banana&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">People</span> <span class="n">jim</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Jim</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Fruit</span> <span class="n">apple</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Apple</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Fruit</span> <span class="n">Banana</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Banana</span><span class="o">();</span><span class="c1">//这里符合了里氏替换原则</span>
</span><span class='line'>        <span class="n">jim</span><span class="o">.</span><span class="na">eat</span><span class="o">(</span><span class="n">apple</span><span class="o">);</span>
</span><span class='line'>        <span class="n">jim</span><span class="o">.</span><span class="na">eat</span><span class="o">(</span><span class="n">Banana</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果：</p>

<pre><code>Jim eat apple
Jim eat banana
</code></pre>

<ul>
<li>People类是复杂的业务逻辑，属于高层模块，而Fruit是原子模块，属于低层模块。People依赖于抽象的Fruit接口，这就做到了：高层模块不应该依赖低层模块，两者都应该依赖于抽象（抽象类或接口）。</li>
<li>People和Fruit接口与各自的实现类没有关系，增加实现类不会影响接口，这就做到了：抽象（抽象类或接口）不应该依赖于细节（具体实现类）。</li>
<li>Jim、Apple、Banana实现类都要去实现各自的接口所定义的抽象方法，所以是依赖于接口的。这就做到了：细节（具体实现类）应该依赖抽象。</li>
</ul>


<h2>什么是倒置</h2>

<p>到了这里，我们对依赖倒置原则的“依赖”就很好理解了，但是什么是“倒置”呢。是这样子的，刚开始按照正常人的一般思维方式，我想吃香蕉就是吃香蕉，想吃苹果就吃苹果，编程也是这样，都是按照面向实现的思维方式来设计。而现在要倒置思维，提取公共的抽象，面向接口（抽象类）编程。不再依赖于具体实现了，而是依赖于接口或抽象类，这就是依赖的思维方式“倒置”了。</p>

<h2>依赖的三种实现方式</h2>

<p>对象的依赖关系有三种方式来传递：</p>

<h3>接口方法中声明依赖对象。</h3>

<p>就是我们上面代码所展示的那样。</p>

<h3>构造方法传递依赖对象。</h3>

<p>在构造函数中的需要传递的参数是抽象类或接口的方式实现。代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//具体Jim人类</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Jim</span> <span class="kd">implements</span> <span class="n">People</span><span class="o">{</span>
</span><span class='line'>     
</span><span class='line'>    <span class="kd">private</span> <span class="n">Fruit</span> <span class="n">fruit</span><span class="o">;</span>
</span><span class='line'>     
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Jim</span><span class="o">(</span><span class="n">Fruit</span> <span class="n">fruit</span><span class="o">){</span><span class="c1">//构造方法传递依赖对象</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">fruit</span> <span class="o">=</span> <span class="n">fruit</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>     
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">(</span><span class="n">Fruit</span> <span class="n">fruit</span><span class="o">){</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Jim eat &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">fruit</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Setter方法传递依赖对象。</h3>

<p>在我们设置的setXXX方法中的参数为抽象类或接口，来实现传递依赖对象。代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//具体Jim人类</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Jim</span> <span class="kd">implements</span> <span class="n">People</span><span class="o">{</span>
</span><span class='line'>     
</span><span class='line'>    <span class="kd">private</span> <span class="n">Fruit</span> <span class="n">fruit</span><span class="o">;</span>
</span><span class='line'>     
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setFruit</span><span class="o">(</span><span class="n">Fruit</span> <span class="n">fruit</span><span class="o">){</span><span class="c1">//setter方式传递依赖对象</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">fruit</span> <span class="o">=</span> <span class="n">fruit</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>     
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Jim eat &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">fruit</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>优点</h2>

<p>从上面的代码修改过程中，我们可以看到由于类之间松耦合的设计，面向接口编程依赖抽象而不依赖细节，所以在修改某个类的代码时，不会牵涉到其他类的修改，显著降低系统风险，提高系统健壮性。</p>

<p>还有一个优点是，在我们实际项目开发中，都是多人团队协作，每人负责某一模块。比如一个人负责开发People模块，一人负责开发Fruit模块，如果未采用依赖倒置原则，没有提取抽象，那么开发People模块的人必须等Fruit模块开发完成后自己才能开发，否则编译都无法通过，这就是单线程的开发。为了能够两人并行开发，设计时遵循依赖倒置原则，提取抽象，就可以大大提高开发进度。</p>

<h2>总结</h2>

<p>说到底，依赖倒置原则的核心就是面向接口编程的思想，尽量对每个实现类都提取抽象和公共接口形成接口或抽象类，依赖于抽象而不要依赖于具体实现。依赖倒置原则的本质其实就是通过抽象（抽象类或接口）使各个类或模块的实现彼此独立，不相互影响，实现模块间的松耦合。但是这个原则也是6个设计原则中最难以实现的了，如果没有实现这个原则，那么也就意味着开闭原则（对扩展开放，对修改关闭）也无法实现。</p>

<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/07/dependence-inversion-principle/">http://tianweili.github.io/blog/2015/02/07/dependence-inversion-principle/</a></p>

<p>转载请注明作者及出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式六大原则 - 里氏替换原则]]></title>
    <link href="http://tianweili.github.io/blog/2015/02/04/liskov-substitution-principle/"/>
    <updated>2015-02-04T22:34:39+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/02/04/liskov-substitution-principle</id>
    <content type="html"><![CDATA[<p>我们都知道面向对象有三大特性：封装、继承、多态。所以我们在实际开发过程中，子类在继承父类后，根据多态的特性，可能是图一时方便，经常任意重写父类的方法，那么这种方式会大大增加代码出问题的几率。比如下面场景：类C实现了某项功能F1。现在需要对功能F1作修改扩展，将功能F1扩展为F，其中F由原有的功能F1和新功能F2组成。新功能F由类C的子类C1来完成，则子类C1在完成功能F的同时，有可能会导致类C的原功能F1发生故障。这时候里氏替换原则就闪亮登场了。</p>

<!--more-->


<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/04/liskov-substitution-principle/">http://tianweili.github.io/blog/2015/02/04/liskov-substitution-principle/</a></p>

<h2>什么是里氏替换原则</h2>

<p>前面说过的单一职责原则，从字面意思就很好理解，但是里氏替换原则就有点让人摸不着头脑。查过资料后发现原来这项原则最早是在1988年，由麻省理工学院一位姓里的女士（Liskov）提出来的。</p>

<p>英文缩写：LSP (Liskov Substitution Principle)。</p>

<p>严格的定义：如果对每一个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都换成o2时，程序P的行为没有变化，那么类型T2是类型T1的子类型。</p>

<p>通俗的定义：所有引用基类的地方必须能透明地使用其子类的对象。</p>

<p>更通俗的定义：子类可以扩展父类的功能，但不能改变父类原有的功能。</p>

<p>代码示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//抽象父类电脑</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Computer</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">use</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">IBM</span> <span class="kd">extends</span> <span class="n">Computer</span><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">use</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;use IBM Computer.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">HP</span> <span class="kd">extends</span> <span class="n">Computer</span><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">use</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;use HP Computer.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Computer</span> <span class="n">ibm</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">IBM</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Computer</span> <span class="n">hp</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HP</span><span class="o">();</span><span class="c1">//引用基类的地方能透明地使用其子类的对象。</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ibm</span><span class="o">.</span><span class="na">use</span><span class="o">();</span>
</span><span class='line'>        <span class="n">hp</span><span class="o">.</span><span class="na">use</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>四层含义</h2>

<p>里氏替换原则包含以下4层含义：</p>

<ul>
<li>子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象方法。</li>
<li>子类中可以增加自己特有的方法。</li>
<li>当子类覆盖或实现父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。</li>
<li>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。
　　
现在我们可以对以上四层含义逐个讲解。</li>
</ul>


<h3>子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象方法</h3>

<p>在我们做系统设计时，经常会设计接口或抽象类，然后由子类来实现抽象方法，这里使用的其实就是里氏替换原则。子类可以实现父类的抽象方法很好理解，事实上，子类也必须完全实现父类的抽象方法，哪怕写一个空方法，否则会编译报错。</p>

<p>里氏替换原则的关键点在于不能覆盖父类的非抽象方法。父类中凡是已经实现好的方法，实际上是在设定一系列的规范和契约，虽然它不强制要求所有的子类必须遵从这些规范，但是如果子类对这些非抽象方法任意修改，就会对整个继承体系造成破坏。而里氏替换原则就是表达了这一层含义。</p>

<p>在面向对象的设计思想中，继承这一特性为系统的设计带来了极大的便利性，但是由之而来的也潜在着一些风险。就像开篇所提到的那一场景一样，对于那种情况最好遵循里氏替换原则，类C1继承类C时，可以添加新方法完成新增功能，尽量不要重写父类C的方法。否则可能带来难以预料的风险，比如下面一个简单的例子还原开篇的场景：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">C</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">func</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">C1</span> <span class="kd">extends</span> <span class="n">C</span><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">func</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">a</span><span class="o">-</span><span class="n">b</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">C</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">C1</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;2+1=&quot;</span> <span class="o">+</span> <span class="n">c</span><span class="o">.</span><span class="na">func</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果：2+1=1</p>

<p>上面的运行结果明显是错误的。类C1继承C，后来需要增加新功能，类C1并没有新写一个方法，而是直接重写了父类C的func方法，违背里氏替换原则，引用父类的地方并不能透明的使用子类的对象，导致运行结果出错。</p>

<h3>子类中可以增加自己特有的方法</h3>

<p>在继承父类属性和方法的同时，每个子类也都可以有自己的个性，在父类的基础上扩展自己的功能。前面其实已经提到，当功能扩展时，子类尽量不要重写父类的方法，而是另写一个方法，所以对上面的代码加以更改，使其符合里氏替换原则，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">C</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">func</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">C1</span> <span class="kd">extends</span> <span class="n">C</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">func2</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">a</span><span class="o">-</span><span class="n">b</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">C1</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">C1</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;2-1=&quot;</span> <span class="o">+</span> <span class="n">c</span><span class="o">.</span><span class="na">func2</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果：2-1=1</p>

<h3>当子类覆盖或实现父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松</h3>

<p>代码示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Father</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">func</span><span class="o">(</span><span class="n">HashMap</span> <span class="n">m</span><span class="o">){</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;执行父类...&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Son</span> <span class="kd">extends</span> <span class="n">Father</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">func</span><span class="o">(</span><span class="n">Map</span> <span class="n">m</span><span class="o">){</span><span class="c1">//方法的形参比父类的更宽松</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;执行子类...&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Father</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Son</span><span class="o">();</span><span class="c1">//引用基类的地方能透明地使用其子类的对象。</span>
</span><span class='line'>        <span class="n">HashMap</span> <span class="n">h</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HashMap</span><span class="o">();</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="na">func</span><span class="o">(</span><span class="n">h</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果：执行父类&hellip;</p>

<p>注意Son类的func方法前面是不能加@Override注解的，因为否则会编译提示报错，因为这并不是重写（Override），而是重载（Overload），因为方法的输入参数不同。重写和重载的区别在Java面向对象详解一文中已作解释，此处不再赘述。</p>

<h3>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格</h3>

<p>代码示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Father</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">Map</span> <span class="nf">func</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Son</span> <span class="kd">extends</span> <span class="n">Father</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">HashMap</span> <span class="nf">func</span><span class="o">(){</span><span class="c1">//方法的返回值比父类的更严格</span>
</span><span class='line'>        <span class="n">HashMap</span> <span class="n">h</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HashMap</span><span class="o">();</span>
</span><span class='line'>        <span class="n">h</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;h&quot;</span><span class="o">,</span> <span class="s">&quot;执行子类...&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">h</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Father</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Son</span><span class="o">();</span><span class="c1">//引用基类的地方能透明地使用其子类的对象。</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">func</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行结果：{h=执行子类&hellip;}</p>

<h2>总结</h2>

<p>继承作为面向对象三大特性之一，在给程序设计带来巨大便利的同时，也带来了一些弊端，它增加了对象之间的耦合性。因此在系统设计时，遵循里氏替换原则，尽量避免子类重写父类的方法，可以有效降低代码出错的可能性。</p>

<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/04/liskov-substitution-principle/">http://tianweili.github.io/blog/2015/02/04/liskov-substitution-principle/</a></p>

<p>转载请注明作者及出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式六大原则 - 单一职责原则]]></title>
    <link href="http://tianweili.github.io/blog/2015/02/01/single-responsibility-principle/"/>
    <updated>2015-02-01T17:56:35+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/02/01/single-responsibility-principle</id>
    <content type="html"><![CDATA[<p>初学者在编程的时候可能一开始会有这样的经历，使用一个类来实现很多的功能，新添加的甚至不相关的功能都放在一个类里来实现，煮成了一锅大杂烩，往往使得某个类包罗万象，无所不能。可能刚开始实现功能比较简单，这样做不会引发什么特别大的问题。但是随着项目复杂度的提升，各种不相关的实现代码耦合在一起，一旦有功能的更改或增删，修改的代码很可能会导致其他功能的正常运行。这种编程方式显然是不可取的，也就是违背了所谓的单一职责原则。</p>

<!--more-->


<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/25/single-responsibility-principle/">http://tianweili.github.io/blog/2015/02/25/single-responsibility-principle/</a></p>

<h2>什么是单一职责原则？</h2>

<p>单一职责原则的英文名称是Single Responsibility Principle，简称是SRP。SRP原则的解释是：There should never be more than one reason for a class to change。定义很简单，即不能存在多于一个导致类变更的原因。简单的说就是一个类只负责一项职责。</p>

<p>在软件设计中，秉承着“高内聚，低耦合”的思想，让一个类仅负责一项职责，如果一个类有多于一项的职责，那么就代表这个类耦合性变高了，这些职责耦合在了一起，这是比较脆弱的设计。因为一旦某一项职责发生了改变，需要去更改代码，那么有可能会引起其他职责改变。所谓牵一发而动全身，这显然是我们所不愿意看到的，所以我们会把这个类分拆开来，由两个类来分别维护这两个职责，这样当一个职责发生改变，需要修改时，不会影响到另一个职责。</p>

<p>需要说明的是单一职责原则不只是面向对象编程思想所特有的，只要是模块化的程序设计，都适用单一职责原则。</p>

<h2>关于职责</h2>

<p>看到上面所述，或许有人会说这么简单谁不知道。的确，很多程序员即使没有学过设计模式，不知道单一职责原则，在编程的时候，在设计软件时也会有意识的遵循这一原则。因为谁都不希望修改一个地方会引发另外一个地方出现问题，而避免这种问题的最好处理方式就是设计时遵循单一职责原则。但是，我认为单一职责原则的难点是在于职责范围的认定。关于职责的认定是一个仁者见仁智者见智的话题，在实际开发中也会引起程序员之间的争论。有的人认为这些功能方法的实现目的很相似，必须要放在一个类中，有的人认为方法差别很大，必须要分拆成多个类，在多个类里面来实现。</p>

<p>还有职责的扩散问题。软件一开发完上线后并不是一成不变的，随着社会的进步，需求的变更，软件的功能可能要做些维护更改，有时候会遇到职责扩散。所谓的职责扩散就是因为某种原因，职责R被分化为粒度更细的R1和R2。</p>

<p>比如类C只负责一个职责R，这是符合单一职责原则的。但是后来需要把职责R拆分为职责R1和职责R2，那么这时候是否需要死守着单一职责原则，把类C也拆开为C1和C2。接着如果R1又需要细化为R11和R12呢……</p>

<p>我们必须要意识到，一味的遵守单一职责原则，不停的分拆类所付出的开销是很大的。这时候就涉及到平衡的问题，平衡单一职责原则与修改造成的开销。我的观点是如果一个方法逻辑不复杂的情况下，可以修改方法实现，否则要拆分为两个方法，遵循方法级别的单一职责原则；如果一个类方法不多的情况下，可以只增加方法，而不用分拆为多个类，否则要拆分为多个类，遵循类级别的单一职责原则。</p>

<h2>遵循单一职责原则的优点</h2>

<ul>
<li>降低了类的复杂度。一个类只负责一项职责比负责多项职责要简单得多。</li>
<li>提高了代码的可读性。一个类简单了，可读性自然就提高了。</li>
<li>提高了系统的可维护性。代码的可读性高了，并且修改一项职责对其他职责影响降低了，可维护性自然就提高了。</li>
<li>变更引起的风险变低了。单一职责最大的优点就是修改一个功能，对其他功能的影响显著降低。</li>
</ul>


<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/25/single-responsibility-principle/">http://tianweili.github.io/blog/2015/02/25/single-responsibility-principle/</a></p>

<p>转载请注明作者及出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用JXL组件操作Excel和导出文件]]></title>
    <link href="http://tianweili.github.io/blog/2015/01/29/use-jxl-produce-excel/"/>
    <updated>2015-01-29T16:29:57+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/01/29/use-jxl-produce-excel</id>
    <content type="html"><![CDATA[<p>这段时间参与的项目要求做几张Excel报表，由于项目框架使用了jxl组件，所以把jxl组件的详细用法归纳总结一下。本文主要讲述了以下内容：</p>

<ul>
<li>JXL及相关工具简介</li>
<li>如何安装JXL</li>
<li>JXL的基本操作

<ul>
<li>创建文件</li>
<li>单元格操作

<ul>
<li>合并单元格</li>
<li>行高和列宽</li>
</ul>
</li>
<li>数据格式化

<ul>
<li>字符串格式化</li>
<li>对齐方式</li>
</ul>
</li>
<li>读取文件</li>
<li>修改文件</li>
</ul>
</li>
<li>导出文件实例</li>
</ul>


<!--more-->


<p>原文链接：<a href="http://tianweili.github.io/blog/2015/01/29/use-jxl-produce-excel/">http://tianweili.github.io/blog/2015/01/29/use-jxl-produce-excel/</a></p>

<h2>简介</h2>

<p>jxl是一个韩国人写的java操作excel的工具, 在开源世界中，有两套比较有影响的API可供使用，一个是POI，一个是jExcelAPI。其中jExcelAPI功能相对POI比较弱一点。但jExcelAPI对中文支持非常好，API是纯Java的，并不依赖Windows系统，即使运行在Linux下，它同样能够正确的处理Excel文件。另外需要说明的是，这套API对图形和图表的支持很有限，而且仅仅识别PNG格式。</p>

<h2>搭建环境</h2>

<p>网上下载jxl.jar包，然后导入工程项目lib中，即可使用。</p>

<h2>基本操作</h2>

<h3>1、创建文件</h3>

<p>以下实例是生成一个名为“test.xls”的Excel文件，其中第一个工作表被命名为“第一页”。编译执行后，会产生一个Excel文件。</p>

<figure class='code'><figcaption><span>CreateExcel.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 生成Excel的类 </span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">jxl.Workbook</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">jxl.write.Label</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">jxl.write.WritableSheet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">jxl.write.WritableWorkbook</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CreateExcel</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// 打开文件</span>
</span><span class='line'>            <span class="n">WritableWorkbook</span> <span class="n">book</span> <span class="o">=</span> <span class="n">Workbook</span><span class="o">.</span><span class="na">createWorkbook</span><span class="o">(</span><span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">&quot;c:/test.xls&quot;</span><span class="o">));</span>
</span><span class='line'>            <span class="c1">// 生成名为“第一页”的工作表，参数0表示这是第一页</span>
</span><span class='line'>            <span class="n">WritableSheet</span> <span class="n">sheet</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="na">createSheet</span><span class="o">(</span><span class="s">&quot; 第一页 &quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">// 在Label对象的构造子中指名单元格位置是第一列第一行(0,0)</span>
</span><span class='line'>            <span class="c1">// 以及单元格内容为test</span>
</span><span class='line'>            <span class="n">Label</span> <span class="n">label</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Label</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="s">&quot; test &quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">// 将定义好的单元格添加到工作表中</span>
</span><span class='line'>            <span class="n">sheet</span><span class="o">.</span><span class="na">addCell</span><span class="o">(</span><span class="n">label</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 生成一个保存数字的单元格，必须使用Number的完整包路径，否则有语法歧义。</span>
</span><span class='line'>            <span class="c1">//单元格位置是第二列，第一行，值为123.456</span>
</span><span class='line'>            <span class="n">jxl</span><span class="o">.</span><span class="na">write</span><span class="o">.</span><span class="na">Number</span> <span class="n">number</span> <span class="o">=</span> <span class="k">new</span> <span class="n">jxl</span><span class="o">.</span><span class="na">write</span><span class="o">.</span><span class="na">Number</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mf">123.456</span><span class="o">);</span>
</span><span class='line'>            <span class="n">sheet</span><span class="o">.</span><span class="na">addCell</span><span class="o">(</span><span class="n">number</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 写入数据并关闭文件</span>
</span><span class='line'>            <span class="n">book</span><span class="o">.</span><span class="na">write</span><span class="o">();</span>
</span><span class='line'>            <span class="n">book</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2、单元格操作</h3>

<p>Excel中很重要的一部分是对单元格的操作，比如行高、列宽、单元格合并等，所幸jExcelAPI提供了这些支持。这些操作相对比较简单，下面只介绍一下相关的API。</p>

<h4>合并单元格</h4>

<p>合并既可以是横向的，也可以是纵向的。合并后的单元格不能再次进行合并，否则会触发异常。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 方法作用是从(m,n)到(p,q)的单元格全部合并</span>
</span><span class='line'><span class="n">WritableSheet</span><span class="o">.</span><span class="na">mergeCells</span><span class="o">(</span> <span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">p</span><span class="o">,</span> <span class="kt">int</span> <span class="n">q</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 合并第1列第1行到第3列第4行的所有单元格</span>
</span><span class='line'><span class="n">sheet</span><span class="o">.</span><span class="na">mergeCells</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 先合并单元格，再添加内容。并且定义的列行方位在合并的单元格第一个列行方位，否则添加不上内容，如下所示：</span>
</span><span class='line'><span class="n">Label</span> <span class="n">label</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Label</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="s">&quot; 测试 &quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">sheet</span><span class="o">.</span><span class="na">addCell</span><span class="o">(</span><span class="n">label</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>行高和列宽</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 作用是指定第i+1行的高度</span>
</span><span class='line'><span class="n">WritableSheet</span><span class="o">.</span><span class="na">setRowView</span><span class="o">(</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 将第一行的高度设为200</span>
</span><span class='line'><span class="n">sheet</span><span class="o">.</span><span class="na">setRowView</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">200</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 作用是指定第i+1列的宽度</span>
</span><span class='line'><span class="n">WritableSheet</span><span class="o">.</span><span class="na">setColumnView</span><span class="o">(</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 将第一列的宽度设为30</span>
</span><span class='line'><span class="n">sheet</span><span class="o">.</span><span class="na">setColumnView</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">30</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3、数据格式化</h3>

<h4>字串格式化</h4>

<p>字符串的格式化涉及到的是字体、粗细、字号等元素，这些功能主要由WritableFont和WritableCellFormat类来负责。</p>

<p>WritableFont有非常丰富的构造子方法，供不同情况下使用，jExcelAPI的java-doc中有详细列表，这里不再列出。</p>

<p>WritableCellFormat类非常重要，通过它可以指定单元格的各种属性，后面的单元格格式化中会有更多描述。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//字体样式：宋体；11号；粗体</span>
</span><span class='line'><span class="n">WritableFont</span> <span class="n">font1</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">WritableFont</span><span class="o">(</span><span class="n">WritableFont</span><span class="o">.</span><span class="na">createFont</span><span class="o">(</span><span class="s">&quot;宋体&quot;</span><span class="o">),</span> <span class="mi">11</span><span class="o">,</span> <span class="n">WritableFont</span><span class="o">.</span><span class="na">BOLD</span><span class="o">);</span>
</span><span class='line'><span class="n">WritableCellFormat</span> <span class="n">format1</span> <span class="o">=</span> <span class="k">new</span>  <span class="nf">WritableCellFormat</span><span class="o">(</span><span class="n">font1</span><span class="o">);</span>
</span><span class='line'><span class="n">Label</span> <span class="n">label</span> <span class="o">=</span> <span class="k">new</span>  <span class="nf">Label</span><span class="o">(</span> <span class="mi">0</span> <span class="o">,</span> <span class="mi">0</span> <span class="o">,</span> <span class="s">&quot;test&quot;</span><span class="o">,</span> <span class="n">format1</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>对齐方式</h4>

<p>在WritableCellFormat类中，还有一个很重要的方法是指定数据的对齐方式，比如针对我们上面的实例，可以指定：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 把水平对齐方式指定为居中 </span>
</span><span class='line'><span class="n">format1</span><span class="o">.</span><span class="na">setAlignment</span><span class="o">(</span><span class="n">jxl</span><span class="o">.</span><span class="na">format</span><span class="o">.</span><span class="na">Alignment</span><span class="o">.</span><span class="na">CENTRE</span><span class="o">);</span>
</span><span class='line'><span class="c1">// 把垂直对齐方式指定为居中 </span>
</span><span class='line'><span class="n">format1</span><span class="o">.</span><span class="na">setVerticalAlignment</span><span class="o">(</span><span class="n">jxl</span><span class="o">.</span><span class="na">format</span><span class="o">.</span><span class="na">VerticalAlignment</span><span class="o">.</span><span class="na">CENTRE</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4、读取文件</h3>

<figure class='code'><figcaption><span>ReadExcel.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 读取Excel的类 </span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">jxl.Cell</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">jxl.Sheet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">jxl.Workbook</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReadExcel</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Workbook</span> <span class="n">book</span> <span class="o">=</span> <span class="n">Workbook</span><span class="o">.</span><span class="na">getWorkbook</span><span class="o">(</span><span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">&quot;c:/test.xls&quot;</span><span class="o">));</span>
</span><span class='line'>            <span class="c1">// 获得第一个工作表对象</span>
</span><span class='line'>            <span class="n">Sheet</span> <span class="n">sheet</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="na">getSheet</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">// 得到第一列第一行的单元格</span>
</span><span class='line'>            <span class="n">Cell</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">sheet</span><span class="o">.</span><span class="na">getCell</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">contents</span> <span class="o">=</span> <span class="n">cell</span><span class="o">.</span><span class="na">getContents</span><span class="o">();</span><span class="c1">//得到单元格内容</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">contents</span><span class="o">);</span>
</span><span class='line'>            <span class="n">book</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>程序的输出结果是：test。</p>

<p>Cell接口的方法还可以获取单元格行、列位置，单元格是否隐藏等属性。具体的参考jxl的API。</p>

<h3>5、修改文件</h3>

<p>修改Excel文件除了打开文件的方式不同之外，其他与创建Excel是一样的。</p>

<figure class='code'><figcaption><span>UpdateExcel.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 修改Excel的类 </span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">jxl.Workbook</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">jxl.write.Label</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">jxl.write.WritableSheet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">jxl.write.WritableWorkbook</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UpdateExcel</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// 获得Excel文件</span>
</span><span class='line'>            <span class="n">Workbook</span> <span class="n">wb</span> <span class="o">=</span> <span class="n">Workbook</span><span class="o">.</span><span class="na">getWorkbook</span><span class="o">(</span><span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">&quot;c:/test.xls&quot;</span><span class="o">));</span>
</span><span class='line'>            <span class="c1">// 打开一个文件的副本，并且指定数据写回到原文件</span>
</span><span class='line'>            <span class="n">WritableWorkbook</span> <span class="n">book</span> <span class="o">=</span> <span class="n">Workbook</span><span class="o">.</span><span class="na">createWorkbook</span><span class="o">(</span><span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">&quot;c:/test.xls&quot;</span><span class="o">),</span> <span class="n">wb</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//修改原工作表数据</span>
</span><span class='line'>            <span class="n">WritableSheet</span> <span class="n">sheet1</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="na">getSheet</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>            <span class="n">sheet1</span><span class="o">.</span><span class="na">addCell</span><span class="o">(</span><span class="k">new</span> <span class="nf">Label</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="s">&quot;覆盖原来的test&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 添加一个新工作表</span>
</span><span class='line'>            <span class="n">WritableSheet</span> <span class="n">sheet2</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="na">createSheet</span><span class="o">(</span><span class="s">&quot; 第二页 &quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">sheet2</span><span class="o">.</span><span class="na">addCell</span><span class="o">(</span><span class="k">new</span> <span class="nf">Label</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="s">&quot; 第二页的测试数据 &quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">book</span><span class="o">.</span><span class="na">write</span><span class="o">();</span>
</span><span class='line'>            <span class="n">book</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>导出文件</h2>

<p>附上一个导出文件例子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/** 报表导出按钮 */</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span> <span class="s1">&#39;#exportBtn&#39;</span> <span class="p">).</span><span class="nx">click</span><span class="p">(</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">$</span><span class="p">(</span> <span class="s1">&#39;#frm&#39;</span> <span class="p">).</span><span class="nx">validationEngine</span><span class="p">(</span> <span class="s1">&#39;validate&#39;</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span> <span class="s1">&#39;#frm&#39;</span> <span class="p">)[</span> <span class="mi">0</span> <span class="p">].</span><span class="nx">action</span> <span class="o">=</span> <span class="s1">&#39;${ctx }/exportAction.do?m=exportExcel&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span> <span class="s1">&#39;#frm&#39;</span> <span class="p">)[</span> <span class="mi">0</span> <span class="p">].</span><span class="nx">submit</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span> <span class="k">this</span> <span class="p">).</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;disabled&#39;</span><span class="p">,</span> <span class="kc">true</span> <span class="p">);</span>
</span><span class='line'>        <span class="nb">window</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span> <span class="s1">&#39;exportBtn&#39;</span> <span class="p">).</span><span class="nx">disabled</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span> <span class="mi">5000</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/** 根据浏览器类型，转换为当前浏览器支持的中文*/</span>
</span><span class='line'><span class="n">String</span> <span class="n">fileName</span> <span class="o">=</span> <span class="s">&quot;Excel工作表&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** header 浏览器key */</span>
</span><span class='line'><span class="n">String</span> <span class="n">userAgent</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="s">&quot;USER-AGENT&quot;</span><span class="o">).</span><span class="na">toUpperCase</span><span class="o">();</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">userAgent</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">userAgent</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">fileName</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">fileName</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/** header IE */</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span> <span class="o">-</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">userAgent</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot;MSIE&quot;</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'>        <span class="n">fileName</span> <span class="o">=</span> <span class="n">URLEncoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">fileName</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/** header Mozilla */</span>
</span><span class='line'>    <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span> <span class="o">-</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">userAgent</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot;MOZILLA&quot;</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'>        <span class="n">fileName</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">fileName</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(),</span> <span class="s">&quot;ISO8859-1&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/** header Safari */</span>
</span><span class='line'>    <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span> <span class="o">-</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">userAgent</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot;SAFARI&quot;</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'>        <span class="n">fileName</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span> <span class="n">fileName</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(),</span> <span class="s">&quot;ISO8859-1&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/** header Opera */</span>
</span><span class='line'>    <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span> <span class="o">-</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">userAgent</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot;OPERA&quot;</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'>        <span class="n">fileName</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span> <span class="n">fileName</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(),</span> <span class="s">&quot;ISO8859-1&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/** header 其它内核浏览器 */</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">fileName</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span> <span class="n">fileName</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(),</span> <span class="s">&quot;ISO8859-1&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">response</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">response</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">&quot;application/vnd.ms-excel&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">response</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">&quot;Content-disposition&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">StringBuffer</span><span class="o">(</span><span class="s">&quot;attachment&quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span> <span class="s">&quot;;filename=&quot;</span> <span class="o">).</span><span class="na">append</span><span class="o">(</span> <span class="n">fileName</span> <span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;.xls&quot;</span><span class="o">).</span><span class="na">toString</span><span class="o">()</span> <span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">WritableWorkbook</span> <span class="n">book</span> <span class="o">=</span> <span class="n">Workbook</span><span class="o">.</span><span class="na">createWorkbook</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">());</span>
</span><span class='line'><span class="n">WritableSheet</span> <span class="n">sheet</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="na">createSheet</span><span class="o">(</span><span class="s">&quot;Excel工作表&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'><span class="n">book</span><span class="o">.</span><span class="na">write</span><span class="o">();</span>
</span><span class='line'><span class="n">book</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/01/29/use-jxl-produce-excel/">http://tianweili.github.io/blog/2015/01/29/use-jxl-produce-excel/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java中的Listener 监听器]]></title>
    <link href="http://tianweili.github.io/blog/2015/01/27/java-listener/"/>
    <updated>2015-01-27T15:36:14+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/01/27/java-listener</id>
    <content type="html"><![CDATA[<p>本文介绍了Listener以下几个方面的内容：</p>

<ul>
<li>Listener的定义与作用</li>
<li>Listener的分类与使用

<ul>
<li>ServletContext监听</li>
<li>Session监听</li>
<li>Request监听</li>
</ul>
</li>
<li>Listener的应用实例

<ul>
<li>利用HttpSessionListener统计最多在线用户人数</li>
<li>Spring使用ContextLoaderListener加载ApplicationContext配置信息</li>
<li>Spring使用Log4jConfigListener配置Log4j日志</li>
<li>Spring使用IntrospectorCleanupListener清理缓存</li>
</ul>
</li>
</ul>


<!--more-->


<p>原文链接：<a href="http://tianweili.github.io/blog/2015/01/27/java-listener/">http://tianweili.github.io/blog/2015/01/27/java-listener/</a></p>

<p><a href="http://tianweili.github.io/blog/2015/01/26/java-filter/">之前写了一篇关于Filter的文章</a>，现在再来一篇Listener的，Filter和Listener在项目中是经常用到的，巧妙的使用可以达到事半功倍的效果。故把两者的用法总结一下。</p>

<h2>Listener的定义与作用</h2>

<p>监听器Listener就是在application,session,request三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件。</p>

<p>Listener是Servlet的监听器，可以监听客户端的请求，服务端的操作等。</p>

<h2>Listener的分类与使用</h2>

<p>主要有以下三类：</p>

<h3>1、ServletContext监听</h3>

<p>ServletContextListener：用于对Servlet整个上下文进行监听（创建、销毁）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//上下文初始化</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">contextInitialized</span><span class="o">(</span><span class="n">ServletContextEvent</span> <span class="n">sce</span><span class="o">);</span>
</span><span class='line'><span class="c1">//上下文销毁</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">contextDestroyed</span><span class="o">(</span><span class="n">ServletContextEvent</span> <span class="n">sce</span><span class="o">);</span>
</span><span class='line'><span class="c1">//ServletContextEvent事件：取得一个ServletContext（application）对象</span>
</span><span class='line'><span class="kd">public</span> <span class="n">ServletContext</span> <span class="nf">getServletContext</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>ServletContextAttributeListener：对Servlet上下文属性的监听（增删改属性）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//增加属性</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">attributeAdded</span><span class="o">(</span><span class="n">ServletContextAttributeEvent</span> <span class="n">scab</span><span class="o">);</span>
</span><span class='line'><span class="c1">//属性删除</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">attributeRemoved</span><span class="o">(</span><span class="n">ServletContextAttributeEvent</span> <span class="n">scab</span><span class="o">);</span>
</span><span class='line'><span class="c1">//属性替换（第二次设置同一属性）</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">attributeRepalced</span><span class="o">(</span><span class="n">ServletContextAttributeEvent</span> <span class="n">scab</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//ServletContextAttributeEvent事件：能取得设置属性的名称与内容</span>
</span><span class='line'><span class="c1">//得到属性名称</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">();</span>
</span><span class='line'><span class="c1">//取得属性的值</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Object</span> <span class="nf">getValue</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2、Session监听</h3>

<p>Session属于http协议下的内容，接口位于javax.servlet.http.*包下。</p>

<p>HttpSessionListener接口：对Session的整体状态的监听。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//session创建</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">sessionCreated</span><span class="o">(</span><span class="n">HttpSessionEvent</span> <span class="n">se</span><span class="o">);</span>
</span><span class='line'><span class="c1">//session销毁</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">sessionDestroyed</span><span class="o">(</span><span class="n">HttpSessionEvent</span> <span class="n">se</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//HttpSessionEvent事件：</span>
</span><span class='line'><span class="c1">//取得当前操作的session</span>
</span><span class='line'><span class="kd">public</span> <span class="n">HttpSession</span> <span class="nf">getSession</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>HttpSessionAttributeListener接口：对session的属性监听。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">attributeAdded</span><span class="o">(</span><span class="n">HttpSessionBindingEvent</span> <span class="n">se</span><span class="o">);</span><span class="c1">//增加属性</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">attributeRemoved</span><span class="o">(</span><span class="n">HttpSessionBindingEvent</span> <span class="n">se</span><span class="o">);</span><span class="c1">//删除属性</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">attributeReplaced</span><span class="o">(</span><span class="n">HttpSessionBindingEvent</span> <span class="n">se</span><span class="o">);</span><span class="c1">//替换属性</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//HttpSessionBindingEvent事件：</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">();</span><span class="c1">//取得属性的名称</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Object</span> <span class="nf">getValue</span><span class="o">();</span><span class="c1">//取得属性的值</span>
</span><span class='line'><span class="kd">public</span> <span class="n">HttpSession</span> <span class="nf">getSession</span><span class="o">();</span><span class="c1">//取得当前的session</span>
</span></code></pre></td></tr></table></div></figure>


<p>session的销毁有两种情况：</p>

<p>1.session超时，web.xml配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;session-config&gt;</span>
</span><span class='line'>    <span class="nt">&lt;session-timeout&gt;</span>120<span class="nt">&lt;/session-timeout&gt;</span><span class="c">&lt;!--session120分钟后超时销毁--&gt;</span>
</span><span class='line'><span class="nt">&lt;/session-config&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.手工使session失效</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//使session失效方法。session.invalidate();</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">invalidate</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3、Request监听</h3>

<p>ServletRequestListener：用于对Request请求进行监听（创建、销毁）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">requestInitialized</span><span class="o">(</span><span class="n">ServletRequestEvent</span> <span class="n">sre</span><span class="o">);</span><span class="c1">//request初始化</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">requestDestroyed</span><span class="o">(</span><span class="n">ServletRequestEvent</span> <span class="n">sre</span><span class="o">);</span><span class="c1">//request销毁</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//ServletRequestEvent事件：</span>
</span><span class='line'><span class="kd">public</span> <span class="n">ServletRequest</span> <span class="nf">getServletRequest</span><span class="o">();</span><span class="c1">//取得一个ServletRequest对象</span>
</span><span class='line'><span class="kd">public</span> <span class="n">ServletContext</span> <span class="nf">getServletContext</span><span class="o">();</span><span class="c1">//取得一个ServletContext（application）对象</span>
</span></code></pre></td></tr></table></div></figure>


<p>ServletRequestAttributeListener：对Request属性的监听（增删改属性）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">attributeAdded</span><span class="o">(</span><span class="n">ServletRequestAttributeEvent</span> <span class="n">srae</span><span class="o">);</span><span class="c1">//增加属性</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">attributeRemoved</span><span class="o">(</span><span class="n">ServletRequestAttributeEvent</span> <span class="n">srae</span><span class="o">);</span><span class="c1">//属性删除</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">attributeReplaced</span><span class="o">(</span><span class="n">ServletRequestAttributeEvent</span> <span class="n">srae</span><span class="o">);</span><span class="c1">//属性替换（第二次设置同一属性）</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//ServletRequestAttributeEvent事件：能取得设置属性的名称与内容</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">();</span><span class="c1">//得到属性名称</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Object</span> <span class="nf">getValue</span><span class="o">();</span><span class="c1">//取得属性的值</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4、在web.xml中配置</h3>

<p>Listener配置信息必须在Filter和Servlet配置之前，Listener的初始化（ServletContentListener初始化）比Servlet和Filter都优先，而销毁比Servlet和Filter都慢。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;listener&gt;</span>
</span><span class='line'>    <span class="nt">&lt;listener-class&gt;</span>com.listener.class<span class="nt">&lt;/listener-class&gt;</span>
</span><span class='line'><span class="nt">&lt;/listener&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Listener应用实例</h2>

<h3>1、利用HttpSessionListener统计最多在线用户人数</h3>

<figure class='code'><figcaption><span>HttpSessionListenerImpl.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.text.DateFormat</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.text.SimpleDateFormat</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.ServletContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpSessionEvent</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpSessionListener</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HttpSessionListenerImpl</span> <span class="kd">implements</span> <span class="n">HttpSessionListener</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sessionCreated</span><span class="o">(</span><span class="n">HttpSessionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ServletContext</span> <span class="n">app</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getSession</span><span class="o">().</span><span class="na">getServletContext</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">app</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;onLineCount&quot;</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="n">count</span><span class="o">++;</span>
</span><span class='line'>        <span class="n">app</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&quot;onLineCount&quot;</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">maxOnLineCount</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">app</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;maxOnLineCount&quot;</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="n">maxOnLineCount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//记录最多人数是多少</span>
</span><span class='line'>            <span class="n">app</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&quot;maxOnLineCount&quot;</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
</span><span class='line'>            <span class="n">DateFormat</span> <span class="n">df</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">//记录在那个时刻达到上限</span>
</span><span class='line'>            <span class="n">app</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&quot;date&quot;</span><span class="o">,</span> <span class="n">df</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="k">new</span> <span class="nf">Date</span><span class="o">()));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//session注销、超时时候调用，停止tomcat不会调用</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sessionDestroyed</span><span class="o">(</span><span class="n">HttpSessionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ServletContext</span> <span class="n">app</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getSession</span><span class="o">().</span><span class="na">getServletContext</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">app</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;onLineCount&quot;</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="n">count</span><span class="o">--;</span>
</span><span class='line'>        <span class="n">app</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&quot;onLineCount&quot;</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2、Spring使用ContextLoaderListener加载ApplicationContext配置信息</h3>

<p>ContextLoaderListener的作用就是启动Web容器时，自动装配ApplicationContext的配置信息。因为它实现了ServletContextListener这个接口，在web.xml配置这个监听器，启动容器时，就会默认执行它实现的方法。</p>

<p>ContextLoaderListener如何查找ApplicationContext.xml的配置位置以及配置多个xml：如果在web.xml中不写任何参数配置信息，默认的路径是&#8221;/WEB-INF/applicationContext.xml&#8221;，在WEB-INF目录下创建的xml文件的名称必须是applicationContext.xml（在MyEclipse中把xml文件放置在src目录下）。如果是要自定义文件名可以在web.xml里加入contextConfigLocation这个context参数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;context-param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;param-value&gt;</span>classpath:spring/applicationContext-*.xml<span class="nt">&lt;/param-value&gt;</span><span class="c">&lt;!-- 采用的是通配符方式，查找WEB-INF/spring目录下xml文件。如有多个xml文件，以“,”分隔。 --&gt;</span>
</span><span class='line'><span class="nt">&lt;/context-param&gt;</span>
</span><span class='line'><span class="nt">&lt;listener&gt;</span>
</span><span class='line'>    <span class="nt">&lt;listener-class&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="nt">&lt;/listener-class&gt;</span>
</span><span class='line'><span class="nt">&lt;/listener&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3、Spring使用Log4jConfigListener配置Log4j日志</h3>

<p>Spring使用Log4jConfigListener的好处：</p>

<ul>
<li>动态的改变记录级别和策略，不需要重启Web应用。</li>
<li>把log文件定在 /WEB-INF/logs/ 而不需要写绝对路径。因为系统把web目录的路径压入一个叫webapp.root的系统变量。这样写log文件路径时不用写绝对路径了。</li>
<li>可以把log4j.properties和其他properties一起放在/WEB-INF/ ，而不是Class-Path。</li>
<li>设置log4jRefreshInterval时间，开一条watchdog线程每隔段时间扫描一下配置文件的变化。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;context-param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;param-name&gt;</span>webAppRootKey<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;param-value&gt;</span>project.root<span class="nt">&lt;/param-value&gt;</span><span class="c">&lt;!-- 用于定位log文件输出位置在web应用根目录下，log4j配置文件中写输出位置：log4j.appender.FILE.File=${project.root}/logs/project.log --&gt;</span>
</span><span class='line'><span class="nt">&lt;/context-param&gt;</span>
</span><span class='line'><span class="nt">&lt;context-param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;param-name&gt;</span>log4jConfigLocation<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;param-value&gt;</span>classpath:log4j.properties<span class="nt">&lt;/param-value&gt;</span><span class="c">&lt;!-- 载入log4j配置文件 --&gt;</span>
</span><span class='line'><span class="nt">&lt;/context-param&gt;</span>
</span><span class='line'><span class="nt">&lt;context-param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;param-name&gt;</span>log4jRefreshInterval<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;param-value&gt;</span>60000<span class="nt">&lt;/param-value&gt;</span><span class="c">&lt;!--Spring刷新Log4j配置文件的间隔60秒,单位为millisecond--&gt;</span>
</span><span class='line'><span class="nt">&lt;/context-param&gt;</span>
</span><span class='line'><span class="nt">&lt;listener&gt;</span>
</span><span class='line'>    <span class="nt">&lt;listener-class&gt;</span>org.springframework.web.util.Log4jConfigListener<span class="nt">&lt;/listener-class&gt;</span>
</span><span class='line'><span class="nt">&lt;/listener&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4、Spring使用IntrospectorCleanupListener清理缓存</h3>

<p>这个监听器的作用是在web应用关闭时刷新JDK的JavaBeans的Introspector缓存，以确保Web应用程序的类加载器以及其加载的类正确的释放资源。</p>

<p>如果JavaBeans的Introspector已被用来分析应用程序类，系统级的Introspector缓存将持有这些类的一个硬引用。因此，这些类和Web应用程序的类加载器在Web应用程序关闭时将不会被垃圾收集器回收！而IntrospectorCleanupListener则会对其进行适当的清理，已使其能够被垃圾收集器回收。</p>

<p>唯一能够清理Introspector的方法是刷新整个Introspector缓存，没有其他办法来确切指定应用程序所引用的类。这将删除所有其他应用程序在服务器的缓存的Introspector结果。</p>

<p>在使用Spring内部的bean机制时，不需要使用此监听器，因为Spring自己的introspection results cache将会立即刷新被分析过的JavaBeans Introspector cache，而仅仅会在应用程序自己的ClassLoader里面持有一个cache。虽然Spring本身不产生泄漏，注意，即使在Spring框架的类本身驻留在一个“共同”类加载器（如系统的ClassLoader）的情况下，也仍然应该使用使用IntrospectorCleanupListener。在这种情况下，这个IntrospectorCleanupListener将会妥善清理Spring的introspection cache。</p>

<p>应用程序类，几乎不需要直接使用JavaBeans Introspector，所以，通常都不是Introspector resource造成内存泄露。相反，许多库和框架，不清理Introspector，例如： Struts和Quartz。</p>

<p>需要注意的是一个简单Introspector泄漏将会导致整个Web应用程序的类加载器不会被回收！这样做的结果，将会是在web应用程序关闭时，该应用程序所有的静态类资源（比如：单实例对象）都没有得到释放。而导致内存泄露的根本原因其实并不是这些未被回收的类！</p>

<p>注意：IntrospectorCleanupListener应该注册为web.xml中的第一个Listener，在任何其他Listener之前注册，比如在Spring&rsquo;s ContextLoaderListener注册之前，才能确保IntrospectorCleanupListener在Web应用的生命周期适当时机生效。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;listener&gt;</span><span class="c">&lt;!-- memory clean --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;listener-class&gt;</span>org.springframework.web.util.IntrospectorCleanupListener<span class="nt">&lt;/listener-class&gt;</span>
</span><span class='line'><span class="nt">&lt;/listener&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/01/27/java-listener/">http://tianweili.github.io/blog/2015/01/27/java-listener/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java中的Filter 过滤器]]></title>
    <link href="http://tianweili.github.io/blog/2015/01/26/java-filter/"/>
    <updated>2015-01-26T17:07:51+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/01/26/java-filter</id>
    <content type="html"><![CDATA[<p>本文主要详细介绍了Filter的以下几个方面内容：</p>

<ul>
<li>Filter概念介绍</li>
<li>Filter的用途</li>
<li>如何借助Filter实现拦截功能</li>
<li>Filter的开发步骤和配置详解</li>
<li>Filter链</li>
<li>Filter的生命周期</li>
<li>Filter的使用案例

<ul>
<li>使用Filter验证用户登录安全控制</li>
<li>防止中文乱码过滤器</li>
<li>Spring+Hibernate的OpenSessionInViewFilter控制session的开关</li>
<li>Struts2的web.xml配置</li>
</ul>
</li>
</ul>


<!--more-->


<p>原文链接：<a href="http://tianweili.github.io/blog/2015/01/26/java-filter/">http://tianweili.github.io/blog/2015/01/26/java-filter/</a></p>

<h2>Filter简介</h2>

<p>Filter也称之为过滤器，它是Servlet技术中最实用的技术，WEB开发人员通过Filter技术，对web服务器管理的所有web资源：例如Jsp, Servlet, 静态图片文件或静态 html 文件等进行拦截，从而实现一些特殊的功能。例如实现URL级别的权限访问控制、过滤敏感词汇、压缩响应信息等一些高级功能。</p>

<p>它主要用于对用户请求进行预处理，也可以对HttpServletResponse 进行后处理。使用Filter 的完整流程：Filter 对用户请求进行预处理，接着将请求交给Servlet 进行处理并生成响应，最后Filter 再对服务器响应进行后处理。</p>

<h2>Filter功能</h2>

<ul>
<li>在HttpServletRequest 到达 Servlet 之前，拦截客户的 HttpServletRequest 。根据需要检查 HttpServletRequest ，也可以修改HttpServletRequest 头和数据。</li>
<li>在HttpServletResponse 到达客户端之前，拦截HttpServletResponse 。根据需要检查 HttpServletResponse ，也可以修改HttpServletResponse头和数据。</li>
</ul>


<h2>如何借助Filter实现拦截功能</h2>

<p>Filter接口中有一个doFilter方法，当开发人员编写好Filter，并配置对哪个web资源进行拦截后，WEB服务器每次在调用web资源的service方法之前，都会先调用一下filter的doFilter方法，因此，在该方法内编写代码可达到如下目的：</p>

<ul>
<li>调用目标资源之前，让一段代码执行。</li>
<li>是否调用目标资源（即是否让用户访问web资源）。</li>
</ul>


<p>web服务器在调用doFilter方法时，会传递一个filterChain对象进来，<strong>filterChain对象是filter接口中最重要的一个对象</strong>，它也提供了一个doFilter方法，开发人员可以根据需求决定是否调用此方法，调用该方法，则web服务器就会调用web资源的service方法，即web资源就会被访问，否则web资源不会被访问。</p>

<h2>Filter开发两步走</h2>

<ol>
<li>编写java类实现Filter接口，并实现其doFilter方法。</li>
<li>在 web.xml 文件中使用<filter>和<filter-mapping>元素对编写的filter类进行注册，并设置它所能拦截的资源。</li>
</ol>


<p>web.xml配置各节点介绍：</p>

<ul>
<li><code>&lt;filter&gt;</code>指定一个过滤器。

<ul>
<li><code>&lt;filter-name&gt;</code>用于为过滤器指定一个名字，该元素的内容不能为空。</li>
<li><code>&lt;filter-class&gt;</code>元素用于指定过滤器的完整的限定类名。</li>
<li><code>&lt;init-param&gt;</code>元素用于为过滤器指定初始化参数，它的子元素<code>&lt;param-name&gt;</code>指定参数的名字，<code>&lt;param-value&gt;</code>指定参数的值。</li>
<li>在过滤器中，可以使用<code>FilterConfig</code>接口对象来访问初始化参数。</li>
</ul>
</li>
<li><code>&lt;filter-mapping&gt;</code>元素用于设置一个 Filter 所负责拦截的资源。一个Filter拦截的资源可通过两种方式来指定：Servlet 名称和资源访问的请求路径

<ul>
<li><code>&lt;filter-name&gt;</code>子元素用于设置filter的注册名称。该值必须是在<code>&lt;filter&gt;</code>元素中声明过的过滤器的名字</li>
<li><code>&lt;url-pattern&gt;</code>设置 filter 所拦截的请求路径(过滤器关联的URL样式)</li>
</ul>
</li>
<li><code>&lt;servlet-name&gt;</code>指定过滤器所拦截的Servlet名称。</li>
<li><code>&lt;dispatcher&gt;</code>指定过滤器所拦截的资源被 Servlet 容器调用的方式，可以是<code>REQUEST</code>,<code>INCLUDE</code>,<code>FORWARD</code>和<code>ERROR</code>之一，默认<code>REQUEST</code>。用户可以设置多个<code>&lt;dispatcher&gt;</code>子元素用来指定 Filter 对资源的多种调用方式进行拦截。</li>
<li><code>&lt;dispatcher&gt;</code>子元素可以设置的值及其意义

<ul>
<li><code>REQUEST</code>：当用户直接访问页面时，Web容器将会调用过滤器。如果目标资源是通过RequestDispatcher的include()或forward()方法访问时，那么该过滤器就不会被调用。</li>
<li><code>INCLUDE</code>：如果目标资源是通过RequestDispatcher的include()方法访问时，那么该过滤器将被调用。除此之外，该过滤器不会被调用。</li>
<li><code>FORWARD</code>：如果目标资源是通过RequestDispatcher的forward()方法访问时，那么该过滤器将被调用，除此之外，该过滤器不会被调用。</li>
<li><code>ERROR</code>：如果目标资源是通过声明式异常处理机制调用时，那么该过滤器将被调用。除此之外，过滤器不会被调用。</li>
</ul>
</li>
</ul>


<h2>Filter链</h2>

<p>在一个web应用中，可以开发编写多个Filter，这些Filter组合起来称之为一个Filter链。</p>

<p><strong>web服务器根据Filter在web.xml文件中的注册顺序，决定先调用哪个Filter</strong>，当第一个Filter的doFilter方法被调用时，web服务器会创建一个代表Filter链的FilterChain对象传递给该方法。在doFilter方法中，开发人员如果调用了FilterChain对象的doFilter方法，则web服务器会检查FilterChain对象中是否还有filter，如果有，则调用第2个filter，如果没有，则调用目标资源。</p>

<h2>Filter的生命周期</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">FilterConfig</span> <span class="n">filterConfig</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">;</span><span class="c1">//初始化</span>
</span></code></pre></td></tr></table></div></figure>


<p>和我们编写的Servlet程序一样，Filter的创建和销毁由WEB服务器负责。 web 应用程序启动时，web 服务器将创建Filter 的实例对象，并调用其init方法，读取web.xml配置，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作（<strong>filter对象只会创建一次，init方法也只会执行一次</strong>）。开发人员通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">FilterChain</span> <span class="n">chain</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">ServletException</span><span class="o">;</span><span class="c1">//拦截请求</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法完成实际的过滤操作。当客户请求访问与过滤器关联的URL的时候，Servlet过滤器将先执行doFilter方法。FilterChain参数用于访问后续过滤器。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">();</span><span class="c1">//销毁</span>
</span></code></pre></td></tr></table></div></figure>


<p>Filter对象创建后会驻留在内存，当web应用移除或服务器停止时才销毁。在Web容器卸载 Filter 对象之前被调用。该方法在Filter的生命周期中仅执行一次。在这个方法中，可以释放过滤器使用的资源。</p>

<h2>FilterConfig接口</h2>

<p>用户在配置filter时，可以使用<init-param>为filter配置一些初始化参数，当web容器实例化Filter对象，调用其init方法时，会把封装了filter初始化参数的filterConfig对象传递进来。因此开发人员在编写filter时，通过filterConfig对象的方法，就可获得以下内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="nf">getFilterName</span><span class="o">();</span><span class="c1">//得到filter的名称。 </span>
</span><span class='line'><span class="n">String</span> <span class="nf">getInitParameter</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">);</span><span class="c1">//返回在部署描述中指定名称的初始化参数的值。如果不存在返回null. </span>
</span><span class='line'><span class="n">Enumeration</span> <span class="nf">getInitParameterNames</span><span class="o">();</span><span class="c1">//返回过滤器的所有初始化参数的名字的枚举集合。 </span>
</span><span class='line'><span class="kd">public</span> <span class="n">ServletContext</span> <span class="nf">getServletContext</span><span class="o">();</span><span class="c1">//返回Servlet上下文对象的引用。</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Filter使用案例</h2>

<h3>使用Filter验证用户登录安全控制</h3>

<p>前段时间参与维护一个项目，用户退出系统后，再去地址栏访问历史，根据url，仍然能够进入系统响应页面。我去检查一下发现对请求未进行过滤验证用户登录。添加一个filter搞定问题！</p>

<p>先在web.xml配置</p>

<figure class='code'><figcaption><span>web.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='XML'><span class='line'><span class="nt">&lt;filter&gt;</span>
</span><span class='line'>    <span class="nt">&lt;filter-name&gt;</span>SessionFilter<span class="nt">&lt;/filter-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;filter-class&gt;</span>com.action.login.SessionFilter<span class="nt">&lt;/filter-class&gt;</span>
</span><span class='line'>    <span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-name&gt;</span>logonStrings<span class="nt">&lt;/param-name&gt;</span><span class="c">&lt;!-- 对登录页面不进行过滤 --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-value&gt;</span>/project/index.jsp;login.do<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/init-param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-name&gt;</span>includeStrings<span class="nt">&lt;/param-name&gt;</span><span class="c">&lt;!-- 只对指定过滤参数后缀进行过滤 --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-value&gt;</span>.do;.jsp<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/init-param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-name&gt;</span>redirectPath<span class="nt">&lt;/param-name&gt;</span><span class="c">&lt;!-- 未通过跳转到登录界面 --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-value&gt;</span>/index.jsp<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/init-param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-name&gt;</span>disabletestfilter<span class="nt">&lt;/param-name&gt;</span><span class="c">&lt;!-- Y:过滤无效 --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-value&gt;</span>N<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/init-param&gt;</span>
</span><span class='line'><span class="nt">&lt;/filter&gt;</span>
</span><span class='line'><span class="nt">&lt;filter-mapping&gt;</span>
</span><span class='line'>    <span class="nt">&lt;filter-name&gt;</span>SessionFilter<span class="nt">&lt;/filter-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'><span class="nt">&lt;/filter-mapping&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着编写FilterServlet：</p>

<figure class='code'><figcaption><span>FilterServlet.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">action</span><span class="o">.</span><span class="na">login</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.Filter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.FilterChain</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.FilterConfig</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.ServletRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.ServletResponse</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponseWrapper</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *    判断用户是否登录,未登录则退出系统</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SessionFilter</span> <span class="kd">implements</span> <span class="n">Filter</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">FilterConfig</span> <span class="n">config</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">config</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isContains</span><span class="o">(</span><span class="n">String</span> <span class="n">container</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">regx</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">regx</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">container</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">regx</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">FilterChain</span> <span class="n">chain</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">ServletException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HttpServletRequest</span> <span class="n">hrequest</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpServletRequest</span><span class="o">)</span><span class="n">request</span><span class="o">;</span>
</span><span class='line'>        <span class="n">HttpServletResponseWrapper</span> <span class="n">wrapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpServletResponseWrapper</span><span class="o">((</span><span class="n">HttpServletResponse</span><span class="o">)</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">logonStrings</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="na">getInitParameter</span><span class="o">(</span><span class="s">&quot;logonStrings&quot;</span><span class="o">);</span>        <span class="c1">// 登录登陆页面</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">includeStrings</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="na">getInitParameter</span><span class="o">(</span><span class="s">&quot;includeStrings&quot;</span><span class="o">);</span>    <span class="c1">// 过滤资源后缀参数</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">redirectPath</span> <span class="o">=</span> <span class="n">hrequest</span><span class="o">.</span><span class="na">getContextPath</span><span class="o">()</span> <span class="o">+</span> <span class="n">config</span><span class="o">.</span><span class="na">getInitParameter</span><span class="o">(</span><span class="s">&quot;redirectPath&quot;</span><span class="o">);</span><span class="c1">// 没有登陆转向页面</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">disabletestfilter</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="na">getInitParameter</span><span class="o">(</span><span class="s">&quot;disabletestfilter&quot;</span><span class="o">);</span><span class="c1">// 过滤器是否有效</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">disabletestfilter</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;Y&quot;</span><span class="o">))</span> <span class="o">{</span>    <span class="c1">// 过滤无效</span>
</span><span class='line'>            <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">String</span><span class="o">[]</span> <span class="n">logonList</span> <span class="o">=</span> <span class="n">logonStrings</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;;&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span><span class="o">[]</span> <span class="n">includeList</span> <span class="o">=</span> <span class="n">includeStrings</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;;&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="k">this</span><span class="o">.</span><span class="na">isContains</span><span class="o">(</span><span class="n">hrequest</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">(),</span> <span class="n">includeList</span><span class="o">))</span> <span class="o">{</span><span class="c1">// 只对指定过滤参数后缀进行过滤</span>
</span><span class='line'>            <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">isContains</span><span class="o">(</span><span class="n">hrequest</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">(),</span> <span class="n">logonList</span><span class="o">))</span> <span class="o">{</span><span class="c1">// 对登录页面不进行过滤</span>
</span><span class='line'>            <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">user</span> <span class="o">=</span> <span class="o">(</span> <span class="n">String</span> <span class="o">)</span> <span class="n">hrequest</span><span class="o">.</span><span class="na">getSession</span><span class="o">().</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;useronly&quot;</span><span class="o">);</span><span class="c1">//判断用户是否登录</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">wrapper</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="n">redirectPath</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">FilterConfig</span> <span class="n">filterConfig</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">config</span> <span class="o">=</span> <span class="n">filterConfig</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样既可完成对用户所有请求，均要经过这个Filter进行验证用户登录。</p>

<h3>防止中文乱码过滤器</h3>

<p>项目使用spring框架时。当前台JSP页面和JAVA代码中使用了不同的字符集进行编码的时候就会出现表单提交的数据或者上传/下载中文名称文件出现乱码的问题，那就可以使用这个过滤器。</p>

<figure class='code'><figcaption><span>web.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='XML'><span class='line'><span class="nt">&lt;filter&gt;</span>
</span><span class='line'>    <span class="nt">&lt;filter-name&gt;</span>encoding<span class="nt">&lt;/filter-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;filter-class&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="nt">&lt;/filter-class&gt;</span>
</span><span class='line'>    <span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-name&gt;</span>encoding<span class="nt">&lt;/param-name&gt;</span><span class="c">&lt;!--用来指定一个具体的字符集--&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-value&gt;</span>UTF-8<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/init-param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-name&gt;</span>forceEncoding<span class="nt">&lt;/param-name&gt;</span><span class="c">&lt;!--true：无论request是否指定了字符集，都是用encoding；false：如果request已指定一个字符集，则不使用encoding--&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-value&gt;</span>false<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/init-param&gt;</span>
</span><span class='line'><span class="nt">&lt;/filter&gt;</span>
</span><span class='line'><span class="nt">&lt;filter-mapping&gt;</span>
</span><span class='line'>    <span class="nt">&lt;filter-name&gt;</span>encoding<span class="nt">&lt;/filter-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'><span class="nt">&lt;/filter-mapping&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Spring+Hibernate的OpenSessionInViewFilter控制session的开关</h3>

<p>当hibernate+spring配合使用的时候，如果设置了lazy=true（延迟加载）,那么在读取数据的时候，当读取了父数据后，hibernate 会自动关闭session，这样，当要使用与之关联数据、子数据的时候，系统会抛出lazyinit的错误，这时就需要使用spring提供的OpenSessionInViewFilter过滤器。</p>

<p>OpenSessionInViewFilter主要是保持Session状态直到request将全部页面发送到客户端，直到请求结束后才关闭session，这样就可以解决延迟加载带来的问题。</p>

<p>注意：OpenSessionInViewFilter配置要写在struts2的配置前面。因为tomcat容器在加载过滤器的时候是按照顺序加载的，如果配置文件先写的是struts2的过滤器配置，然后才是OpenSessionInViewFilter过滤器配置，所以加载的顺序导致，action在获得数据的时候session并没有被spring管理。</p>

<figure class='code'><figcaption><span>web.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;filter&gt;</span><span class="c">&lt;!-- lazy loading enabled in spring --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;filter-name&gt;</span>OpenSessionInViewFilter<span class="nt">&lt;/filter-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;filter-class&gt;</span>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter<span class="nt">&lt;/filter-class&gt;</span>
</span><span class='line'>    <span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-name&gt;</span>sessionFactoryBeanName<span class="nt">&lt;/param-name&gt;</span><span class="c">&lt;!-- 可缺省。默认是从spring容器中找id为sessionFactory的bean，如果id不为sessionFactory，则需要配置如下，此处SessionFactory为spring容器中的bean。 --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-value&gt;</span>sessionFactory<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/init-param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-name&gt;</span>singleSession<span class="nt">&lt;/param-name&gt;</span><span class="c">&lt;!-- singleSession默认为true,若设为false则等于没用OpenSessionInView --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-value&gt;</span>true<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/init-param&gt;</span>
</span><span class='line'><span class="nt">&lt;/filter&gt;</span>
</span><span class='line'><span class="nt">&lt;filter-mapping&gt;</span>
</span><span class='line'>    <span class="nt">&lt;filter-name&gt;</span>OpenSessionInViewFilter<span class="nt">&lt;/filter-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;url-pattern&gt;</span>*.do<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'><span class="nt">&lt;/filter-mapping&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Struts2的web.xml配置</h3>

<p>项目中使用Struts2同样需要在web.xml配置过滤器，用来截取请求，转到Struts2的Action进行处理。</p>

<p>注意：如果在2.1.3以前的Struts2版本，过滤器使用org.apache.struts2.dispatcher.FilterDispatcher。否则使用org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter。从Struts2.1.3开始，将废弃ActionContextCleanUp过滤器，而在StrutsPrepareAndExecuteFilter过滤器中包含相应的功能。</p>

<p>三个初始化参数配置：</p>

<ul>
<li>config参数：指定要加载的配置文件。逗号分割。</li>
<li>actionPackages参数：指定Action类所在的包空间。逗号分割。</li>
<li>configProviders参数：自定义配置文件提供者，需要实现ConfigurationProvider接口类。逗号分割。</li>
</ul>


<figure class='code'><figcaption><span>web.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='XML'><span class='line'><span class="c">&lt;!-- struts 2.x filter --&gt;</span>
</span><span class='line'><span class="nt">&lt;filter&gt;</span>
</span><span class='line'>    <span class="nt">&lt;filter-name&gt;</span>struts2<span class="nt">&lt;/filter-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;filter-class&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="nt">&lt;/filter-class&gt;</span>
</span><span class='line'><span class="nt">&lt;/filter&gt;</span>
</span><span class='line'><span class="nt">&lt;filter-mapping&gt;</span>
</span><span class='line'>    <span class="nt">&lt;filter-name&gt;</span>struts2<span class="nt">&lt;/filter-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;url-pattern&gt;</span>*.do<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'><span class="nt">&lt;/filter-mapping&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/01/26/java-filter/">http://tianweili.github.io/blog/2015/01/26/java-filter/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress博客的个性化配置]]></title>
    <link href="http://tianweili.github.io/blog/2015/01/11/setup-octopress-blog/"/>
    <updated>2015-01-11T21:52:49+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/01/11/setup-octopress-blog</id>
    <content type="html"><![CDATA[<p>本文主要讲述了对Octopress搭建的博客进行一些个性化的配置，主要包括以下几个方面：</p>

<ul>
<li>优化提高博客的访问速度</li>
<li>设置链接在新窗口打开</li>
<li>配置首页文章以摘要形式展示</li>
<li>代码着色</li>
<li>添加侧边栏文章分类</li>
<li>添加多说评论系统</li>
<li>自动为图片添加URL前缀</li>
<li>添加访客统计</li>
</ul>


<!--more-->


<p>原文链接：<a href="http://tianweili.github.com/blog/2015/01/11/setup-octopress-blog/">http://tianweili.github.com/blog/2015/01/11/setup-octopress-blog/</a></p>

<h2>提高博客访问速度</h2>

<p>因为“墙”的关系，所以Octopress建立以后会发现访问速度奇慢无比，竟然超过了40s。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/setup-octopress-blog/call-octopress-blog-slowly.png"></p>

<p>仔细分析后我们发现其中都是一些被墙的请求报了404Error，所以导致访问博客巨慢无比，下面我们就一次阉割掉这些被墙的请求。T_T</p>

<p><strong>1.替换Google JS公共库</strong></p>

<p>Octopress默认使用的是Google的JS公共库地址，加载的过程无比的缓慢。因此我们要把它改为<a href="http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs">百度的JS公共库</a>，需要把<code>/source/_includes/head.html</code>文件中的Google公共库地址改为：</p>

<pre><code>&lt;script src="//libs.baidu.com/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;
</code></pre>

<p><strong>2.去掉Twitter</strong></p>

<p>从上图可以看出加载失败的还有twitter，这个也得给去掉。</p>

<p>把在根目录下的<code>_config.yml</code>文件中Twitter内容给注释掉。</p>

<pre><code># Twitter
#twitter_user:
#twitter_tweet_button: true
</code></pre>

<p>把<code>\source\_includes\after_footer.html</code>文件中的twitter内容给注释掉：</p>

<pre><code>&lt;!--{% include twitter_sharing.html %}--&gt;
</code></pre>

<p><strong>3.删除Google font</strong></p>

<p>把在<code>\source\_includes\custom\head.html</code>中的Google font样式给删除：</p>

<pre><code>&lt;link href="//fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"&gt;
&lt;link href="//fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"&gt;
</code></pre>

<h2>设置链接在新窗口打开</h2>

<p>在博文中，如果点击链接直接在本窗口打开了，那么用户体验就不是很好。而markdown的标准语法是不支持链接在新窗口打开的，虽然可以通过在markdown中直接写html标签来解决这个问题，但是这与markdown的简洁书写特性不符。但是我们可以通过设置Octopress来达到这种效果，即在<code>\source\_includes\custom\head.html</code>文件中添加如下一段代码：</p>

<pre><code>&lt;script&gt;
    function addBlankTargetForLinks () {
      $('a[href^="http"]').each(function(){
          $(this).attr('target', '_blank');
      });
    }

    $(document).bind('DOMNodeInserted', function(event) {
      addBlankTargetForLinks();
    });
&lt;/script&gt;
</code></pre>

<h2>首页文章以摘要形式展示</h2>

<p>1.在文章对应的markdown文件中，在需要显示在首页的文字后面添加<code>&lt;!--more--&gt;</code>，执行rake generate后在首页上会看到只显示&lt;!—more—>前面的文字，文字后面会显示<code>Read on</code>链接，点击后进入文字的详细页面;</p>

<p>2.如果想将Read on修改为中文，可以修改_config.yml文件</p>

<pre><code>#excerpt_link: "Read on &amp;rarr;"  # "Continue reading" link text at the bottom of excerpted articles
excerpt_link: "阅读全文&amp;rarr;"  # "Continue reading" link text at the bottom of excerpted articles
</code></pre>

<h2>代码着色</h2>

<p>Octopress使用的是Pygments来进行代码着色的，使用方式也比较简单如下所示：</p>

<pre><code>```java xxx.java
//java code
```
</code></pre>

<p><a href="http://pygments.org/languages/">Pygments支持的语言列表</a></p>

<h3>修改代码生成css</h3>

<p>当然你也可以修改Pygments生成的代码css样式。</p>

<p>Pygments默认提供了很多css样式，你可以在python shell中用下面命令列出当前pygments所支持的样式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt;&gt; from pygments.styles import STYLE_MAP
</span><span class='line'>&gt;&gt;&gt; STYLE_MAP.keys<span class="o">()</span>
</span><span class='line'><span class="o">[</span><span class="s1">&#39;manni&#39;</span>, <span class="s1">&#39;igor&#39;</span>, <span class="s1">&#39;xcode&#39;</span>, <span class="s1">&#39;vim&#39;</span>, <span class="s1">&#39;autumn&#39;</span>, <span class="s1">&#39;vs&#39;</span>, <span class="s1">&#39;rrt&#39;</span>, <span class="s1">&#39;native&#39;</span>, <span class="s1">&#39;perldoc&#39;</span>, <span class="s1">&#39;borland&#39;</span>, <span class="s1">&#39;tango&#39;</span>, <span class="s1">&#39;emacs&#39;</span>, <span class="s1">&#39;friendly&#39;</span>, <span class="s1">&#39;monokai&#39;</span>, <span class="s1">&#39;paraiso-dark&#39;</span>, <span class="s1">&#39;colorful&#39;</span>, <span class="s1">&#39;murphy&#39;</span>, <span class="s1">&#39;bw&#39;</span>, <span class="s1">&#39;pastie&#39;</span>, <span class="s1">&#39;paraiso-light&#39;</span>, <span class="s1">&#39;trac&#39;</span>, <span class="s1">&#39;default&#39;</span>, <span class="s1">&#39;fruity&#39;</span><span class="o">]</span>
</span><span class='line'>&gt;&gt;&gt;
</span></code></pre></td></tr></table></div></figure>


<p>通过-S来选择，需要生成default的样式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pygmentize -S default -f html &gt; your/path/pygments.css
</span></code></pre></td></tr></table></div></figure>


<p>有时候Octopress会把我们想要展示的Ruby代码解析成HTML，如果只是想展示代码，而不让Octopress来解析，那么可以在代码前后加入和代码。</p>

<h2>添加侧边栏文章分类（category）</h2>

<p>1.在<code>plugins</code>目录下创建<code>category_list_tag.rb</code>文件，内容如下：</p>

<pre><code>module Jekyll 
  class CategoryListTag &lt; Liquid::Tag 
    def render(context) 
      html = "" 
      categories = context.registers[:site].categories.keys 
      categories.sort.each do |category| 
        posts_in_category = context.registers[:site].categories[category].size 
        category_dir = context.registers[:site].config['category_dir'] 
        category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase) 
        html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://tianweili.github.io/#{category_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n" 
      end 
      html 
    end 
  end 
end

Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)
</code></pre>

<p>2.添加<code>source/_includes/asides/category_list.html</code>文件，内容如下：</p>

<pre><code>&lt;section&gt;
  &lt;h1&gt;文章分类&lt;/h1&gt;
  &lt;ul id="categories"&gt;
    {% category_list %}
  &lt;/ul&gt;
&lt;/section&gt;
</code></pre>

<p>3.修改<code>_config.yml</code>文件，在<code>default_asides</code>项中添加<code>asides/category_list.html</code>，值之间以逗号隔开，值的先后顺序代表了侧边栏展现的先后顺序。</p>

<pre><code>default_asides: [asides/category_list.html, asides/recent_posts.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]
</code></pre>

<p>在侧边栏还可以添加其他组件，如微博、标签云等，添加方式和上面类似。</p>

<h2>添加多说评论</h2>

<p>Octopress默认自带了DISQUS，但是对于国内不是很好用。所以在经过考虑之后选择了国内比较流行的多说评论系统。
首先要去<a href="http://duoshuo.com/">多说网站注册</a>，获取站点的<code>short_name</code>。</p>

<p>在<code>_config.yml</code>中添加</p>

<pre><code># duoshuo comments
duoshuo_comments: true
duoshuo_short_name: yourname
</code></pre>

<p>在<code>./source/_layouts/post.html</code>中的<code>disqus</code>代码</p>

<p>下方添加多说评论模块：</p>

<pre><code>{% if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true %}
  &lt;section&gt;
    &lt;h1&gt;Comments&lt;/h1&gt;
    &lt;div id="comments" aria-live="polite"&gt;{% include post/duoshuo.html %}&lt;/div&gt;
  &lt;/section&gt;
{% endif %}
</code></pre>

<p>如果你希望一些单独的页面下方也放置评论功能，那么在<code>./source/_layouts/page.html</code>中也做如上修改。
然后创建一个<code>./source/_includes/post/duoshuo.html</code>文件，内容如下：</p>

<pre><code>&lt;!-- Duoshuo Comment BEGIN --&gt;
&lt;div class="ds-thread" data-title="Octopress博客的个性化配置"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
  var duoshuoQuery = {short_name:"tianweili"};
  (function() {
    var ds = document.createElement('script');
    ds.type = 'text/javascript';ds.async = true;
    ds.src = 'http://static.duoshuo.com/embed.js';
    ds.charset = 'UTF-8';
    (document.getElementsByTagName('head')[0] 
    || document.getElementsByTagName('body')[0]).appendChild(ds);
  })();
&lt;/script&gt;
&lt;!-- Duoshuo Comment END --&gt;
</code></pre>

<p>最后再修改<code>_includes/article.html</code>文件，在</p>

<p>下方添加下面代码：</p>

<pre><code>{% if site.duoshuo_short_name and page.comments != false and post.comments != false and site.duoshuo_comments == true %}
      | &lt;a href="{% if index %}{{ root_url }}{{ post.url }}{% endif %}#comments"&gt;Comments&lt;/a&gt;
{% endif %}
</code></pre>

<h2>自动为图片添加url前缀</h2>

<p>我把图片资源都<a href="https://portal.qiniu.com/">放在了七牛云存储</a>上，写博客时候就是用七牛的外链。但是这样有几个问题：</p>

<ul>
<li>每次写博客插入图片外链地址时候都很麻烦，需要给每张图片都添加七牛外链地址url前缀；</li>
<li>如果以后更换了存储，那就麻烦了，需要依次编辑替换每个图片的url前缀</li>
</ul>


<p>现在我们就使用一种灵活的方式来配置并自动生成图片的URL前缀：</p>

<p>首先修改<code>/plugins/image_tag.rb</code>文件，在<code>@img['class'].gsub!(/"/, '') if @img['class']</code>后添加下面一行代码：</p>

<figure class='code'><figcaption><span>./plugins/image_tag.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@img</span><span class="o">[</span><span class="s1">&#39;src&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="no">Jekyll</span><span class="o">.</span><span class="n">configuration</span><span class="p">({})</span><span class="o">[</span><span class="s1">&#39;static_file_prefix&#39;</span><span class="o">]</span> <span class="o">+</span> <span class="vi">@img</span><span class="o">[</span><span class="s1">&#39;src&#39;</span><span class="o">]</span> <span class="k">if</span> <span class="vi">@img</span><span class="o">[</span><span class="s1">&#39;src&#39;</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;/&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后再修改根目录下的<code>_config.yml</code>文件，添加如下配置：</p>

<pre><code># Add url prefix for image automatically
static_file_prefix: http://7u2i08.com1.z0.glb.clouddn.com
</code></pre>

<p>最后我们在插入图片的时候要记住不能再使用Markdown语法来写了，要<a href="http://octopress.org/docs/plugins/image-tag/">使用Ocotpress自定义的IMG标签来插入图片</a>。</p>

<p>本地预览先generate后preview，这样一来插入图片就灵活方便多了。</p>

<h2>添加访客统计</h2>

<p>本博客的访客统计系统使用的是Flag Counter，所以要<a href="http://www.flagcounter.com/">先去Flag Counter获取代码</a>。</p>

<p>拿到代码后添加<code>.\source\_includes\custom\asides\flag_counter.html</code>文件：</p>

<figure class='code'><figcaption><span>flag_counter.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>访客统计<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;br/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://s07.flagcounter.com/more/2SH&quot;</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://s07.flagcounter.com/count/2SH/bg_FFFFFF/txt_000000/border_CCCCCC/columns_2/maxflags_12/viewers_0/labels_0/pageviews_1/flags_0/&quot;</span> <span class="na">alt=</span><span class="s">&quot;Flag Counter&quot;</span> <span class="na">border=</span><span class="s">&quot;0&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>将页面添加到侧边栏，在<code>./_config.yml</code>配置文件中添加下面一行配置：</p>

<pre><code>default_asides: [……, custom/asides/flag_counter.html]
</code></pre>

<p>最后添加控制开关，在<code>./_config.yml</code>配置文件中添加下面一行配置：</p>

<pre><code># Flag Counter
flag_counter: true
</code></pre>

<h2>SEO</h2>

<p><a href="http://zhanzhang.baidu.com/site/index">百度站长工具</a></p>

<p><a href="http://tongji.baidu.com/web/9700918/overview/sole?siteId=6181997">百度统计</a></p>

<p><a href="https://www.google.com/analytics/web/?authuser=0#home/a58552615w92512090p96324524/">Google Analytics</a></p>

<p><a href="https://www.google.com/webmasters/tools/home?hl=zh-CN&amp;siteUrl=http://tianweili.github.io/&amp;authuser=0">Google站长工具</a></p>

<p>作者：<a href="http://tianweili.github.com/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.com/blog/2015/01/11/setup-octopress-blog/">http://tianweili.github.com/blog/2015/01/11/setup-octopress-blog/</a></p>

<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[windows下搭建Octopress博客]]></title>
    <link href="http://tianweili.github.io/blog/2015/01/11/create-octopress-blog-in-windows/"/>
    <updated>2015-01-11T21:43:31+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/01/11/create-octopress-blog-in-windows</id>
    <content type="html"><![CDATA[<!--more-->


<p>原文链接：<a href="http://tianweili.github.io/blog/2015/01/11/create-octopress-blog-in-windows/">http://tianweili.github.io/blog/2015/01/11/create-octopress-blog-in-windows/</a></p>

<h2>将博客发布到GitHub</h2>

<p>进入博客源代码所在目录。编辑markdown后</p>

<ol>
<li>执行<code>rake new_post['my first blog']</code>来生成一篇博文；</li>
<li>执行<code>rake generate</code>生成博客网页；</li>
<li>执行<code>rake preview</code>后在本地输入&lt;localhost:4000>来预览博客；</li>
<li>执行<code>rake setup_github_pages</code>命令后，按照提示输入对应的GitHub的repository地址：<code>git@github.com:TianweiLi/tianweili.github.com.git</code>；（不执行这一步会可能会报<code>No such file or directory - _deploy</code>错误）</li>
<li>执行<code>rake deploy</code>将博客站点发布到GitHub<code>master</code>分支上，这样就可以访问博客了（这一步就是把public目录下文件push到master分支上）；</li>
<li>将修改后的octopress源码push到GitHub的<code>source</code>分支上：</li>
</ol>


<p>依次执行下面命令</p>

<pre><code>git add .
git commit -m 'build octopress blog'
git push origin source
</code></pre>

<h2>换一台电脑写博客</h2>

<p>如果需要在另一台电脑写博客并提交上去，那么可以采用下面步骤来实现。</p>

<p>先要找到GitHub的repository url，然后clone source分支到本地：</p>

<pre><code>git clone -b source git@github.com:TianweiLi/tianweili.github.com.git octopress
</code></pre>

<p>然后clone master分支到本地：</p>

<pre><code>cd octopress
git clone git@github.com:TianweiLi/tianweili.github.com.git _deploy
</code></pre>

<p>然后进行一些相关依赖的安装，依次执行下面命令：</p>

<pre><code>gem install bundler
bundle install
rake install
rake setup_github_pages
</code></pre>

<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/01/11/create-octopress-blog-in-windows/">http://tianweili.github.io/blog/2015/01/11/create-octopress-blog-in-windows/</a></p>

<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一篇博文]]></title>
    <link href="http://tianweili.github.io/blog/2015/01/10/my-first-blog/"/>
    <updated>2015-01-10T01:28:08+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/01/10/my-first-blog</id>
    <content type="html"><![CDATA[<p>新的一年，又一个新的博客！</p>

<p>IT干了几年，博客社区也换了几次。至今没有遇到特别中意的社区，<a href="http://www.cnblogs.com/hellojava/">最近一次用得比较久的博客就是博客园了</a>，在博客园写博客给我的感觉相对是比较好的，但是仍然不能让我满意。于是我动起了自己搭建博客的念头，多方搜索比较下选择使用<a href="http://octopress.org/">Octopress</a>+<a href="https://pages.github.com/">GitHub Pages</a>来搭建自己的个人博客。</p>

<!--more-->


<p>原文链接：<a href="http://tianweili.github.io/blog/2015/01/10/my-first-blog/">http://tianweili.github.io/blog/2015/01/10/my-first-blog/</a></p>

<h2>为什么不再使用博客园写博客</h2>

<p><strong>1.博客园氛围以.NET技术社区为主</strong></p>

<p>当然其他语言技术的博客也有，但几乎.NET要占去了一半甚至更多。这对于我一个做Java，做Python，做Perl……却唯独没做.NET的人来说略微有些显得“格格不入”——上面其他语言技术的博客太少了，尤其是高质量的更少！</p>

<p>这样带来的后果就是与你“志同道合”能够互相讨论学习的人比较少，当然如果你主要是做.NET的那还是值得你考虑加入的。</p>

<p><strong>2.能进行个性化定制的项目有点少</strong></p>

<p>不过坦白来说，博客园至少是主流几个技术社区能够进行个性化定制最多的技术博客社区了，否则我也不会最后用这一个以.NET为主的技术社区。</p>

<p>但是我仍然觉得还不够，而且有诸多限制，很多想要的功能加不上，很多不想要的功能硬是塞给你，又去除不掉。</p>

<p><strong>3.在上面写博客有诸多不爽</strong></p>

<p>首先是写博客比较麻烦，各种调样式，而我又是对排版格式等有点追求的人，（但是我不是处女座，:)。）所以最后导致我写一篇博客花在调样式上面的时间比较多，而且很不方便。</p>

<p>其次是代码样式格式着色都不是很喜欢，虽然我自己用CSS改了一下，但仍然觉得很丑。</p>

<p><strong>4.上面高质量的博客很少</strong></p>

<p>感觉现在首页上质量较高的博客变得越来越少了，非.NET的更少，待下去也没什么意义。所以，我走了……</p>

<p><strong>5.博客风格样式不好看</strong></p>

<p>风格样式不好看，自己能修改的地方又不多。我本人是喜欢比较简洁一点的风格，写个博客嘛，不至于那么多花花绿绿的，所以我一进入一些特别花哨的博客就看得眼花缭乱，哈哈。</p>

<p>So，只有自己建个博客来折腾咯。</p>

<p>最后，不过我仍然很感谢<a href="http://www.cnblogs.com/hellojava/">在博客园的那一段时光</a>，在博客园写博客的那一段日子也让自己进不了不少。（虽然还有很多的博文都存放在草稿里没有发布出来，那就让它继续躺在草稿箱里吧，-_-）至少博客园的博客部分是我所见过几个主流社区里最好的，只是感觉还不太适合自己而已。</p>

<h2>为什么选择Octopress来写博客</h2>

<p>基本上博客园的诸多不爽在这里都得到了解决，-_-!</p>

<p><strong>1.可以由自己随意定制</strong></p>

<p>当然也少不了折腾，查资料，配置，各种排查错误等等等的，也耗费了不少的时间和精力，并且由于国外被墙的缘故，还要删掉很多请求来进行优化访问速度。但是仍然感觉很爽，学习新知识，排查解决BUG后的成就感也挺大的。</p>

<p><strong>2.博客风格样式都比较喜欢</strong></p>

<p>我一直比较喜欢简洁素朴一些的博客风格。既然是博客，就让人注意到文章的内容，而不是被吸引到博客的皮肤和各种特效上。而且自己搭建的博客风格可以随意修改定制。</p>

<p>而且Octopress<a href="http://pygments.org/">使用Pygments来进行代码着色</a>，代码风格样式也是自己比较喜欢的，比如：</p>

<figure class='code'><figcaption><span>Sample.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">ltw</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello world!&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>并且Octopress搭建的博客无论是在PC端还是移动端，它的页面兼容性都比较好哦。</p>

<p><strong>3.写博客比较爽</strong></p>

<p>Octopress用的是Markdown来写博客，这正合自己的心意。用<a href="http://wowubuntu.com/markdown/">Markdown语法</a>写起来比较快，使用文本格式编写和存储，简洁轻便，还可以很方便得进行本地预览。</p>

<p>并且文章的发布也很方便，<code>generate</code>后一条命令就<code>deploy</code>到GitHub上去了。</p>

<p><strong>4.搭建过程比较折腾人</strong></p>

<p>因为Octopress使用Ruby来写的，并且用到了Python的Pygments插件，还用到了Git来进行版本管理，使用GitHub Pages服务，博客和源代码提交到了GitHub来存储，图片又使用的七牛云存储，评论使用的多说评论系统，博客各方面的修改和个性化改动，还有被墙的缘故要进行访问优化等等。</p>

<p>总之博客搭建过程中会遇到各种问题，滋味那叫一个酸爽。当然也有人一次成功，那即使运气了。不过遇到问题，解决问题也学到了不少东西。后面我会把一部分博客配置和遇到各种问题的解决方式写成博客记录和分享。</p>

<h2>最后</h2>

<p>新的一年，开通了新的博客！迎来了一个好的开端。接下来我就使用这个博客来记录和分享自己的学习和生活经历吧！</p>

<hr />

<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/01/10/my-first-blog/">http://tianweili.github.io/blog/2015/01/10/my-first-blog/</a></p>

<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[骑车去西藏—第6天—折多山，折磨人多的山]]></title>
    <link href="http://tianweili.github.io/blog/2013/07/17/cycling-to-tibet-6/"/>
    <updated>2013-07-17T18:07:54+08:00</updated>
    <id>http://tianweili.github.io/blog/2013/07/17/cycling-to-tibet-6</id>
    <content type="html"><![CDATA[<!--more-->


<p>原文链接：</p>

<p><a href="http://tianweili.github.io/blog/2013/07/17/cycling-to-tibet-6/">http://tianweili.github.io/blog/2013/07/17/cycling-to-tibet-6/</a></p>

<h2>前记</h2>

<p>行程：康定（海拔2395）—折多塘（海拔3222）—折多山（海拔4298）—新都桥前20公里（海拔3630）</p>

<p>里程：58KM</p>

<h2>山在我脚下，我也在山中。</h2>

<p>我感觉今天是我骑行以来最精彩最难忘的一天，一天之内尝遍了酸甜苦辣。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-169.jpg"></p>

<h2>离开康定</h2>

<p>依旧是天蒙蒙亮，在宋和formes还在睡梦中，七点钟我就独自一人先出发了，挑战折多山！</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-170.jpg"></p>

<p>先温习下攻略：</p>

<blockquote><p>今天因为途中无法找到合适的饭店解决午餐，所以请提前准备干粮。从今天开始几乎每天都要翻山了！另外，今天的里程碑也有点乱，不必太在意。虽然路程不远，只有区区的78km，但因为我们会爬藏区的第一座山－－折多山（海拔4298米），海拔上升大，很累，就可能让你感觉这是你骑行以来最难的一天。但是冲上垭口后，你会发现山那边是非常壮观的风景。</p></blockquote>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-171.jpg"></p>

<p>在康定城里，我在路边整理装备的时候碰到个藏族老奶奶，聊了一会，她知道我是去西藏的，不停的跟我说要注意安全，看到车靠边骑云云……唠叨的感觉让人很温暖。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-172.jpg"></p>

<p>大清早又遇到军队的车队，为了不想吃汽车尾气，停下来等它们都过完，经过我的时候，有的战士会对着你喊加油。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-173.jpg"></p>

<p>还没出城，就明显感觉到坡度已经很陡了。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-174.jpg"></p>

<p>依旧是蓝天白云，看得久了都会让人产生审美疲劳啊。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-175.jpg"></p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-176.jpg"></p>

<p>毒辣的太阳又出来了，温度马上飙到40°。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-177.jpg"></p>

<p>formes接山上的山泉喝，而我都是问路边的人家借的白开水，一个水壶两个脉动瓶子，够撑个两小时。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-178.jpg"></p>

<p>上午九十点钟的样子，艰难的骑到了折多塘，在这里等宋和formes一起去爬折多山。本来我们今天计划是从康定到折多塘的，然后美美的泡上半天温泉，明天再翻折多山。后来看这么早就到了索性直接翻过折多山吧。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-179.jpg"></p>

<p>远处的山已经完全被白云盖住了。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-180.jpg"></p>

<h2>挑战折多山</h2>

<p>抬头，看着前面蜿蜒盘旋的上坡，崩溃！低头，看着走过的道路，自豪。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-181.jpg"></p>

<p>来自己加把劲</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-182.jpg"></p>

<p>今天全程推一大程，骑一小程，哈哈。都说折多山就是折磨人多的山，但是我怎么没感觉到呢，估计是自己已经是吃苦无底线了，苦中找乐，心态最重要。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-183.jpg"></p>

<p>悬崖之上，眺望远山。宋说我和formes为了一个镜头，连命都不要了。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-184.jpg"></p>

<p>formes拿着摄影机到处摄像</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-185.jpg"></p>

<p>在路上，碰到个骑友，给了宋一些盐，给了我一些缓解高原反应的药（不过后来都给宋了）。我说给他照一张，他说那他岂不是成蒙面侠了，哈哈。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-186.jpg"></p>

<p>漫山遍野的牦牛，星星点点在高原上，仿佛一幅很美的图画。牦牛比普通的牛要小，浑身都是长毛保暖，头上长长的尖角。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-187.jpg"></p>

<p>来个特写，牦牛很怕人，稍一靠近它就跑远了，我还没吃过牦牛肉呢。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-188.jpg"></p>

<p>高原上除了牦牛，还有马群</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-189.jpg"></p>

<p>草多马也肥啊</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-190.jpg"></p>

<p>骑着骑着，他们俩就落在后面了。宋这时候有了高原反应，据他说感觉是头晕浑身无力，胸闷，推两步车就累直喘气。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-191.jpg"></p>

<p>36公里的上坡，什么时候是个头！今天至少有三分之二的骑友选择了搭车，路上很少看到骑友了，远远没有从泸定到康定那条路上看的的人多。一路上不时有车顶载满自行车的面包车从身旁呼啸而过，不少人从车窗里伸出大拇指喊着兄弟加油！</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-192.jpg"></p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-193.jpg"></p>

<p>又累又饿又渴，不管了，把车子一停下，一屁股坐路边就掏出大饼来。昨天康定买的锅魁已经又冷又硬了，但还是吃的香喷喷的。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-194.jpg"></p>

<p>路边随处可见别人乱扔的红牛罐子。嘿嘿，送给你。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-195.jpg"></p>

<p>随处可见的佛塔自己也能造</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-196.jpg"></p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-197.jpg"></p>

<p>回过头去，看着山下盘盘的路，不见了宋和formes的影子，看来他们在后面还远没有跟上来。此时已经三四点了，看来我们在路上走走停停耽误了太多的时间，此时我开始有点着急了。我给他们打电话，让他们步伐加快些，因为即使到了山顶，后面还有几十公里下坡呢，天黑了太危险！</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-198.jpg"></p>

<p>有辆轿车后轮爆胎了，还晃晃荡荡的往下开。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-199.jpg"></p>

<p>就在自己爬坡爬的叫天天不应叫地地不灵的时候，抬头一看，山顶的彩旗在飘荡着，仿佛在像我招手，要到山顶了！我快要喊出来，尽管没剩多少体力了，但还是手舞足蹈兴奋的推着车向山顶跑去。每次快到山顶都能给我惊喜！</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-200.jpg"></p>

<p>登上折多山山顶，胜利了！海拔4298米！我马上给爸爸打电话，因为下着雨，手机放在塑料袋里的，跟爸爸分享着胜利的喜悦！给肖青打电话，果然不出我所料，没人接。</p>

<p>此时虽然站在海拔四千多米的折多山上，但是传说中的高原反应却一点儿都没有，不过海拔高的地方空气确实很稀薄，很多人走不了几步就喘的。平时骑车上个几百米的坡没事，但是你在海拔几千米的山上试试，根本完全不是一回事。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-201.jpg"></p>

<p>此时五点钟了，山顶又下雨又是雾的，能见度不超过4米，看了下温度计，此时竟然只有5°，而我还穿着单衣单裤！冻的我瑟瑟发抖，山顶有户藏族的棚子，他们在那卖一些藏民特产和吃的，我赶忙进去躲起来。一小碗酸辣粉就要10块钱，没舍得吃。还是啃我的冷大饼，水壶里的水又冰又凉。从驮包里把护膝和雨衣穿上，此时手已经完全冻僵不听使唤了。</p>

<p>等了半小时，宋和formes也陆续赶上了山顶。formes也冻的不停的来回跑着步，来不及多享受一会胜利的喜悦，山顶我是一刻都不想多呆了！他们也都赶快换了下山的装备，赶紧离开这个鬼地方，再多呆一会恐怕我就要冻死山顶了。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-202.jpg"></p>

<h2>下山比上山还苦逼</h2>

<p>就这样，在大风大雨大雾中，我们颤颤巍巍的下山了。formes在车尾上系了个闪光灯，不停地问我能不能看得到，我说能，我就跟在你后面两米的地方能看不到吗，不过五米外能不能看到我就不知道了，嘿嘿。</p>

<p>下山我们根本不敢下的太快，因为雾太大了，前方四五米都一片白，冻僵的双手还是紧紧捏着刹车，如果此时对面来辆汽车，恐怕就得来个亲密接触了。</p>

<p>更糟糕的是还下着大雨刮着大风，高原的大风果然不是盖的，如果风是从正面刮来的，那么即便是陡下坡，车子基本都走不了的需要蹬踏。我最怕风从侧面刮，整个人带车子都给往路另一边推，根本无法靠着路边走，非常危险。</p>

<p>大概下了十几分钟六七公里的样子，骑在前面的formes突然停了下来，原来他突然想起来在山顶他换衣服的时候，腰包落在山顶忘记拿了！包里面有摄影机身份证银行卡和现金，几乎最重要的东西都在里面。此时再骑车上去找已经不现实了，于是他就准备在路边找搭车上去，宋在那看车，我继续下山先去新都桥找住宿的地方。</p>

<p>下山的时候，我冻的已经不行了，也顾不上危险了，就想赶快下山离开这里，我几乎是一路嚎叫着下了山。下了山我以为应该会好了吧，一看温度计仍然还是六七度，原来即便下了山此时海拔仍然有接近四千，还是一样冷。</p>

<p>雨越下越大，穿着的单裤完全湿透了，没有穿雨裤真是失策啊，两只脚也全都浸泡在水里。这时候大风全部是迎面刮来的，戴着面巾全部被雨湿透了，让人喘不过气来，把面巾扯下来，迎面的雨点又打在脸上生疼。在大风大雨下，我已经冻的浑身发抖，牙齿打颤，还是勉强的蹬踏着，我这辈子都没这么冷过。想着自己真是花钱来买罪受啊，恨不得把车子一甩，坐在地上大哭一场。</p>

<h2>借宿藏民家</h2>

<p>路上很冷清一个人也没有，忍耐着骑着骑着两边渐渐的开始偶尔看到零零散散的几间房子了，应该就是藏民住的房子吧。这时候前面遇到了三个骑友，劝我一起找个地方借宿一晚。我一看码表，此时七点钟，距离新都桥还有二十多公里，要是在平时赶到新都桥肯定没问题，但是这种恶劣环境下肯定是到不了了。于是我们四个找了户藏民家借宿了，有个很好心的藏民老爷爷收留了我们。照片是我后来走的时候补照的，最远处拐角的那家就是我借宿的藏民家。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-203.jpg"></p>

<p>在藏族老爷爷带领下，进了院子里面，门口栓的藏獒非常凶，即使被链子拴着但还是让人不放心。进了屋里条件很简陋，两层的房子，下面一层养着十几头大大小小的牦牛，沿着木质的楼梯上了楼。老爷爷给我们生了火，我们赶快把这一身湿透了的行头都给脱了，我想去托包里掏出几间干衣服，却发现即使有了雨罩，却还是罩不住这么大的雨，里面的衣服也都湿了，但是不管那么多了，总比身上全都湿透了的衣服强吧。</p>

<p>家里就只有三个人，老爷爷、一个女主人（应该不是老爷爷的女儿就是儿媳）、一个小姑娘（女主人的孩子）。老爷爷问我们吃饭了没，然后就给我们煮饭去了，反正那又冷又干的大饼我是不想啃了。</p>

<p>喝了点开水，吃了些感冒药预防感冒，再烤着火，渐渐的整个人慢慢恢复过来。我们四个人围坐在火炉边攀谈起来，才知道他们是一个队的，从湖北武汉过来的同学，今年刚毕业。其中一个人高原反应特别厉害，头痛头晕胸闷的，还呕吐，腿肿的厉害。听说他今天爬折多山的时候走几步就累得不行了，真不知道他是怎么坚持到这里来的，真的是这样，即便是再好的体力，摊上了高反，那一切都是白瞎。另两个人问他明天能继续走不，他说实在是不行了，想休息一天。另两个人对他明显不满的样子，埋怨他拖累了大家耽误了行程。</p>

<p>我给宋和formes打电话，他们也已经下山了，formes的腰包终究还是没能找回来，是落在山顶被没有素质贪图小便宜的人给捡走了，他整个人特别懊恼悔恨的样子。听宋说他们也准备在附近找个旅馆住了，刚才他们找的一个藏民家，但是嫌环境条件不好，就没住。我说现在这种情形下就别太挑剔了，他们就继续赶路找旅馆。</p>

<p>回到火炉边，大家一起烤着火吃着热饭，感觉满足得不能再满足了，老爷爷煮了一大锅肉让随便加，又冷又饿，我也不客气了，直接吃到想呕。我们让老爷爷一家人也一起吃，老爷爷让我们先吃，原来他是怕饭不够我们不够吃，真是太好了，在我们再三劝下他们一家也开始吃了。</p>

<p>大家一起边吃饭边聊天，老爷爷的汉语讲不好，需要仔细讲加手势的，女主人更是完全不懂汉语，不过小女儿因为正在上学（估计小学）倒是会讲。于是我们就叫她当翻译，不过她好像因为我们到来打扰有点不满，嘟着嘴一脸蛮不情愿的充当我们之间交流的桥梁。藏语除了扎西德勒我就完全不懂了，感觉藏语说出来特别粗犷的感觉，有点像吵架，跟重庆话差不多。</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/cycling-to-tibet/cycling-to-tibet-204.jpg"></p>

<p>在他家借宿我们都感觉过意不去，多少要给些费用的，老爷爷非常好说话，我们就一人给他20块住宿费和5块钱吃饭费用。后来我跟宋和formes说起的时候还受到了他们的鄙视，说吃那么好怎么好意思就给这么点。老爷爷不停的劝我们多吃些，最后我们都是吃的撑的不能再撑了。反正藏族人民给我的感觉就是特别淳朴，连我这种这么单纯的人相比之下都显得那么老奸巨猾了哈哈。</p>

<p>夜里睡觉的时候，女主人给我们收拾出来很多干净的被子，他们三个骑友在大厅的三张床上睡，大厅里睡不下，老爷爷就让我进他们主卧睡，让我睡在床上，直接把他们赶到打地铺。我感觉过意不去，但是他坚持让我睡床上，我就只好把睡袋铺好，上面也盖了层被子准备睡了，睡个暖和的好觉真好。</p>

<p>就在我刚躺下准备睡觉的时候，女主人刚去楼下挤完了牦牛奶回来，突然扑通一声跪下了，好大的声响，吓我一跳。嘴里念念有词，然后整个身体伏在地上磕头，原来是对着桌上供着的活佛拜祭呢，来回做了三次，然后就搂着小女儿躺下了。我也躺在睡袋里，听着他们一家三口的说着话，虽然藏语我听不懂，但是却有很温暖的感觉。</p>

<p>夜里睡觉的时候，由于我喜欢蹬被子，夜里经常醒来去整理被子。每当这时候，老爷爷都会马上醒来，开着手电筒朝我这个方向照着，方便我能看清整理被子。就这样夜里反复好几次，搞到我最后都不好意思了，后来被子歪了，我也不好意思再去整理，怕惊扰到老爷爷睡觉，但是心却是被暖着了……</p>

<h2>骑行日志</h2>

<ul>
<li><a href="http://tianweili.github.io/blog/2013/03/11/cycling-to-tibet-0/">骑车去西藏—第0天—成都印象</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/12/cycling-to-tibet-1/">骑车去西藏—第1天—出师不利</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/13/cycling-to-tibet-2/">骑车去西藏—第2天—牛刀小试</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/14/cycling-to-tibet-3/">骑车去西藏—第3天—爬上了二郎山，我就是二郎神</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/15/cycling-to-tibet-4/">骑车去西藏—第4天—泸定-康定，坚定的信心</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/16/cycling-to-tibet-5/">骑车去西藏—第5天—跑马溜溜的山上，情歌之城，康定</a></li>
<li><a href="http://tianweili.github.io/blog/2013/07/17/cycling-to-tibet-6/">骑车去西藏—第6天—折多山，折磨人多的山</a></li>
</ul>


<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2013/07/17/cycling-to-tibet-6/">http://tianweili.github.io/blog/2013/07/17/cycling-to-tibet-6/</a></p>

<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
  </entry>
  
</feed>
