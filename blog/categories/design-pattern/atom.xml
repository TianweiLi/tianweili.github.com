<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Design-pattern | 李天炜]]></title>
  <link href="http://tianweili.github.io/blog/categories/design-pattern/atom.xml" rel="self"/>
  <link href="http://tianweili.github.io/"/>
  <updated>2015-02-16T11:20:48+08:00</updated>
  <id>http://tianweili.github.io/</id>
  <author>
    <name><![CDATA[李天炜 litianwei2013[AT]gmail.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计模式六大原则]]></title>
    <link href="http://tianweili.github.io/blog/2015/02/01/the-six-principle-of-design-patterns/"/>
    <updated>2015-02-01T21:44:42+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/02/01/the-six-principle-of-design-patterns</id>
    <content type="html"><![CDATA[<p>本文主要讲述了设计模式六大原则：</p>

<ul>
  <li><a href="#1">单一职责原则</a></li>
  <li><a href="#2">里氏替换原则</a></li>
  <li><a href="#3">依赖倒置原则</a></li>
  <li><a href="#4">接口隔离原则</a></li>
</ul>

<!--more-->

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/01/the-six-principle-of-design-patterns/">http://tianweili.github.io/blog/2015/02/01/the-six-principle-of-design-patterns/</a></p>

<p>据说设计模式是区别程序员与软件设计师的标准之一。其实在编程学习初期就接触过设计模式，但是都没有写过多少代码是领悟不到设计模式真正的威力和必要性的。现在自认为也实践过不少段时间了，是时候总结一下设计模式。不知谁说过没有写过十万行以上代码别谈设计模式，虽然略显夸张，但是还是很有道理的。只有自己亲身经历过一些编写设计垃圾代码，才会深刻理解设计模式真正的意义所在。设计模式都是前辈大牛们在无数次实践中总结出来的，我辈自然要站在巨人肩膀上，实行拿来主义并消化使用之。</p>

<h1 id="1">单一职责原则</h1>

<h2 id="section">1、问题的由来</h2>

<p>初学者在编程的时候可能一开始会有这样的经历，使用一个类来实现很多的功能，新添加的甚至不相关的功能都放在一个类里来实现，煮成了一锅大杂烩，往往使得某个类包罗万象，无所不能。可能刚开始实现功能比较简单，这样做不会引发什么特别大的问题。但是随着项目复杂度的提升，各种不相关的实现代码耦合在一起，一旦有功能的更改或增删，修改的代码很可能会导致其他功能的正常运行。这种编程方式显然是不可取的，也就是违背了所谓的单一职责原则。</p>

<h2 id="section-1">2、什么是单一职责原则？</h2>

<p>单一职责原则的英文名称是Single Responsibility Principle，简称是SRP。SRP原则的解释是：There should never be more than one reason for a class to change。定义很简单，即不能存在多于一个导致类变更的原因。简单的说就是一个类只负责一项职责。</p>

<p>在软件设计中，秉承着“高内聚，低耦合”的思想，让一个类仅负责一项职责，如果一个类有多于一项的职责，那么就代表这个类耦合性变高了，这些职责耦合在了一起，这是比较脆弱的设计。因为一旦某一项职责发生了改变，需要去更改代码，那么有可能会引起其他职责改变。所谓牵一发而动全身，这显然是我们所不愿意看到的，所以我们会把这个类分拆开来，由两个类来分别维护这两个职责，这样当一个职责发生改变，需要修改时，不会影响到另一个职责。</p>

<p>需要说明的是单一职责原则不只是面向对象编程思想所特有的，只要是模块化的程序设计，都适用单一职责原则。</p>

<h2 id="section-2">3、关于职责</h2>

<p>看到上面所述，或许有人会说这么简单谁不知道。的确，很多程序员即使没有学过设计模式，不知道单一职责原则，在编程的时候，在设计软件时也会有意识的遵循这一原则。因为谁都不希望修改一个地方会引发另外一个地方出现问题，而避免这种问题的最好处理方式就是设计时遵循单一职责原则。但是，我认为单一职责原则的难点是在于职责范围的认定。关于职责的认定是一个仁者见仁智者见智的话题，在实际开发中也会引起程序员之间的争论。有的人认为这些功能方法的实现目的很相似，必须要放在一个类中，有的人认为方法差别很大，必须要分拆成多个类，在多个类里面来实现。</p>

<p>还有职责的扩散问题。软件一开发完上线后并不是一成不变的，随着社会的进步，需求的变更，软件的功能可能要做些维护更改，有时候会遇到职责扩散。所谓的职责扩散就是因为某种原因，职责R被分化为粒度更细的R1和R2。</p>

<p>比如类C只负责一个职责R，这是符合单一职责原则的。但是后来需要把职责R拆分为职责R1和职责R2，那么这时候是否需要死守着单一职责原则，把类C也拆开为C1和C2。接着如果R1又需要细化为R11和R12呢……</p>

<p>我们必须要意识到，一味的遵守单一职责原则，不停的分拆类所付出的开销是很大的。这时候就涉及到平衡的问题，平衡单一职责原则与修改造成的开销。我的观点是如果一个方法逻辑不复杂的情况下，可以修改方法实现，否则要拆分为两个方法，遵循方法级别的单一职责原则；如果一个类方法不多的情况下，可以只增加方法，而不用分拆为多个类，否则要拆分为多个类，遵循类级别的单一职责原则。</p>

<h2 id="section-3">4、遵循单一职责原则的优点</h2>

<ul>
  <li>降低了类的复杂度。一个类只负责一项职责比负责多项职责要简单得多。</li>
  <li>提高了代码的可读性。一个类简单了，可读性自然就提高了。</li>
  <li>提高了系统的可维护性。代码的可读性高了，并且修改一项职责对其他职责影响降低了，可维护性自然就提高了。</li>
  <li>变更引起的风险变低了。单一职责最大的优点就是修改一个功能，对其他功能的影响显著降低。</li>
</ul>

<h1 id="2">里氏替换原则</h1>

<h2 id="section-4">1、问题的由来</h2>

<p>我们都知道面向对象有三大特性：封装、继承、多态。所以我们在实际开发过程中，子类在继承父类后，根据多态的特性，可能是图一时方便，经常任意重写父类的方法，那么这种方式会大大增加代码出问题的几率。比如下面场景：类C实现了某项功能F1。现在需要对功能F1作修改扩展，将功能F1扩展为F，其中F由原有的功能F1和新功能F2组成。新功能F由类C的子类C1来完成，则子类C1在完成功能F的同时，有可能会导致类C的原功能F1发生故障。这时候里氏替换原则就闪亮登场了。</p>

<h2 id="section-5">2、什么是里氏替换原则</h2>

<p>前面说过的单一职责原则，从字面意思就很好理解，但是里氏替换原则就有点让人摸不着头脑。查过资料后发现原来这项原则最早是在1988年，由麻省理工学院一位姓里的女士（Liskov）提出来的。</p>

<p>英文缩写：LSP (Liskov Substitution Principle)。</p>

<p>严格的定义：如果对每一个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都换成o2时，程序P的行为没有变化，那么类型T2是类型T1的子类型。 </p>

<p>通俗的定义：所有引用基类的地方必须能透明地使用其子类的对象。</p>

<p>更通俗的定义：子类可以扩展父类的功能，但不能改变父类原有的功能。</p>

<p>代码示例</p>

<p>&#8220;`java
//抽象父类电脑
public abstract class Computer {
    public abstract void use();
}</p>

<p>class IBM extends Computer{
    @Override
    public void use() {
        System.out.println(“use IBM Computer.”);
    }
}</p>

<p>class HP extends Computer{
    @Override
    public void use() {
        System.out.println(“use HP Computer.”);
    }
}</p>

<p>public class Client{
    public static void main(String[] args) {
        Computer ibm = new IBM();
        Computer hp = new HP();//引用基类的地方能透明地使用其子类的对象。</p>

<pre><code>    ibm.use();
    hp.use();
} } ```
</code></pre>

<h2 id="section-6">3、四层含义</h2>

<p>里氏替换原则包含以下4层含义：</p>

<ul>
  <li>子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象方法。</li>
  <li>子类中可以增加自己特有的方法。</li>
  <li>当子类覆盖或实现父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。</li>
  <li>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。
　　
现在我们可以对以上四层含义逐个讲解。</li>
</ul>

<h3 id="section-7">子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象方法</h3>

<p>在我们做系统设计时，经常会设计接口或抽象类，然后由子类来实现抽象方法，这里使用的其实就是里氏替换原则。子类可以实现父类的抽象方法很好理解，事实上，子类也必须完全实现父类的抽象方法，哪怕写一个空方法，否则会编译报错。</p>

<p>里氏替换原则的关键点在于不能覆盖父类的非抽象方法。父类中凡是已经实现好的方法，实际上是在设定一系列的规范和契约，虽然它不强制要求所有的子类必须遵从这些规范，但是如果子类对这些非抽象方法任意修改，就会对整个继承体系造成破坏。而里氏替换原则就是表达了这一层含义。</p>

<p>在面向对象的设计思想中，继承这一特性为系统的设计带来了极大的便利性，但是由之而来的也潜在着一些风险。就像开篇所提到的那一场景一样，对于那种情况最好遵循里氏替换原则，类C1继承类C时，可以添加新方法完成新增功能，尽量不要重写父类C的方法。否则可能带来难以预料的风险，比如下面一个简单的例子还原开篇的场景：</p>

<p>&#8220;`java
public class C {
    public int func(int a, int b){
        return a+b;
    }
}</p>

<p>public class C1 extends C{
    @Override
    public int func(int a, int b) {
        return a-b;
    }
}</p>

<p>public class Client{
    public static void main(String[] args) {
        C c = new C1();
        System.out.println(“2+1=” + c.func(2, 1));
    }
}
&#8220;`</p>

<p>运行结果：2+1=1</p>

<p>上面的运行结果明显是错误的。类C1继承C，后来需要增加新功能，类C1并没有新写一个方法，而是直接重写了父类C的func方法，违背里氏替换原则，引用父类的地方并不能透明的使用子类的对象，导致运行结果出错。</p>

<h3 id="section-8">子类中可以增加自己特有的方法</h3>

<p>在继承父类属性和方法的同时，每个子类也都可以有自己的个性，在父类的基础上扩展自己的功能。前面其实已经提到，当功能扩展时，子类尽量不要重写父类的方法，而是另写一个方法，所以对上面的代码加以更改，使其符合里氏替换原则，代码如下：</p>

<p>&#8220;`java
public class C {
    public int func(int a, int b){
        return a+b;
    }
}</p>

<p>public class C1 extends C{
    public int func2(int a, int b) {
        return a-b;
    }
}</p>

<p>public class Client{
    public static void main(String[] args) {
        C1 c = new C1();
        System.out.println(“2-1=” + c.func2(2, 1));
    }
}
&#8220;`
运行结果：2-1=1</p>

<h3 id="section-9">当子类覆盖或实现父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松</h3>

<p>代码示例</p>

<p>&#8220;`java
import java.util.HashMap;
public class Father {
    public void func(HashMap m){
        System.out.println(“执行父类…”);
    }
}</p>

<p>import java.util.Map;
public class Son extends Father{
    public void func(Map m){//方法的形参比父类的更宽松
        System.out.println(“执行子类…”);
    }
}</p>

<p>import java.util.HashMap;
public class Client{
    public static void main(String[] args) {
        Father f = new Son();//引用基类的地方能透明地使用其子类的对象。
        HashMap h = new HashMap();
        f.func(h);
    }
}
&#8220;`
运行结果：执行父类…</p>

<p>注意Son类的func方法前面是不能加@Override注解的，因为否则会编译提示报错，因为这并不是重写（Override），而是重载（Overload），因为方法的输入参数不同。重写和重载的区别在Java面向对象详解一文中已作解释，此处不再赘述。</p>

<h3 id="section-10">当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格</h3>

<p>代码示例：</p>

<p>&#8220;`java
import java.util.Map;
public abstract class Father {
    public abstract Map func();
}</p>

<p>import java.util.HashMap;
public class Son extends Father{</p>

<pre><code>@Override
public HashMap func(){//方法的返回值比父类的更严格
    HashMap h = new HashMap();
    h.put("h", "执行子类...");
    return h;
} }
</code></pre>

<p>public class Client{
    public static void main(String[] args) {
        Father f = new Son();//引用基类的地方能透明地使用其子类的对象。
        System.out.println(f.func());
    }
}
&#8220;`
执行结果：{h=执行子类…}</p>

<h2 id="section-11">4、总结</h2>

<p>继承作为面向对象三大特性之一，在给程序设计带来巨大便利的同时，也带来了一些弊端，它增加了对象之间的耦合性。因此在系统设计时，遵循里氏替换原则，尽量避免子类重写父类的方法，可以有效降低代码出错的可能性。</p>

<h1 id="3">依赖倒置原则</h1>

<h2 id="section-12">1、问题由来</h2>

<p>类A直接依赖于类B，假如要将类A修改为依赖类C，则必须通过修改类A的代码来达成。这种场景下，类A一般是高层模块，负责复杂的业务逻辑。类B和C是底层模块，负责基本的原子操作。假如修改类A，将会给程序带来不必要的风险。而遵循依赖倒置原则的程序设计可以解决这一问题。</p>

<h2 id="section-13">2、什么是依赖倒置原则</h2>

<p>英文缩写DIP（Dependence Inversion Principle）。</p>

<p>原始定义：High level modules should not depend upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.</p>

<p>翻译过来就三层含义：</p>

<ul>
  <li>高层模块不应该依赖低层模块，两者都应该依赖其抽象；</li>
  <li>抽象不应该依赖细节；</li>
  <li>细节应该依赖抽象。</li>
</ul>

<p>抽象：即抽象类或接口，两者是不能够实例化的。</p>

<p>细节：即具体的实现类，实现接口或者继承抽象类所产生的类，两者可以通过关键字new直接被实例化。</p>

<p>现在我们来通过实例还原开篇问题的场景，以便更好的来理解。下面代码描述了一个简单的场景，Jim作为人有吃的方法，苹果有取得自己名字的方法，然后实现Jim去吃苹果。</p>

<p>代码如下：</p>

<p><code>java
//具体Jim人类
public class Jim {
    public void eat(Apple apple){
        System.out.println("Jim eat " + apple.getName());
    }
}
//具体苹果类
public class Apple {
    public String getName(){
        return "apple";
    }
}
public class Client {
    public static void main(String[] args) {
        Jim jim = new Jim();
        Apple apple = new Apple();
        jim.eat(apple);
    }
}
</code>
运行结果：Jim eat apple</p>

<p>上面代码看起来比较简单，但其实是一个非常脆弱的设计。现在Jim可以吃苹果了，但是不能只吃苹果而不吃别的水果啊，这样下去肯定会造成营养失衡。现在想让Jim吃香蕉了（好像香蕉里含钾元素比较多，吃点比较有益），突然发现Jim是吃不了香蕉的，那怎么办呢？看来只有修改代码了啊，由于上面代码中Jim类依赖于Apple类，所以导致不得不去改动Jim类里面的代码。那如果下次Jim又要吃别的水果了呢？继续修改代码？这种处理方式显然是不可取的，频繁修改会带来很大的系统风险，改着改着可能就发现Jim不会吃水果了。</p>

<p>上面的代码之所以会出现上述难堪的问题，就是因为Jim类依赖于Apple类，两者是紧耦合的关系，其导致的结果就是系统的可维护性大大降低。要增加香蕉类却要去修改Jim类代码，这是不可忍受的，你改你的代码为什么要动我的啊，显然Jim不乐意了。我们常说要设计一个健壮稳定的系统，而这里只是增加了一个香蕉类，就要去修改Jim类，健壮和稳定还从何谈起。</p>

<p>而根据依赖倒置原则，我们可以对上述代码做些修改，提取抽象的部分。首先我们提取出两个接口：People和Fruit，都提供各自必需的抽象方法，这样以后无论是增加Jim人类，还是增加Apple、Banana等各种水果，都只需要增加自己的实现类就可以了。由于遵循依赖倒置原则，只依赖于抽象，而不依赖于细节，所以增加类无需修改其他类。</p>

<p>代码如下：</p>

<p><code>java
//人接口
public interface People {
    public void eat(Fruit fruit);//人都有吃的方法，不然都饿死了
}
//水果接口
public interface Fruit {
    public String getName();//水果都是有名字的
}
//具体Jim人类
public class Jim implements People{
    public void eat(Fruit fruit){
        System.out.println("Jim eat " + fruit.getName());
    }
}
//具体苹果类
public class Apple implements Fruit{
    public String getName(){
        return "apple";
    }
}
//具体香蕉类
public class Banana implements Fruit{
    public String getName(){
        return "banana";
    }
}
public class Client {
    public static void main(String[] args) {
        People jim = new Jim();
        Fruit apple = new Apple();
        Fruit Banana = new Banana();//这里符合了里氏替换原则
        jim.eat(apple);
        jim.eat(Banana);
    }
}
</code>
运行结果：</p>

<p>Jim eat apple</p>

<p>Jim eat banana</p>

<ul>
  <li>People类是复杂的业务逻辑，属于高层模块，而Fruit是原子模块，属于低层模块。People依赖于抽象的Fruit接口，这就做到了：高层模块不应该依赖低层模块，两者都应该依赖于抽象（抽象类或接口）。</li>
  <li>People和Fruit接口与各自的实现类没有关系，增加实现类不会影响接口，这就做到了：抽象（抽象类或接口）不应该依赖于细节（具体实现类）。</li>
  <li>Jim、Apple、Banana实现类都要去实现各自的接口所定义的抽象方法，所以是依赖于接口的。这就做到了：细节（具体实现类）应该依赖抽象。
##3、什么是倒置</li>
</ul>

<p>到了这里，我们对依赖倒置原则的“依赖”就很好理解了，但是什么是“倒置”呢。是这样子的，刚开始按照正常人的一般思维方式，我想吃香蕉就是吃香蕉，想吃苹果就吃苹果，编程也是这样，都是按照面向实现的思维方式来设计。而现在要倒置思维，提取公共的抽象，面向接口（抽象类）编程。不再依赖于具体实现了，而是依赖于接口或抽象类，这就是依赖的思维方式“倒置”了。</p>

<h2 id="section-14">4、依赖的三种实现方式</h2>

<p>对象的依赖关系有三种方式来传递：</p>

<h3 id="section-15">接口方法中声明依赖对象。</h3>

<p>就是我们上面代码所展示的那样。</p>

<h3 id="section-16">构造方法传递依赖对象。</h3>

<p>在构造函数中的需要传递的参数是抽象类或接口的方式实现。代码如下：</p>

<p><code>java
//具体Jim人类
public class Jim implements People{
     
    private Fruit fruit;
     
    public Jim(Fruit fruit){//构造方法传递依赖对象
        this.fruit = fruit;
    }
     
    public void eat(Fruit fruit){
        System.out.println("Jim eat " + this.fruit.getName());
    }
}
</code>
###Setter方法传递依赖对象。</p>

<p>在我们设置的setXXX方法中的参数为抽象类或接口，来实现传递依赖对象。代码如下：</p>

<p><code>java
//具体Jim人类
public class Jim implements People{
     
    private Fruit fruit;
     
    public void setFruit(Fruit fruit){//setter方式传递依赖对象
        this.fruit = fruit;
    }
     
    public void eat(){
        System.out.println("Jim eat " + this.fruit.getName());
    }
}
</code></p>

<h2 id="section-17">5、优点</h2>

<p>从上面的代码修改过程中，我们可以看到由于类之间松耦合的设计，面向接口编程依赖抽象而不依赖细节，所以在修改某个类的代码时，不会牵涉到其他类的修改，显著降低系统风险，提高系统健壮性。</p>

<p>还有一个优点是，在我们实际项目开发中，都是多人团队协作，每人负责某一模块。比如一个人负责开发People模块，一人负责开发Fruit模块，如果未采用依赖倒置原则，没有提取抽象，那么开发People模块的人必须等Fruit模块开发完成后自己才能开发，否则编译都无法通过，这就是单线程的开发。为了能够两人并行开发，设计时遵循依赖倒置原则，提取抽象，就可以大大提高开发进度。</p>

<h2 id="section-18">6、总结</h2>

<p>说到底，依赖倒置原则的核心就是面向接口编程的思想，尽量对每个实现类都提取抽象和公共接口形成接口或抽象类，依赖于抽象而不要依赖于具体实现。依赖倒置原则的本质其实就是通过抽象（抽象类或接口）使各个类或模块的实现彼此独立，不相互影响，实现模块间的松耦合。但是这个原则也是6个设计原则中最难以实现的了，如果没有实现这个原则，那么也就意味着开闭原则（对扩展开放，对修改关闭）也无法实现。</p>

<h1 id="4">接口隔离原则</h1>

<p>作者：<a href="http://tianweili.github.com/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/01/the-six-principle-of-design-patterns/">http://tianweili.github.io/blog/2015/02/01/the-six-principle-of-design-patterns/</a></p>
]]></content>
  </entry>
  
</feed>
