<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Design-pattern | 李天炜]]></title>
  <link href="http://tianweili.github.io/blog/categories/design-pattern/atom.xml" rel="self"/>
  <link href="http://tianweili.github.io/"/>
  <updated>2015-03-10T18:20:25+08:00</updated>
  <id>http://tianweili.github.io/</id>
  <author>
    <name><![CDATA[李天炜 litianwei2013[AT]gmail.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Monitor Pattern]]></title>
    <link href="http://tianweili.github.io/blog/2015/03/10/monitor-pattern/"/>
    <updated>2015-03-10T17:39:56+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/03/10/monitor-pattern</id>
    <content type="html"><![CDATA[<p>监视器模式又叫做观察者模式，</p>

<p>Java多线程中的线程同步就使用到了监视器模式，进入和退出同步代码块的字节指令也称为monitor enter和monitor exit，Java的内置锁也称为监视器锁或监视器。</p>

<p>Vector和Hashtable这两种线程安全的容器类也都使用了监视器模式。</p>

<p>参见《Java并发编程实战》4.2.1节。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工厂方法模式]]></title>
    <link href="http://tianweili.github.io/blog/2015/03/09/factory-method-pattern/"/>
    <updated>2015-03-09T21:07:29+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/03/09/factory-method-pattern</id>
    <content type="html"><![CDATA[<p>工厂方法模式是简单工厂模式的衍生，核心工厂类不再负责具体产品的创建，而是一个抽象工厂的角色，仅仅定义子类工厂必须实现的接口。这样进一步抽象的好处是可以使系统在不修改具体工厂类的方式下引进新的产品。</p>

<!--more-->


<p>原文链接：</p>

<p><a href="http://tianweili.github.io/blog/2015/03/09/factory-method-pattern/">http://tianweili.github.io/blog/2015/03/09/factory-method-pattern/</a></p>

<h2>介绍</h2>

<p>工厂方法模式定义：Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses。<strong>定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。</strong></p>

<p>工厂方法模式的对简单工厂模式进行了抽象。有一个抽象的Factory类（可以是抽象类和接口），这个类将不再负责具体的产品生产，而是只制定一些规范，具体的生产工作由其子类去完成。在这个模式中，工厂类和产品类往往可以依次对应。即一个抽象工厂对应一个抽象产品，一个具体工厂对应一个具体产品，这个具体的工厂就负责生产对应的产品。</p>

<p><strong>工厂方法模式的核心和关键点是对工厂也进行了抽象。</strong></p>

<h2>UML类图</h2>

<p>工厂方法模式的UML类图如下所示：</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/factory-method-uml.png"></p>

<p>在上面的UML图中主要包含了四中角色：</p>

<p>抽象工厂（Abstract Factory）角色</p>

<p>抽象工厂角色是工厂方法模式的核心，主要定义了具体工厂子类必须要实现的接口，并且所有创建对象的工厂类都必须实现该方法，与应用程序无关。</p>

<p>具体工厂（Concrete Factory）角色</p>

<p>这是实现抽象工厂的具体工厂类，包含与应用程序密切相关的逻辑，要受到应用程序的调用以创建产品对象。</p>

<p>抽象产品（Abstract Product）角色</p>

<p>具体产品对象的共同父类，由它来定义所有产品的共同接口。</p>

<p>具体产品（Concrete Product）角色</p>

<p>具体产品是简单工厂模式的创建目标，所有创建的对象都是某个具体产品类的实例。</p>

<h2>代码示例</h2>

<pre><code class="java">public interface Product {
    public void method();
}
public class ProductA implements Product{
    @Override
    public void method() {
        System.out.println("ProductA Method ...");
    }
}
public class ProductB implements Product{
    @Override
    public void method() {
        System.out.println("ProductB Method ...");
    }
}
public interface Factory {
    public Product create();
}
public class FactoryA implements Factory{
    @Override
    public Product create() {
        return new ProductA();
    }
}
public class FactoryB implements Factory{
    @Override
    public Product create() {
        return new ProductB();
    }
}
public class Client {
    public static void main(String[] args) {
        Factory factory = new FactoryA();
        Product product = factory.create();
        product.method();

        factory = new FactoryB();
        product = factory.create();
        product.method();
    }
}
</code></pre>

<p>运行结果：</p>

<pre><code>ProductA Method ...
ProductB Method ...
</code></pre>

<h2>与简单工厂模式的区别</h2>

<p>工厂方法模式是简单功能工厂模式的衍生，它将工厂也抽象出来，定义了一个抽象工厂，将产品对象的实例化过程推到了下面的各个子类工厂，而且子类工厂与产品也是一一对应的。这是两者最大的区别。</p>

<p>工厂方法模式多了一个抽象工厂。</p>

<p>工厂方法模式支持多态。</p>

<h2>优点</h2>

<p>解决了许多简单工厂模式中出现的问题。</p>

<p>完全符合”开闭原则”，具有可扩展性。</p>

<p>更为复杂的层次结构，可以应付产品结果更为复杂的场合。</p>

<p>工厂方法模式是典型的解耦框架。高层模块只需要知道产品的抽象类，其它实现类都不需要关心，符合迪米特法则。只依赖产品的抽象，符合依赖倒置原则。使用产品子类替换产品父类，符合里氏替换原则。</p>

<h2>缺点</h2>

<p>抽象出了一个抽象工厂，添加了具体工厂子类，会提高系统的复杂度。所以对于一些复杂的创建过程使用工厂方法模式才比较合适。</p>

<h2>适用场景</h2>

<p>工厂方法模式是使用非常频繁的设计模式之一，在系统设计中几乎随处可见。简单工厂模式、工厂方法模式、抽象工厂模式这三个设计模式都有一些类似的特性，所以在适用场景上也都是类似的。</p>

<p>首先，作为一个创建型模式，在任何需要生成复杂对象的地方都可以使用工厂方法模式。但是要注意对于一些生成对象简单，特别是只需要通过new来生成对象的地方，就不需要使用工厂方法模式了。因为如果使用工厂方法模式，就需要引入一个工厂类，会增加系统的复杂度。</p>

<p>另外，在需要一个可扩展性强的系统设计中，可以考虑使用工厂方法模式。比如产品对象预期可能会经常造成增加或删减等，使用工厂方法模式来设计可以使系统更加灵活。</p>

<h2>应用实例</h2>

<h3>Collection中的iterator方法</h3>

<p><code>java.util.Collection</code>接口中的<code>iterator()</code>方法就是一个工厂方法。对于iterator方法来说Collection就是一个根抽象工厂，下面还有List等接口作为抽象工厂，再往下有ArrayList等具体工厂。
<code>java.util.Iterator</code>接口是根抽象产品，下面有ListIterator等抽象产品，还有ArrayListIterator等作为具体产品。</p>

<p>获得产品代码：</p>

<pre><code class="java">Collection c = new ArrayList();
Iterator i = c.iterator();
</code></pre>

<p>基本的UML类图如下所示：</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/collection-iterator-uml.png"></p>

<h3>JDBC数据库开发</h3>

<p>在使用JDBC进行数据库开发时，如果数据库由MySQL改为Oracle或其他，则只需要改一下数据库驱动名称就可以，其他都不用修改（前提是使用的都是标准SQL语句）。或者在Hibernate框架中，更换数据库方言也是类似道理。</p>

<h3>连接邮件服务器框架</h3>

<p>如果需要设计一个连接邮件服务器的框架，那么就要考虑到连接邮件服务器有几种方式：POP3、SMTP、HTTP。就可以定义一个连接邮件服务器接口，在此接口中定义一些对邮件操作的接口方法，把这三种连接方式封装成产品类，实现接口中定义的抽象方法。再定义抽象工厂和具体工厂，当选择不同的工厂时，对应到产生相应的连接邮件产品对象。采用这种工厂方法模式的设计，就可以做到良好的扩展性。比如某些邮件服务器提供了WebService接口，只需要增加一个产品类和工厂类就可以了，而不需要修改原来代码。</p>

<h3>网页爬虫解析</h3>

<p>在一个项目中，需要实现的需求是这样的：公司有很多站点，需要带着指定的一些关键字去网站上爬取广告、文章、产品等信息解析下来，而不同的站点风格各异，爬取和解析的方式也各不相同。</p>

<p>所以这里就用到了工厂方法模式，抽象出一个抽象产品，定义公共接口，爬取解析某个站点就封装成一个产品对象。再抽象出抽象工厂，使一些具体工厂实现抽象工厂定义的调用产品接口，每个具体工厂对应一个产品。</p>

<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/03/09/factory-method-pattern/">http://tianweili.github.io/blog/2015/03/09/factory-method-pattern/</a></p>

<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单工厂模式]]></title>
    <link href="http://tianweili.github.io/blog/2015/03/08/simple-factory-pattern/"/>
    <updated>2015-03-08T19:49:20+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/03/08/simple-factory-pattern</id>
    <content type="html"><![CDATA[<p>简单工厂模式就是工厂对象根据传入的参数，动态的决定创建哪一种产品类的实例，而这些产品类继承自一个父类或一个接口。</p>

<!--more-->


<p>原文链接：</p>

<p><a href="http://tianweili.github.io/blog/2015/03/08/simple-factory-pattern/">http://tianweili.github.io/blog/2015/03/08/simple-factory-pattern/</a></p>

<h2>介绍</h2>

<p>简单工厂模式属于创建型模式，又叫做静态工厂方法(static factory method)。但是它并没有归为23种GOF设计模式其中。</p>

<p>简单工厂模式是<strong>由工厂对象来决定创建哪一种产品类的实例</strong>。</p>

<p>简单说就是工厂对象根据传入的参数，动态的决定创建哪一种产品类的实例，而这些产品类继承自一个父类或一个接口。</p>

<h2>UML类图</h2>

<p>简单工厂模式的一个基本的UML类图如下所示：</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/simple-factory-uml.png"></p>

<p>在这个UML类图中包含以下角色：</p>

<p>工厂（Factory）</p>

<p>这是简单工厂模式的核心，由它来负责实现创建所有实例的逻辑。工厂对象用来被外界调用，根据传入的参数来决定创建哪一个产品对象。</p>

<p>抽象产品（Abstract Product）</p>

<p>抽象类或接口。是所有具体产品对象的父类，由它来定义所有具体产品的公共接口。</p>

<p>具体产品（Concrete Product）</p>

<p>具体产品是简单工厂模式的创建目标，所有创建的对象都是某个具体产品类的实例。</p>

<h2>代码示例</h2>

<pre><code class="java">public interface Product {
    public void function();
}
public class ProductA implements Product{
    @Override
    public void function() {
        System.out.println("ProductA function ...");
    }
}
public class ProductB implements Product{
    @Override
    public void function() {
        System.out.println("ProductB function ...");
    }
}
public class Factory {
    public Product create(String productName) {
        if (productName == null || "".equals(productName)) {
            return null;
        }
        if ("productA".equals(productName)) {
            return new ProductA();
        } else if ("productB".equals(productName)) {
            return new ProductB();
        }
        return null;
    }
}
public class Main {
    public static void main(String[] args) {
        Factory factory = new Factory();
        Product product1 = factory.create("productA");
        Product product2 = factory.create("productB");
        product1.function();
        product2.function();
    }
}
</code></pre>

<p>输出结果：</p>

<pre><code>ProductA function ...
ProductB function ...
</code></pre>

<h2>优点</h2>

<p>客户类和工厂类分开。消费者任何时候需要某种产品，只需向工厂请求即可。消费者无须修改就可以接纳新产品。</p>

<p>外界不用关注对象创建逻辑，产品对象具体的创建过程由工厂来实现。外界直接给定信息来决定创建哪个产品对象。</p>

<p>明确了各自的职责，有利于整个软件体系结构的优化。</p>

<h2>缺点</h2>

<p>违反高内聚责任分配原则，将所有的创建逻辑都集中在了工厂类身上。</p>

<p>如果需要添加新的产品类，则需要修改工厂类。</p>

<p>当产品类不断增多，工厂类对产品类型的判断条件过多交织在了一起，会造成逻辑过于复杂，对系统的扩展和维护不利。</p>

<h2>使用场景</h2>

<p>工厂类创建的产品对象比较少。</p>

<p>外界只需要传入工厂类参数来获得产品对象，对于产品对象的创建过程不关心。</p>

<p>简单工厂模式很容易违反高内聚责任分配原则，所以只是在一些很简单的情况下使用。</p>

<h2>应用实例</h2>

<h3>附件的解压</h3>

<p>在工作中，有一个项目模块中要求的功能是：登录邮箱，获取邮件，然后抓取邮件中的附件，下载下来，如果是压缩包，则进行解压，然后进行相应处理。在解压时就用到了简单工厂模式。附件压缩包格式不一，有zip,rar等格式，则把每一种格式的解压和处理都放到一个产品对象中，然后使用一个工厂类来决定创建哪一个产品进行相应的处理。</p>

<p>由于这个压缩包解压方式并不多，判断逻辑并不太复杂，所以也没必要用工厂方法模式，增加代码复杂度。</p>

<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/03/08/simple-factory-pattern/">http://tianweili.github.io/blog/2015/03/08/simple-factory-pattern/</a></p>

<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单例模式的八种写法比较]]></title>
    <link href="http://tianweili.github.io/blog/2015/03/02/singleton-pattern/"/>
    <updated>2015-03-02T19:08:39+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/03/02/singleton-pattern</id>
    <content type="html"><![CDATA[<p>单例模式是最常用到的设计模式之一，熟悉设计模式的朋友对单例模式都不会陌生。一般介绍单例模式的书籍都会提到<code>饿汉式</code>和<code>懒汉式</code>这两种实现方式。但是除了这两种方式，本文还会介绍其他几种实现单例的方式，让我们来一起看看吧。</p>

<!--more-->


<p>原文链接：<a href="http://tianweili.github.io/blog/2015/03/02/singleton-pattern/">http://tianweili.github.io/blog/2015/03/02/singleton-pattern/</a></p>

<h2>简介</h2>

<p>单例模式是一种常用的软件设计模式，其定义是单例对象的类只能允许一个实例存在。</p>

<p>许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息。这种方式简化了在复杂环境下的配置管理。</p>

<h2>基本的实现思路</h2>

<p>单例模式要求类能够有返回对象一个引用(永远是同一个)和一个获得该实例的方法（必须是静态方法，通常使用getInstance这个名称）。</p>

<p>单例的实现主要是通过以下两个步骤：</p>

<ol>
<li>将该类的构造方法定义为私有方法，这样其他处的代码就无法通过调用该类的构造方法来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例；</li>
<li>在该类内提供一个静态方法，当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用。</li>
</ol>


<h2>注意事项</h2>

<p>单例模式在多线程的应用场合下必须小心使用。如果当唯一实例尚未创建时，有两个线程同时调用创建方法，那么它们同时没有检测到唯一实例的存在，从而同时各自创建了一个实例，这样就有两个实例被构造出来，从而违反了单例模式中实例唯一的原则。 解决这个问题的办法是为指示类是否已经实例化的变量提供一个互斥锁(虽然这样会降低效率)。</p>

<h2>单例模式的八种写法</h2>

<h3>1、饿汉式（静态常量）[可用]</h3>

<pre><code class="java">public class Singleton {

    private final static Singleton INSTANCE = new Singleton();

    private Singleton(){}

    public static Singleton getInstance(){
        return INSTANCE;
    }
}
</code></pre>

<p>优点：这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。</p>

<p>缺点：在类装载的时候就完成实例化，没有达到Lazy Loading的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费。</p>

<h3>2、饿汉式（静态代码块）[可用]</h3>

<pre><code class="java">public class Singleton {

    private static Singleton instance;

    static {
        instance = new Singleton();
    }

    private Singleton() {}

    public Singleton getInstance() {
        return instance;
    }
}
</code></pre>

<p>这种方式和上面的方式其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。优缺点和上面是一样的。</p>

<h3>3、懒汉式(线程不安全)[不可用]</h3>

<pre><code class="java">public class Singleton {

    private static Singleton singleton;

    private Singleton() {}

    public static Singleton getInstance() {
        if (singleton == null) {
            singleton = new Singleton();
        }
        return singleton;
    }
}
</code></pre>

<p>这种写法起到了Lazy Loading的效果，但是只能在单线程下使用。如果在多线程下，一个线程进入了if (singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式。</p>

<h3>4、懒汉式(线程安全，同步方法)[不推荐用]</h3>

<pre><code class="java">public class Singleton {

    private static Singleton singleton;

    private Singleton() {}

    public static synchronized Singleton getInstance() {
        if (singleton == null) {
            singleton = new Singleton();
        }
        return singleton;
    }
}
</code></pre>

<p>解决上面第三种实现方式的线程不安全问题，做个线程同步就可以了，于是就对getInstance()方法进行了线程同步。</p>

<p>缺点：效率太低了，每个线程在想获得类的实例时候，执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return就行了。方法进行同步效率太低要改进。</p>

<h3>5、懒汉式(线程安全，同步代码块)[不可用]</h3>

<pre><code class="java">public class Singleton {

    private static Singleton singleton;

    private Singleton() {}

    public static Singleton getInstance() {
        if (singleton == null) {
            synchronized (Singleton.class) {
                singleton = new Singleton();
            }
        }
        return singleton;
    }
}
</code></pre>

<p>由于第四种实现方式同步效率太低，所以摒弃同步方法，改为同步产生实例化的的代码块。但是这种同步并不能起到线程同步的作用。跟第3种实现方式遇到的情形一致，假如一个线程进入了if (singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。</p>

<h3>6、双重检查[推荐用]</h3>

<pre><code class="java">public class Singleton {

    private static volatile Singleton singleton;

    private Singleton() {}

    public static Singleton getInstance() {
        if (singleton == null) {
            synchronized (Singleton.class) {
                if (singleton == null) {
                    singleton = new Singleton();
                }
            }
        }
        return singleton;
    }
}
</code></pre>

<p>Double-Check概念对于多线程开发者来说不会陌生，如代码中所示，我们进行了两次if (singleton == null)检查，这样就可以保证线程安全了。这样，实例化代码只用执行一次，后面再次访问时，判断if (singleton == null)，直接return实例化对象。</p>

<p>优点：线程安全；延迟加载；效率较高。</p>

<h3>7、静态内部类[推荐用]</h3>

<pre><code class="java">public class Singleton {

    private Singleton() {}

    private static class SingletonInstance {
        private static final Singleton INSTANCE = new Singleton();
    }

    public static Singleton getInstance() {
        return SingletonInstance.INSTANCE;
    }
}
</code></pre>

<p>这种方式跟饿汉式方式采用的机制类似，但又有不同。两者都是采用了类装载的机制来保证初始化实例时只有一个线程。不同的地方在饿汉式方式是只要Singleton类被装载就会实例化，没有Lazy-Loading的作用，而静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。</p>

<p>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p>

<p>优点：避免了线程不安全，延迟加载，效率高。</p>

<h3>8、枚举[推荐用]</h3>

<pre><code class="java">public enum Singleton {
    INSTANCE;
    public void whateverMethod() {

    }
}
</code></pre>

<p>借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。可能是因为枚举在JDK1.5中才添加，所以在实际项目开发中，很少见人这么写过。</p>

<h2>优点</h2>

<p>系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。</p>

<h2>缺点</h2>

<p>当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new，可能会给其他开发人员造成困扰，特别是看不到源码的时候。</p>

<h2>适用场合</h2>

<ul>
<li>需要频繁的进行创建和销毁的对象；</li>
<li>创建对象时耗时过多或耗费资源过多，但又经常用到的对象；</li>
<li>工具类对象；</li>
<li>频繁访问数据库或文件的对象。</li>
</ul>


<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/03/02/singleton-pattern/">http://tianweili.github.io/blog/2015/03/02/singleton-pattern/</a></p>

<p>转载请注明作者及出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式六大原则 - 接口隔离原则]]></title>
    <link href="http://tianweili.github.io/blog/2015/02/10/interface-segregation-principle/"/>
    <updated>2015-02-10T23:01:20+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/02/10/interface-segregation-principle</id>
    <content type="html"><![CDATA[<p>类A通过接口I依赖类B，类C通过接口I依赖类D，如果接口I对于类B和类D来说不是最小接口，则类B和类D必须去实现他们不需要的方法。</p>

<!--more-->


<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/10/interface-segregation-principle/">http://tianweili.github.io/blog/2015/02/10/interface-segregation-principle/</a></p>

<h2>什么是接口隔离原则</h2>

<p>接口隔离原则比较简单，有两种定义：</p>

<ul>
<li>Clients should not be forced to depend upon interfaces that they don&rsquo;t use.（客户端不应该强行依赖它不需要的接口）</li>
<li>The dependency of one class to another one should depend on the smallest possible interface.（类间的依赖关系应该建立在最小的接口上）</li>
</ul>


<p>其实上述两种定义说的是同一种意思。客户端不应该依赖它不需要的接口，意思就是说客户端只要依赖它需要的接口，它需要什么接口，就提供什么接口，不提供多余的接口。“类间的依赖关系应该建立在最小的接口上”也表达这一层意思。通俗的讲就是：接口中的方法应该尽量少，不要使接口过于臃肿，不要有很多不相关的逻辑方法。</p>

<p>通过简单的代码还原开篇的问题，代码如下：</p>

<pre><code class="java">public interface I {
    public void method1();
    public void method2();
    public void method3();
}
public class B implements I{
 
    @Override
    public void method1() {
        System.out.println("类B实现了接口I的方法1");
    }
 
    @Override
    public void method2() {
        System.out.println("类B实现了接口I的方法2");
    }
 
    @Override
    public void method3() {//类B并不需要接口I的方法3功能，但是由于实现接口I，所以不得不实现方法3
        //在这里写一个空方法
    }
}
public class D implements I{
 
    @Override
    public void method2() {
        System.out.println("类D实现了接口I的方法2");
    }
 
    @Override
    public void method3() {
        System.out.println("类D实现了接口I的方法3");
    }
 
    @Override
    public void method1() {//类D并不需要接口I的方法1功能，但是由于实现接口I，所以不得不实现方法1
        //在这里写一个空方法
    }
}
//类A通过接口I依赖类B
public class A {
    public void depend1(I i){
        i.method1();
    }
}
//类C通过接口I依赖类D
public class C {
    public void depend1(I i){
        i.method3();
    }
}
public class Client {
    public static void main(String[] args) {
        A a = new A();
        I i1 = new B();
        a.depend1(i1);
         
        C c = new C();
        I i2 = new D();
        c.depend1(i2);
    }
}
</code></pre>

<p>运行结果：</p>

<pre><code>类B实现了接口I的方法1
类D实现了接口I的方法3
</code></pre>

<p>从以上代码可以看出，如果接口过于臃肿，不同业务逻辑的抽象方法都放在一个接口内，则会造成它的实现类必须实现自己并不需要的方法，这种设计方式显然是不妥当的。所以我们要修改上述设计方法，把接口I拆分成3个接口，使得实现类只需要实现自己需要的接口即可。只贴出修改后的接口和实现类的代码，修改代码如下：</p>

<pre><code class="java">public interface I1 {
    public void method1();
}
public interface I2 {
    public void method2();
}
public interface I3 {
    public void method3();
}
 
public class B implements I1,I2{
    @Override
    public void method1() {
        System.out.println("类B实现了接口I的方法1");
    }
 
    @Override
    public void method2() {
        System.out.println("类B实现了接口I的方法2");
    }
}
 
public class D implements I2,I3{
    @Override
    public void method2() {
        System.out.println("类D实现了接口I的方法2");
    }
 
    @Override
    public void method3() {
        System.out.println("类D实现了接口I的方法3");
    }
}
</code></pre>

<h2>与单一职责原则的区别</h2>

<p>到了这里，有些人可能觉得接口隔离原则与单一职责原则很相似，其实不然。</p>

<p>第一，单一职责原则注重的是职责；而接口隔离原则注重对接口依赖的隔离。</p>

<p>第二，单一职责原则主要是约束类，其次才是接口和方法，它针对的是程序中的实现和细节；而接口隔离原则主要约束接口，主要针对抽象，针对程序整体框架的构建。</p>

<h2>注意事项</h2>

<p>原则是前人经验的总结，在软件设计中具有一定的指导作用，但是不能完全照搬这些原则。对于接口隔离原则来说，接口尽量小，但是也要有限度。对接口进行细化可以提高程序设计灵活性是不争的事实，但是如果过小，则会造成接口数量过多，使设计复杂化，所以一定要适度。</p>

<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/10/interface-segregation-principle/">http://tianweili.github.io/blog/2015/02/10/interface-segregation-principle/</a></p>

<p>转载请注明作者及出处，谢谢。</p>
]]></content>
  </entry>
  
</feed>
