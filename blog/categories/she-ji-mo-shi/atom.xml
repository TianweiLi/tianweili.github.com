<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 设计模式 | 李天炜]]></title>
  <link href="http://tianweili.github.io/blog/categories/she-ji-mo-shi/atom.xml" rel="self"/>
  <link href="http://tianweili.github.io/"/>
  <updated>2015-03-13T22:11:26+08:00</updated>
  <id>http://tianweili.github.io/</id>
  <author>
    <name><![CDATA[李天炜 litianwei2013[AT]gmail.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[代理模式]]></title>
    <link href="http://tianweili.github.io/blog/2015/03/13/proxy-pattern/"/>
    <updated>2015-03-13T21:55:18+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/03/13/proxy-pattern</id>
    <content type="html"><![CDATA[<p>本文讲述了代理模式，包括了普通代理、强制代理和动态代理。</p>

<!--more-->


<p>原文链接：</p>

<p><a href="http://tianweili.github.io/blog/2015/03/13/proxy-pattern/">http://tianweili.github.io/blog/2015/03/13/proxy-pattern/</a></p>

<h2>介绍</h2>

<p>代理模式属于结构性模式，使用频率很高。</p>

<p>定义：Provide a surrogate or placeholder for another object to control access to it.为其他对象提供一种代理以控制这个对象的访问。</p>

<p>装饰模式、状态模式、策略模式、访问者模式本质上都是在更特殊的场合采用了代理模式。</p>

<h2>UML类图</h2>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/proxy-pattern-uml.png"></p>

<p>从以上UML类图中可以看出代理模式主要有三种角色：</p>

<p><strong>抽象主题角色</strong></p>

<p>可以是接口或抽象类，是某类通用业务的定义。</p>

<p><strong>具体主题角色</strong></p>

<p>作为被代理对象，是具体业务的真实执行者。</p>

<p><strong>代理主题角色</strong></p>

<p>是具体主题对象的代理，负责对具体对象的应用，把所有抽象主题定义的方法委托给具体主题对象来实现，它用来在具体主题对象业务处理的前后做一些处理工作。</p>

<h2>代码示例</h2>

<pre><code class="java">/**
 * Abstract subject class.
 */
public interface Subject {
    public void someMethod();
}
/**
 * Real subject class.
 */
public class RealSubject implements Subject {

    private String name;

    public RealSubject(String name) {
        this.name = name;
    }

    @Override
    public void someMethod() {
        System.out.println(name + "'s someMehtod.");
    }
}
/**
 * Proxy class.
 */
public class ProxySubject implements Subject {

    private Subject subject;

    public ProxySubject(Subject subject) {
        this.subject = subject;
    }

    @Override
    public void someMethod() {
        this.before();
        subject.someMethod();
        this.after();
    }

    /**
     * preprocessing
     */
    private void before() {
        // do something...
    }

    /**
     * follow-up processing
     */
    private void after() {
        // do something...
    }
}
</code></pre>

<p>从以上代码可以看出ProxySubject对象还有before和after方法，可以在RealSubject对象的someMethod业务方法前后做一些预处理和善后处理工作。</p>

<p>一个代理类可以代理多个被代理对象，只要是实现同一个接口。当然也可以一个被代理对象就有一个代理类，不过一般是一个接口有一个代理类就够了，在应用时具体是代理哪一个被代理对象，这是由场景类也就是高层模块定义的，根据构造方法的传入哪一个被代理对象参数来决定代理哪一个对象。</p>

<p>构造方法：</p>

<pre><code class="java">public ProxySubject(Subject subject) {
    this.subject = subject;
}
</code></pre>

<p>想代理哪个对象就要传入生成这个对象的实例。</p>

<h2>优点</h2>

<p>各个角色职责清晰，比如被代理对象只需要实现属于自己具体的业务逻辑就行了，不用去关心非本职责的业务处理。其他的一些处理业务可以交给代理类来处理。这样做的好处是编程简洁清晰，业务分明。</p>

<p>扩展性好，具体实现对象的业务发生了变化，只需要修改自身业务处理逻辑，或者增加删减一个实现业务接口的对象，不会影响代理业务。</p>

<p>代理模式可以提供非常好的访问控制，由代理类来控制被代理对象，可以做一些预处理消息，过滤消息，消息转发和善后处理工作等等。</p>

<h2>普通代理和强制代理</h2>

<p>普通代理和强制代理是代理模式的两种不同结构，是根据调用者能够访问到代理对象还是具体对象来区分的。就好比网络上的代理服务器设置分为普通代理和透明代理。普通代理需要用户手动设置代理服务器的IP地址，用户必须知道代理的存在。透明代理就是用户不需要设置代理服务器地址，就可以直接访问，不用知道代理的存在。</p>

<h3>普通代理</h3>

<p>普通代理是用户只能访问代理角色，而不能访问真实角色。</p>

<p>只需要对上面代码稍作改动即可实现普通代理的效果，代码如下：</p>

<pre><code class="java">/**
 * Abstract subject class.
 */
public interface Subject {
    public void someMethod();
}
/**
 * Real subject class.
 */
public class RealSubject implements Subject {

    private String name;

    /**
     * Don't allow client call this.
     */
    public RealSubject(Subject subject, String name) throws Exception {
        if(subject == null) {
            throw new Exception("Don't allow realSubject created!");
        } else {
            this.name = name;
        }
    }

    @Override
    public void someMethod() {
        System.out.println(name + "'s someMehtod.");
    }
}
/**
 * Proxy class.
 */
public class ProxySubject implements Subject {

    private Subject subject;

    /**
     * Client call proxy subject.
     */
    public ProxySubject(String name) {
        try {
            this.subject = new RealSubject(this, name);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void someMethod() {
        this.before();
        subject.someMethod();
        this.after();
    }

    /**
     * preprocessing
     */
    private void before() {
        // do something...
        System.out.println("before ...");
    }

    /**
     * follow-up processing
     */
    private void after() {
        // do something...
        System.out.println("after ...");
    }
}
public class Client {
    public static void main(String[] args) {
        Subject subject = new ProxySubject("ZhangSan");
        subject.someMethod();
    }
}
</code></pre>

<p>运行程序结果如下：</p>

<pre><code>before ...
ZhangSan's someMehtod.
after ...
</code></pre>

<p>在上面RealSubject的构造方法中是通过传入参数subject来限制用户不能实例化自己，当然也可以通过别的一些限制条件，比如类名必须有Proxy等等。</p>

<h3>强制代理</h3>

<p>普通代理是通过代理角色找到真是角色，而强制代理是强制只能通过真实角色查找代理角色来访问，想直接通过实例化代理角色或真实角色都不能访问。</p>

<p>UML类图如下：</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/proxy-pattern-uml-2.png"></p>

<p>从以上UML类图可以看出Subject接口中添加了个获取代理的接口方法。</p>

<p>代码清单：</p>

<pre><code class="java">/**
 * Abstract subject class.
 */
public interface Subject {
    public void someMethod();
    public Subject getProxy();
}
/**
 * Real subject class.
 */
public class RealSubject implements Subject {

    private String name;
    private Subject proxy;

    public RealSubject(String name) {
        this.name = name;
    }

    @Override
    public void someMethod() {
        if (this.isProxy()) {
            System.out.println(name + "'s someMehtod.");
        } else {
            System.out.println("Only visit proxy class is allowed!");
        }
    }

    @Override
    public Subject getProxy() {
        // appoint proxy class.
        this.proxy = new ProxySubject(this);
        return proxy;
    }

    private boolean isProxy() {
        if (this.proxy == null) {
            return false;
        } else {
            return true;
        }
    }
}
/**
 * Proxy class.
 */
public class ProxySubject implements Subject {

    private Subject subject;

    public ProxySubject(Subject subject) {
        this.subject = subject;
    }

    @Override
    public void someMethod() {
        subject.someMethod();
    }

    @Override
    public Subject getProxy() {
        return this;
    }
}
</code></pre>

<p>当客户端想通过真实角色来访问时，客户端代码如下：</p>

<pre><code class="java">public class Client {
    public static void main(String[] args) {
        Subject realSubject = new RealSubject("ZhangSan");
        realSubject.someMethod();
    }
}
</code></pre>

<p>执行结果：</p>

<pre><code>Only visit proxy class is allowed!
</code></pre>

<p>访问被拒绝，因为它是通过真实角色来直接访问的，而不是通过真实角色来获取代理角色来访问。</p>

<p>当客户端想通过代理角色来访问时，客户端代码如下：</p>

<pre><code class="java">public class Client {
    public static void main(String[] args) {
        Subject realSubject = new RealSubject("ZhangSan");
        Subject proxy = new ProxySubject(realSubject);
        proxy.someMethod();
    }
}
</code></pre>

<p>执行结果：</p>

<pre><code>Only visit proxy class is allowed!
</code></pre>

<p>访问同样被拒绝，因为它是通过代理角色来直接访问的，而不是通过真实角色来获取代理角色来访问。</p>

<p>只有强制客户端通过真实角色来获取代理对象，才能访问。客户端代码如下：</p>

<pre><code class="java">public class Client {
    public static void main(String[] args) {
        Subject realSubject = new RealSubject("ZhangSan");
        Subject proxy = realSubject.getProxy();
        proxy.someMethod();
    }
}
</code></pre>

<p>执行结果：</p>

<pre><code>ZhangSan's someMehtod.
</code></pre>

<p>通过真实角色来获取代理对象访问成功。</p>

<h2>动态代理</h2>

<p>这一节之前所讲的代理其实都是静态代理，它有一个特点就是要在实现阶段就要指定代理类以及被代理者，很不灵活。而动态代理就是在实现阶段不用管代理具体对象，而在运行阶段指定代理哪个对象即可生产代理对象。</p>

<p>基本的UML类图如下所示：</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/proxy-pattern-uml-3.png"></p>

<p>从类图中可以看出，具体的业务逻辑和代理逻辑是两条线，两者之间没有必然的耦合关系。</p>

<p>InvocationHandler是JDK提供的接口，用来对被代理类的方法进行代理。</p>

<p>注意：<strong>被代理者必须实现一个接口</strong>，否则动态代理无法生成代理对象。</p>

<p>动态代理是根据被代理者的接口生成所有的方法。通过InvocationHandler接口，所有被代理的方法都由InvocationHandler来接管实际的处理逻辑。</p>

<p>代码清单：</p>

<pre><code class="java">/**
 * Abstract subject class.
 */
public interface Subject {
    public void someMethod();
}
/**
 * Real subject class.
 */
public class RealSubject implements Subject {

    private String name;

    public RealSubject(String name) {
        this.name = name;
    }

    @Override
    public void someMethod() {
        System.out.println(name + "'s someMehtod.");
    }
}

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;

public class MyInvocationHandler implements InvocationHandler {

    private Object obj;

    public MyInvocationHandler(Object obj) {
        this.obj = obj;
    }

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println("before...");
        Object result = method.invoke(obj, args);
        System.out.println("after...");
        return result;
    }
}
</code></pre>

<p>invoke方法是接口InvocationHandler中定义必须实现的，它用来完成对真实方法的调用。</p>

<p>客户端调用代码：</p>

<pre><code class="java">import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Proxy;

public class Client {
    public static void main(String[] args) {
        Subject subject = new RealSubject("ZhangSan");

        ClassLoader loader = subject.getClass().getClassLoader();
        Class[] interfaces = subject.getClass().getInterfaces();
        InvocationHandler handler = new MyInvocationHandler(subject);

        Subject proxy = (Subject) Proxy.newProxyInstance(loader, interfaces, handler);
        proxy.someMethod();
    }
}
</code></pre>

<p>执行结果：</p>

<pre><code>before...
ZhangSan's someMehtod.
after...
</code></pre>

<p>从结果中可以看出我们已经达到了代理RealSubject对象的目的。</p>

<p>看了上面的客户端调用代码，我们可以优化一下，将Proxy封装起来，使得调用更简便一些。增加动态代理封装类：</p>

<pre><code class="java">import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Proxy;

public class DynamicProxy {

    public static Object newProxyInstance(Object object) {

        ClassLoader loader = object.getClass().getClassLoader();
        Class[] interfaces = object.getClass().getInterfaces();
        InvocationHandler handler = new MyInvocationHandler(object);

        return Proxy.newProxyInstance(loader, interfaces, handler);
    }
}
</code></pre>

<p>客户端调用：</p>

<pre><code class="java">public class Client {
    public static void main(String[] args) {
        Subject subject = new RealSubject("ZhangSan");
        Subject proxy = (Subject) DynamicProxy.newProxyInstance(subject);
        proxy.someMethod();
    }
}
</code></pre>

<h2>动态代理优点</h2>

<p>动态代理拥有以上静态代理所有优点，除此之外还有动态代理的代理对象是在需要的时候动态生成的。</p>

<p>在业务逻辑开发时可以不用管代理业务逻辑，这两条线不会耦合。比如在做具体的业务逻辑设计和实现时不用考虑日志、事务、权限等逻辑处理，这些可以通过动态代理来搞定。</p>

<p>Struts2的Form映射和Spring的AOP（Aspect Oriented Programming）就是动态代理的典型应用。</p>

<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/03/13/proxy-pattern/">http://tianweili.github.io/blog/2015/03/13/proxy-pattern/</a></p>

<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[抽象工厂模式]]></title>
    <link href="http://tianweili.github.io/blog/2015/03/11/abstract-factory-pattern/"/>
    <updated>2015-03-11T16:32:58+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/03/11/abstract-factory-pattern</id>
    <content type="html"><![CDATA[<p>抽象工厂模式是工厂方法模式的升级版本，主要是引入了一个产品族的概念，将针对单一产品升级到了针对多个产品品种和产品分类。</p>

<!--more-->


<p>原文链接：</p>

<p><a href="http://tianweili.github.io/blog/2015/03/11/abstract-factory-pattern/">http://tianweili.github.io/blog/2015/03/11/abstract-factory-pattern/</a></p>

<h2>介绍</h2>

<p>抽象工厂模式定义：Provide an interface for creating families of related or dependent objects without specifying their concrete classes.为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们具体的类。</p>

<p>抽象工厂模式是工厂方法模式的升级版本，主要是引入了一个产品族的概念，将针对单一产品升级到了针对多个产品品种和产品分类。</p>

<h2>UML类图</h2>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/abstract-factory-uml.png"></p>

<p>左边的UML图并不复杂，主要包括2个抽象产品和一个抽象工厂。两个具体实现工厂各对应创建两个不同类别产品。</p>

<h2>产品族和产品等级</h2>

<p>抽象工厂模式关键点在于有了多个产品族。</p>

<p>如上图所示，ProductA1和ProductA2就是属于一个产品族。ProductA1和ProductB1分别属于两个不同的产品族。上面的UML图中有两个产品族。</p>

<p>有几个抽象产品类就有几个产品族。</p>

<p><strong>有几个产品族，在工厂中就有几个创建方法。</strong></p>

<p>继承于同一个抽象产品类的属于不同的产品等级。</p>

<p>ProductA1和ProductA2就是两个产品等级。ProductA1和ProductB1属于同一个产品等级。</p>

<p><strong>有几个产品等级，就有几个实现工厂类。</strong></p>

<p>在每个工厂类中，实现了不同产品族的创建方法。</p>

<h2>代码示例</h2>

<pre><code class="java">public interface AbstractProductA {
    public void method();
}
public class ProductA1 implements AbstractProductA{
    public void method() {
        System.out.println("This is ProductA1.");
    }
}
public class ProductA2 implements AbstractProductA{
    public void method() {
        System.out.println("This is ProductA2.");
    }
}

public interface AbstractProductB {
    public void method();
}
public class ProductB1 implements AbstractProductB{
    public void method() {
        System.out.println("This is ProductB1.");
    }
}
public class ProductB2 implements AbstractProductB{
    public void method() {
        System.out.println("This is ProductB2.");
    }
}

public interface AbstractFactory {
    public AbstractProductA createProductA();
    public AbstractProductB createProductB();
}
public class Factory1 implements AbstractFactory{
    public AbstractProductA createProductA() {
        return new ProductA1();
    }
    public AbstractProductB createProductB() {
        return new ProductB1();
    }
}
public class Factory2 implements AbstractFactory{
    public AbstractProductA createProductA() {
        return new ProductA2();
    }
    public AbstractProductB createProductB() {
        return new ProductB2();
    }
}
</code></pre>

<p>客户端调用</p>

<pre><code class="java">public class Client {
    public static void main(String[] args) {
        AbstractFactory factory1 = new Factory1();
        AbstractFactory factory2 = new Factory2();
        AbstractProductA productA1 = factory1.createProductA();
        AbstractProductB productB1 = factory1.createProductB();
        AbstractProductA productA2 = factory2.createProductA();
        AbstractProductB productB2 = factory2.createProductB();
    }
}
</code></pre>

<p>在上面的客户端调用代码中，没有与具体的产品实现类有关的代码。所以在需要某个具体产品的时候，只需要知道与之对应的工厂来生产就可以了。</p>

<h2>与工厂方法模式的区别</h2>

<p>抽象工厂模式与工厂方法模式的关键不同在于引入了一个产品族的概念，工厂方法模式相当于只有一个产品族，而抽象工厂模式有多个产品族。</p>

<p>在有多个产品族的时候只能使用抽象工厂模式了。</p>

<p>针对多个产品族，每个实现工厂都有相应的创建对应产品的方法。而工厂方法模式中实现工厂中只会有一个创建产品的方法。</p>

<h2>优点</h2>

<p>高层模块只需要知道生产相应产品的工厂类是谁，就能由工厂创建相应的产品对象。而他不用关心具体产品生产过程，符合迪米特法则。只依赖抽象产品，符合依赖倒置原则。使用产品子类替换产品父类，符合里氏替换原则。</p>

<p>不同产品族之间的约束放在工厂类中来实现，不对外公开，封装性好。</p>

<p>想较于工厂方法模式，可以应付产品更为复杂的场合。</p>

<p>在产品等级结构层面上符合开闭原则，增加一个产品等级结构扩展性好。</p>

<h2>缺点</h2>

<p>在产品族层面上不符合开闭原则，增加一个产品族，即相当于增加一个抽象产品时，需要修改大量的其他实现工厂，在产品族层面上扩展性不好。</p>

<h2>适用场景</h2>

<p>当涉及到多个产品族的时候，就需要使用抽象工厂模式了。</p>

<h2>应用实例</h2>

<h3>开发软件应用多个操作系统</h3>

<p>据说抽象工厂模式最初应用于多个操作系统软件开发上，比如要开发一个系统桌面软件，要应用到Windows和Linux操作系统上。那么对于这样的情况我们是不是要分别为两种操作系统开发不同的软件呢？当然不是。对于开发一个桌面软件来说分为界面UI和功能代码等，那么就可以应用抽象工厂模式了，界面UI和功能代码都分别为Windows和Linux开发不同的一套，然后利用工厂在需要Windows的时候调用创建相应的Windows的界面UI和功能代码。</p>

<h3>不同网站爬虫解析</h3>

<p>做过一个爬虫工程，需求是这样的，公司有多个站点，想要去根据搜索关键字获取它们在搜索页面一些要素，比如广告、文章、产品等信息。那么针对这种需求就采用了抽象工厂模式。首先将广告、文章等分别都作为一个产品族，每个网站都是一个产品等级。这样抽象出来的解析广告类、解析文章类等抽象接口，由每个具体产品去实现某个站点的解析广告，另一个产品族的具体产品去实现解析文章类，将具体解析过程封装在了产品内部。再使用相应的工厂来创建一个个产品族内的产品。</p>

<p>关键逻辑删减版类图如下</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/sitecrawler-uml.png"></p>

<p>这样就实现了良好的封装性，高层模块想调用知道某个网站的一些统计分析数据时，只需要知道相应的工厂来生产就行了，不需要知道具体的实现过程和复杂的处理逻辑。在产品等级也就是网站层面上扩展性好，后来有新增站点的时候，直接增加产品等级，实现相应的抽象产品类，再增加一个具体实现工厂就好了。</p>

<p>不过它的缺点是在产品族也就是想新增解析需求的时候扩展性不好，比如后来想增加对搜索关键词后的首页文章内容进行统计，以便查看匹配度时。就需要增加一个产品族即抽象产品模块，需要修改每个工厂的代码。</p>

<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/03/11/abstract-factory-pattern/">http://tianweili.github.io/blog/2015/03/11/abstract-factory-pattern/</a></p>

<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工厂方法模式]]></title>
    <link href="http://tianweili.github.io/blog/2015/03/09/factory-method-pattern/"/>
    <updated>2015-03-09T21:07:29+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/03/09/factory-method-pattern</id>
    <content type="html"><![CDATA[<p>工厂方法模式是简单工厂模式的衍生，核心工厂类不再负责具体产品的创建，而是一个抽象工厂的角色，仅仅定义子类工厂必须实现的接口。这样进一步抽象的好处是可以使系统在不修改具体工厂类的方式下引进新的产品。</p>

<!--more-->


<p>原文链接：</p>

<p><a href="http://tianweili.github.io/blog/2015/03/09/factory-method-pattern/">http://tianweili.github.io/blog/2015/03/09/factory-method-pattern/</a></p>

<h2>介绍</h2>

<p>工厂方法模式定义：Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses。<strong>定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。</strong></p>

<p>工厂方法模式的对简单工厂模式进行了抽象。有一个抽象的Factory类（可以是抽象类和接口），这个类将不再负责具体的产品生产，而是只制定一些规范，具体的生产工作由其子类去完成。在这个模式中，工厂类和产品类往往可以依次对应。即一个抽象工厂对应一个抽象产品，一个具体工厂对应一个具体产品，这个具体的工厂就负责生产对应的产品。</p>

<p><strong>工厂方法模式的核心和关键点是对工厂也进行了抽象。</strong></p>

<h2>UML类图</h2>

<p>工厂方法模式的UML类图如下所示：</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/factory-method-uml.png"></p>

<p>在上面的UML图中主要包含了四中角色：</p>

<p>抽象工厂（Abstract Factory）角色</p>

<p>抽象工厂角色是工厂方法模式的核心，主要定义了具体工厂子类必须要实现的接口，并且所有创建对象的工厂类都必须实现该方法，与应用程序无关。</p>

<p>具体工厂（Concrete Factory）角色</p>

<p>这是实现抽象工厂的具体工厂类，包含与应用程序密切相关的逻辑，要受到应用程序的调用以创建产品对象。</p>

<p>抽象产品（Abstract Product）角色</p>

<p>具体产品对象的共同父类，由它来定义所有产品的共同接口。</p>

<p>具体产品（Concrete Product）角色</p>

<p>具体产品是简单工厂模式的创建目标，所有创建的对象都是某个具体产品类的实例。</p>

<h2>代码示例</h2>

<pre><code class="java">public interface Product {
    public void method();
}
public class ProductA implements Product{
    @Override
    public void method() {
        System.out.println("ProductA Method ...");
    }
}
public class ProductB implements Product{
    @Override
    public void method() {
        System.out.println("ProductB Method ...");
    }
}
public interface Factory {
    public Product create();
}
public class FactoryA implements Factory{
    @Override
    public Product create() {
        return new ProductA();
    }
}
public class FactoryB implements Factory{
    @Override
    public Product create() {
        return new ProductB();
    }
}
public class Client {
    public static void main(String[] args) {
        Factory factory = new FactoryA();
        Product product = factory.create();
        product.method();

        factory = new FactoryB();
        product = factory.create();
        product.method();
    }
}
</code></pre>

<p>运行结果：</p>

<pre><code>ProductA Method ...
ProductB Method ...
</code></pre>

<h2>与简单工厂模式的区别</h2>

<p>工厂方法模式是简单功能工厂模式的衍生，它将工厂也抽象出来，定义了一个抽象工厂，将产品对象的实例化过程推到了下面的各个子类工厂，而且子类工厂与产品也是一一对应的。这是两者最大的区别。</p>

<p>工厂方法模式多了一个抽象工厂。</p>

<p>工厂方法模式支持多态。</p>

<h2>优点</h2>

<p>解决了许多简单工厂模式中出现的问题。</p>

<p>完全符合”开闭原则”，具有可扩展性。</p>

<p>更为复杂的层次结构，可以应付产品结果更为复杂的场合。</p>

<p>工厂方法模式是典型的解耦框架。高层模块只需要知道产品的抽象类，其它实现类都不需要关心，符合迪米特法则。只依赖产品的抽象，符合依赖倒置原则。使用产品子类替换产品父类，符合里氏替换原则。</p>

<h2>缺点</h2>

<p>抽象出了一个抽象工厂，添加了具体工厂子类，会提高系统的复杂度。所以对于一些复杂的创建过程使用工厂方法模式才比较合适。</p>

<h2>适用场景</h2>

<p>工厂方法模式是使用非常频繁的设计模式之一，在系统设计中几乎随处可见。简单工厂模式、工厂方法模式、抽象工厂模式这三个设计模式都有一些类似的特性，所以在适用场景上也都是类似的。</p>

<p>首先，作为一个创建型模式，在任何需要生成复杂对象的地方都可以使用工厂方法模式。但是要注意对于一些生成对象简单，特别是只需要通过new来生成对象的地方，就不需要使用工厂方法模式了。因为如果使用工厂方法模式，就需要引入一个工厂类，会增加系统的复杂度。</p>

<p>另外，在需要一个可扩展性强的系统设计中，可以考虑使用工厂方法模式。比如产品对象预期可能会经常造成增加或删减等，使用工厂方法模式来设计可以使系统更加灵活。</p>

<h2>应用实例</h2>

<h3>Collection中的iterator方法</h3>

<p><code>java.util.Collection</code>接口中的<code>iterator()</code>方法就是一个工厂方法。对于iterator方法来说Collection就是一个根抽象工厂，下面还有List等接口作为抽象工厂，再往下有ArrayList等具体工厂。
<code>java.util.Iterator</code>接口是根抽象产品，下面有ListIterator等抽象产品，还有ArrayListIterator等作为具体产品。</p>

<p>获得产品代码：</p>

<pre><code class="java">Collection c = new ArrayList();
Iterator i = c.iterator();
</code></pre>

<p>基本的UML类图如下所示：</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/collection-iterator-uml.png"></p>

<h3>JDBC数据库开发</h3>

<p>在使用JDBC进行数据库开发时，如果数据库由MySQL改为Oracle或其他，则只需要改一下数据库驱动名称就可以，其他都不用修改（前提是使用的都是标准SQL语句）。或者在Hibernate框架中，更换数据库方言也是类似道理。</p>

<h3>连接邮件服务器框架</h3>

<p>如果需要设计一个连接邮件服务器的框架，那么就要考虑到连接邮件服务器有几种方式：POP3、SMTP、HTTP。就可以定义一个连接邮件服务器接口，在此接口中定义一些对邮件操作的接口方法，把这三种连接方式封装成产品类，实现接口中定义的抽象方法。再定义抽象工厂和具体工厂，当选择不同的工厂时，对应到产生相应的连接邮件产品对象。采用这种工厂方法模式的设计，就可以做到良好的扩展性。比如某些邮件服务器提供了WebService接口，只需要增加一个产品类和工厂类就可以了，而不需要修改原来代码。</p>

<h3>网页爬虫解析</h3>

<p>在一个项目中，需要实现的需求是这样的：公司有很多站点，需要带着指定的一些关键字去网站上爬取广告、文章、产品等信息解析下来，而不同的站点风格各异，爬取和解析的方式也各不相同。</p>

<p>所以这里就用到了工厂方法模式，抽象出一个抽象产品，定义公共接口，爬取解析某个站点就封装成一个产品对象。再抽象出抽象工厂，使一些具体工厂实现抽象工厂定义的调用产品接口，每个具体工厂对应一个产品。</p>

<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/03/09/factory-method-pattern/">http://tianweili.github.io/blog/2015/03/09/factory-method-pattern/</a></p>

<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单工厂模式]]></title>
    <link href="http://tianweili.github.io/blog/2015/03/08/simple-factory-pattern/"/>
    <updated>2015-03-08T19:49:20+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/03/08/simple-factory-pattern</id>
    <content type="html"><![CDATA[<p>简单工厂模式就是工厂对象根据传入的参数，动态的决定创建哪一种产品类的实例，而这些产品类继承自一个父类或一个接口。</p>

<!--more-->


<p>原文链接：</p>

<p><a href="http://tianweili.github.io/blog/2015/03/08/simple-factory-pattern/">http://tianweili.github.io/blog/2015/03/08/simple-factory-pattern/</a></p>

<h2>介绍</h2>

<p>简单工厂模式属于创建型模式，又叫做静态工厂方法(static factory method)。但是它并没有归为23种GOF设计模式其中。</p>

<p>简单工厂模式是<strong>由工厂对象来决定创建哪一种产品类的实例</strong>。</p>

<p>简单说就是工厂对象根据传入的参数，动态的决定创建哪一种产品类的实例，而这些产品类继承自一个父类或一个接口。</p>

<h2>UML类图</h2>

<p>简单工厂模式的一个基本的UML类图如下所示：</p>

<p><img src="http://7u2i08.com1.z0.glb.clouddn.com/design-pattern/simple-factory-uml.png"></p>

<p>在这个UML类图中包含以下角色：</p>

<p>工厂（Factory）</p>

<p>这是简单工厂模式的核心，由它来负责实现创建所有实例的逻辑。工厂对象用来被外界调用，根据传入的参数来决定创建哪一个产品对象。</p>

<p>抽象产品（Abstract Product）</p>

<p>抽象类或接口。是所有具体产品对象的父类，由它来定义所有具体产品的公共接口。</p>

<p>具体产品（Concrete Product）</p>

<p>具体产品是简单工厂模式的创建目标，所有创建的对象都是某个具体产品类的实例。</p>

<h2>代码示例</h2>

<pre><code class="java">public interface Product {
    public void function();
}
public class ProductA implements Product{
    @Override
    public void function() {
        System.out.println("ProductA function ...");
    }
}
public class ProductB implements Product{
    @Override
    public void function() {
        System.out.println("ProductB function ...");
    }
}
public class Factory {
    public Product create(String productName) {
        if (productName == null || "".equals(productName)) {
            return null;
        }
        if ("productA".equals(productName)) {
            return new ProductA();
        } else if ("productB".equals(productName)) {
            return new ProductB();
        }
        return null;
    }
}
public class Main {
    public static void main(String[] args) {
        Factory factory = new Factory();
        Product product1 = factory.create("productA");
        Product product2 = factory.create("productB");
        product1.function();
        product2.function();
    }
}
</code></pre>

<p>输出结果：</p>

<pre><code>ProductA function ...
ProductB function ...
</code></pre>

<h2>优点</h2>

<p>客户类和工厂类分开。消费者任何时候需要某种产品，只需向工厂请求即可。消费者无须修改就可以接纳新产品。</p>

<p>外界不用关注对象创建逻辑，产品对象具体的创建过程由工厂来实现。外界直接给定信息来决定创建哪个产品对象。</p>

<p>明确了各自的职责，有利于整个软件体系结构的优化。</p>

<h2>缺点</h2>

<p>违反高内聚责任分配原则，将所有的创建逻辑都集中在了工厂类身上。</p>

<p>如果需要添加新的产品类，则需要修改工厂类。</p>

<p>当产品类不断增多，工厂类对产品类型的判断条件过多交织在了一起，会造成逻辑过于复杂，对系统的扩展和维护不利。</p>

<h2>使用场景</h2>

<p>工厂类创建的产品对象比较少。</p>

<p>外界只需要传入工厂类参数来获得产品对象，对于产品对象的创建过程不关心。</p>

<p>简单工厂模式很容易违反高内聚责任分配原则，所以只是在一些很简单的情况下使用。</p>

<h2>应用实例</h2>

<h3>附件的解压</h3>

<p>在工作中，有一个项目模块中要求的功能是：登录邮箱，获取邮件，然后抓取邮件中的附件，下载下来，如果是压缩包，则进行解压，然后进行相应处理。在解压时就用到了简单工厂模式。附件压缩包格式不一，有zip,rar等格式，则把每一种格式的解压和处理都放到一个产品对象中，然后使用一个工厂类来决定创建哪一个产品进行相应的处理。</p>

<p>由于这个压缩包解压方式并不多，判断逻辑并不太复杂，所以也没必要用工厂方法模式，增加代码复杂度。</p>

<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/03/08/simple-factory-pattern/">http://tianweili.github.io/blog/2015/03/08/simple-factory-pattern/</a></p>

<p>转载请注明作者和文章出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单例模式的八种写法比较]]></title>
    <link href="http://tianweili.github.io/blog/2015/03/02/singleton-pattern/"/>
    <updated>2015-03-02T19:08:39+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/03/02/singleton-pattern</id>
    <content type="html"><![CDATA[<p>单例模式是最常用到的设计模式之一，熟悉设计模式的朋友对单例模式都不会陌生。一般介绍单例模式的书籍都会提到<code>饿汉式</code>和<code>懒汉式</code>这两种实现方式。但是除了这两种方式，本文还会介绍其他几种实现单例的方式，让我们来一起看看吧。</p>

<!--more-->


<p>原文链接：<a href="http://tianweili.github.io/blog/2015/03/02/singleton-pattern/">http://tianweili.github.io/blog/2015/03/02/singleton-pattern/</a></p>

<h2>简介</h2>

<p>单例模式是一种常用的软件设计模式，其定义是单例对象的类只能允许一个实例存在。</p>

<p>许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息。这种方式简化了在复杂环境下的配置管理。</p>

<h2>基本的实现思路</h2>

<p>单例模式要求类能够有返回对象一个引用(永远是同一个)和一个获得该实例的方法（必须是静态方法，通常使用getInstance这个名称）。</p>

<p>单例的实现主要是通过以下两个步骤：</p>

<ol>
<li>将该类的构造方法定义为私有方法，这样其他处的代码就无法通过调用该类的构造方法来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例；</li>
<li>在该类内提供一个静态方法，当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用。</li>
</ol>


<h2>注意事项</h2>

<p>单例模式在多线程的应用场合下必须小心使用。如果当唯一实例尚未创建时，有两个线程同时调用创建方法，那么它们同时没有检测到唯一实例的存在，从而同时各自创建了一个实例，这样就有两个实例被构造出来，从而违反了单例模式中实例唯一的原则。 解决这个问题的办法是为指示类是否已经实例化的变量提供一个互斥锁(虽然这样会降低效率)。</p>

<h2>单例模式的八种写法</h2>

<h3>1、饿汉式（静态常量）[可用]</h3>

<pre><code class="java">public class Singleton {

    private final static Singleton INSTANCE = new Singleton();

    private Singleton(){}

    public static Singleton getInstance(){
        return INSTANCE;
    }
}
</code></pre>

<p>优点：这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。</p>

<p>缺点：在类装载的时候就完成实例化，没有达到Lazy Loading的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费。</p>

<h3>2、饿汉式（静态代码块）[可用]</h3>

<pre><code class="java">public class Singleton {

    private static Singleton instance;

    static {
        instance = new Singleton();
    }

    private Singleton() {}

    public Singleton getInstance() {
        return instance;
    }
}
</code></pre>

<p>这种方式和上面的方式其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。优缺点和上面是一样的。</p>

<h3>3、懒汉式(线程不安全)[不可用]</h3>

<pre><code class="java">public class Singleton {

    private static Singleton singleton;

    private Singleton() {}

    public static Singleton getInstance() {
        if (singleton == null) {
            singleton = new Singleton();
        }
        return singleton;
    }
}
</code></pre>

<p>这种写法起到了Lazy Loading的效果，但是只能在单线程下使用。如果在多线程下，一个线程进入了if (singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式。</p>

<h3>4、懒汉式(线程安全，同步方法)[不推荐用]</h3>

<pre><code class="java">public class Singleton {

    private static Singleton singleton;

    private Singleton() {}

    public static synchronized Singleton getInstance() {
        if (singleton == null) {
            singleton = new Singleton();
        }
        return singleton;
    }
}
</code></pre>

<p>解决上面第三种实现方式的线程不安全问题，做个线程同步就可以了，于是就对getInstance()方法进行了线程同步。</p>

<p>缺点：效率太低了，每个线程在想获得类的实例时候，执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return就行了。方法进行同步效率太低要改进。</p>

<h3>5、懒汉式(线程安全，同步代码块)[不可用]</h3>

<pre><code class="java">public class Singleton {

    private static Singleton singleton;

    private Singleton() {}

    public static Singleton getInstance() {
        if (singleton == null) {
            synchronized (Singleton.class) {
                singleton = new Singleton();
            }
        }
        return singleton;
    }
}
</code></pre>

<p>由于第四种实现方式同步效率太低，所以摒弃同步方法，改为同步产生实例化的的代码块。但是这种同步并不能起到线程同步的作用。跟第3种实现方式遇到的情形一致，假如一个线程进入了if (singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。</p>

<h3>6、双重检查[推荐用]</h3>

<pre><code class="java">public class Singleton {

    private static volatile Singleton singleton;

    private Singleton() {}

    public static Singleton getInstance() {
        if (singleton == null) {
            synchronized (Singleton.class) {
                if (singleton == null) {
                    singleton = new Singleton();
                }
            }
        }
        return singleton;
    }
}
</code></pre>

<p>Double-Check概念对于多线程开发者来说不会陌生，如代码中所示，我们进行了两次if (singleton == null)检查，这样就可以保证线程安全了。这样，实例化代码只用执行一次，后面再次访问时，判断if (singleton == null)，直接return实例化对象。</p>

<p>优点：线程安全；延迟加载；效率较高。</p>

<h3>7、静态内部类[推荐用]</h3>

<pre><code class="java">public class Singleton {

    private Singleton() {}

    private static class SingletonInstance {
        private static final Singleton INSTANCE = new Singleton();
    }

    public static Singleton getInstance() {
        return SingletonInstance.INSTANCE;
    }
}
</code></pre>

<p>这种方式跟饿汉式方式采用的机制类似，但又有不同。两者都是采用了类装载的机制来保证初始化实例时只有一个线程。不同的地方在饿汉式方式是只要Singleton类被装载就会实例化，没有Lazy-Loading的作用，而静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。</p>

<p>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p>

<p>优点：避免了线程不安全，延迟加载，效率高。</p>

<h3>8、枚举[推荐用]</h3>

<pre><code class="java">public enum Singleton {
    INSTANCE;
    public void whateverMethod() {

    }
}
</code></pre>

<p>借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。可能是因为枚举在JDK1.5中才添加，所以在实际项目开发中，很少见人这么写过。</p>

<h2>优点</h2>

<p>系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。</p>

<h2>缺点</h2>

<p>当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new，可能会给其他开发人员造成困扰，特别是看不到源码的时候。</p>

<h2>适用场合</h2>

<ul>
<li>需要频繁的进行创建和销毁的对象；</li>
<li>创建对象时耗时过多或耗费资源过多，但又经常用到的对象；</li>
<li>工具类对象；</li>
<li>频繁访问数据库或文件的对象。</li>
</ul>


<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/03/02/singleton-pattern/">http://tianweili.github.io/blog/2015/03/02/singleton-pattern/</a></p>

<p>转载请注明作者及出处，谢谢。</p>
]]></content>
  </entry>
  
</feed>
