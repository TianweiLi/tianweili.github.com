<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | 李天炜]]></title>
  <link href="http://tianweili.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://tianweili.github.io/"/>
  <updated>2015-03-10T14:48:55+08:00</updated>
  <id>http://tianweili.github.io/</id>
  <author>
    <name><![CDATA[李天炜 litianwei2013[AT]gmail.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux中的sort命令]]></title>
    <link href="http://tianweili.github.io/blog/2015/02/25/linux-sort/"/>
    <updated>2015-02-25T23:44:09+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/02/25/linux-sort</id>
    <content type="html"><![CDATA[<!--more-->


<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/25/linux-sort/">http://tianweili.github.io/blog/2015/02/25/linux-sort/</a></p>

<h2>简介</h2>

<p>sort命令死根据不同的数据类型以行为单位对数据进行排序。</p>

<p>sort的默认比较规则是从首字符向后，按照ASCII码值进行比较，将结果按照升序输出。</p>

<h2>用法</h2>

<p>sort命令的基本格式如下：</p>

<pre><code class="bash">sort [-bcfMnrtk] [source-file] [-o output-file]
</code></pre>

<p>sort命令可使用的参数有：</p>

<pre><code>-b   忽略每行前面的所有空格字符，从第一个可见字符开始比较。
-c   检查文件是否已经排好序，如果乱序则输出第一个乱序行的相关信息，最后返回1
-C   检查文件是否已经排好序，如果乱序，则不输出内容，仅返回1
-f   排序时忽略大小写字母。
-M   将前面3个字母依照月份的缩写进行排序，比如JAN小于FEB。
-n   依照数值的大小排序。
-o   将排序后的结果存入指定的文件
-r   降序输出
-t   &lt;分隔字符&gt;   指定排序时所用的栏位分隔字符
-u   在输出行中去除重复行
-k   选择以哪个区间进行排序。
</code></pre>

<p>下面将会对这些参数进行介绍，其中简单的参数就不再赘述了。</p>

<h2>参数</h2>

<h3>-o选项</h3>

<p>sort是把排序后结果输出到标准输出，所以需要使用重定向将结果写入指定的文件，比如<code>sort file &gt; newfile</code>。</p>

<p>但是重定向的方式在遇到这种需求就无能为力了——把结果输出到原文件中。</p>

<p>如果还是使用重定向的方式，则会把原文件给清空。</p>

<p>而使用<code>-o</code>参数则可以完美解决这个问题：</p>

<pre><code class="bash">sort -r test.dat -o test.dat
</code></pre>

<h3>-t与-o选项</h3>

<p>对于某些有固定格式的文件，比如：</p>

<pre><code>a   12
b   32
c   3
</code></pre>

<p>如果想以第二列数值大小降序输出，则需要使用-t和-o参数了。其中-k指定分隔符，-k指定待排序的列。</p>

<pre><code class="bash">sort -nr -t'\t' -k2 test.bat -o test.bat
</code></pre>

<p>作者：<a href="http://tianweili.github.com/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/25/linux-sort/">http://tianweili.github.io/blog/2015/02/25/linux-sort/</a></p>

<p>转载请注明作者及出处，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux中的awk命令]]></title>
    <link href="http://tianweili.github.io/blog/2015/02/24/linux-awk/"/>
    <updated>2015-02-24T10:33:41+08:00</updated>
    <id>http://tianweili.github.io/blog/2015/02/24/linux-awk</id>
    <content type="html"><![CDATA[<p>本文主要介绍了Linux中的awk命令的一些知识以及如何使用awk编程。不同于grep的查找、sed的编辑等命令，awk命令在文本处理和生成报告等地方是经常用到的一个强大命令。</p>

<!--more-->


<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/24/linux-awk/">http://tianweili.github.io/blog/2015/02/24/linux-awk/</a></p>

<h2>简介</h2>

<p>awk命令主要用于文本分析。它的处理方式是读入文本，将每行记录以一定的分隔符（默认为空格）分割成不同的域，然后对不同的域进行各种处理与输出。</p>

<h2>命令格式</h2>

<p>awk命令的一个基本格式如下：</p>

<pre><code class="bash">awk '{pattern + action}' {filenames}
</code></pre>

<p>无论awk命令简单还是复杂，基本的格式如上所示。其中引号为必须，引号内代表一个awk程序。大括号非必须，括起来用于根据特定的模式对一系列指令进行分组。pattern是在数据中查找内容，支持正则匹配。action对查找出来的记录执行相应的处理，比如打印和输出等。</p>

<h2>awk三种调用方式</h2>

<h3>命令行方式</h3>

<pre><code class="bash">awk [-F 'field-separator'] 'commands' input-file(s)
</code></pre>

<p>其中的<code>-F</code>指令是可选的，后面跟着指定的域分隔符，比如tab键等（默认是空格）。后面的<code>commands</code>是真正的awk命令。<code>input-file(s)</code>代表输入的一个或多个文件</p>

<p>命令行调用方式是最经常使用的一种方式，也是本文所讲的重点。</p>

<h3>shell脚本方式</h3>

<p>把平时所写的shell脚本的首行<code>#!/bin/sh</code>换成<code>#!/bin/awk</code>。把所有的awk命令插入脚本中，通过调用脚本来执行awk命令。</p>

<h3>插入文件调用</h3>

<p>把所有的awk命令插入单独的文件中，然后通过以下命令调用awk：</p>

<pre><code class="bash">awk -f awk-script-file input-file(s)
</code></pre>

<p>其中<code>-f</code>指定了要调用的包含awk命令的文件。</p>

<h2>awk应用示例</h2>

<h3>打印指定字段</h3>

<p>打印当前目录下所有的文件名和文件大小列表，以tab键分割：</p>

<pre><code class="bash">ls -lh | awk '{print $5"\t"$9}'
</code></pre>

<p>$0变量是指当前一行记录，$1是指第一个域数据，$2指第二个域数据……以此类推。</p>

<h3>print与printf</h3>

<p>awk提供了print与printf两种打印输出的函数。</p>

<p>print的参数可以是变量、数值和字符串。参数用逗号分割，字符串必须用双引号引用。</p>

<p>printf与C语言中的printf函数类似，可以用来格式化字符串。</p>

<pre><code class="bash">awk -F ':' '{printf("filename:%10s,linenumber:%s,columns:%s,linecontent:%s\n",FILENAME,NR,NF,$0)}' /etc/passwd
</code></pre>

<h3>根据指定分隔符切割域</h3>

<pre><code class="bash">ll | awk -F '\t' 'print $9'
</code></pre>

<h3>BEGIN&hellip;END</h3>

<pre><code class="bash">ls -lh | awk 'BEGIN {print "size\tfilename"}  {print $5"\t"$9} END {print "---end---"}'
</code></pre>

<p><code>BEGIN...END</code>语句的执行流程是，awk命令读入数据，然后从BEGIN语句开始，依次读取每一行记录，并打印相应的域，当所有记录都处理后再执行END语句后的程序。也就是说<code>BEGIN...END</code>语句块中的内容在读取数据过程中会反复执行，直到数据读取完成。</p>

<h3>pattern正则匹配</h3>

<p>下面的例子表示打印当前目录下，所有以.bat后缀结尾的文件名列表：</p>

<pre><code class="bash">ls -l | awk -F: '/\.dat$/{print $9}'
</code></pre>

<h2>awk内置变量</h2>

<p>awk有许多内置变量用来设置环境变量信息，这些变量都可以被改变。常用的内置变量和作用如下所示：</p>

<pre><code class="bash">ARGC               命令行参数个数
ARGV               命令行参数排列
ENVIRON            支持队列中系统环境变量的使用
FILENAME           awk浏览的文件名
FNR                浏览文件的记录数
FS                 设置输入域分隔符，等价于命令行-F选项
NF                 浏览记录的域的个数
NR                 已读的记录数
OFS                输出域分隔符
ORS                输出记录分隔符
RS                 指定用来切片的分隔符
</code></pre>

<p>awk中的内置变量都是很有用处的，可以直接使用。比如上面讲过的指定分隔符操作就可以用FS变量来代替：</p>

<pre><code class="bash">ll | awk '{FS="\t";} {print $9}'
</code></pre>

<p>下面会有很多实用awk内置变量的例子。</p>

<h2>awk编程</h2>

<h3>定义变量和运算</h3>

<p>awk可以自定义变量，并参与运算。</p>

<p>比如统计当前目录下列出的文件总大小，以M为单位显示出来：</p>

<pre><code class="bash">ls -l | awk 'BEGIN {size=0;} {size+=$5;} END {print "size is ", size}'
</code></pre>

<p>注意此统计没有把文件夹下的所有文件算在内。</p>

<p>自定义的变量有时候可以不用作初始化操作，不过正规起见，还是建议作初始化操作为好。</p>

<h3>条件语句</h3>

<p>awk中的条件语句跟C语言类似，声明方式如下：</p>

<pre><code class="bash">if(expression){
    statement1;
    statement2;
}

if(expression){
    statement1;
} else {
    statement2;
}

if(expression1){
    statement1;
} else if (expression2) {
    statement2;
} else {
    statement3;
}
</code></pre>

<p>看下面例子，将第三列为12，第六列为0的行打印输出：</p>

<pre><code class="bash">awk 'BEGIN {FS="\t"}{if($3==12 &amp;&amp; $6==0) print $0} END' incoming_daily_20150223.dat
</code></pre>

<h3>循环语句</h3>

<p>awk中的循环语句同样与C语言中的类似，支持while、do/while、for、break、continue关键字。</p>

<p>看下面的例子，输出每行的行号和第一列的数据：</p>

<pre><code class="bash">awk 'BEGIN {FS="\t";} {data[NR] = $1} END {for(i=1; i&lt;=NR; i++) print i"\t"data[i]}' incoming_daily_20150223.dat
</code></pre>

<h3>数组</h3>

<p>看下面例子，统计第六列每一个值出现的次数：</p>

<pre><code class="bash">awk 'BEGIN {FS="\t"}{count[$6]++} END {for(x in count) print x,count[x]}' incoming_daily_20150223.dat
</code></pre>

<p>作者：<a href="http://tianweili.github.io/">李天炜</a></p>

<p>原文链接：<a href="http://tianweili.github.io/blog/2015/02/24/linux-awk/">http://tianweili.github.io/blog/2015/02/24/linux-awk/</a></p>

<p>转载请注明作者及出处，谢谢。</p>
]]></content>
  </entry>
  
</feed>
